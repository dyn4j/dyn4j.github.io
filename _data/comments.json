[{
    "id": 208754,
    "post": 370,
    "parent": 208627,
    "date": "2020-12-10T20:06:54",
    "content": "<p>nvm, got it.<br />\nas @alleysark said, it&#8217;s only the comment which is wrong. Should have been &#8220;get the vector from the edge away from the origin‚Äù</p>\n",
    "author": "Roy",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 208627,
    "post": 370,
    "parent": 9155,
    "date": "2020-12-05T23:04:03",
    "content": "<p>Hi William,</p>\n<p>I think he referred to the calculation of n in findClosestEdge(), using the triple product abxoaxab.<br />\ncorrect me if I&#8217;m wrong, but I think you get a reversed n pointing away from the origin.<br />\nYou can see it in line 10 of iteration 1, n=(-32, 96), would point away.<br />\nperhaps you should have used ao instead of oa.</p>\n<p>Roy</p>\n",
    "author": "Roy",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d2bc150d5cfdf1bb78ad8a9afde10dd?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 207491,
    "post": 366,
    "parent": 0,
    "date": "2020-10-18T16:56:24",
    "content": "<p>Hi,<br />\nYour Work is so nice Bro.</p>\n",
    "author": "Cress Joffen",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2c2783cbf95abe043b9bf2e5af4ae4b4?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2c2783cbf95abe043b9bf2e5af4ae4b4?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2c2783cbf95abe043b9bf2e5af4ae4b4?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 206274,
    "post": 374,
    "parent": 0,
    "date": "2020-08-31T09:15:37",
    "content": "<p>You say it can be used to model a spring &#8211; how?</p>\n",
    "author": "NK",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/6e1e48d7bb6f9d3410f159ad95e5241f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/6e1e48d7bb6f9d3410f159ad95e5241f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/6e1e48d7bb6f9d3410f159ad95e5241f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 206016,
    "post": 372,
    "parent": 0,
    "date": "2020-08-20T03:25:35",
    "content": "<p>A diagram would help a lot</p>\n",
    "author": "Hei",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3800f117ead3d5bcd0ea39d2ceabeb6f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3800f117ead3d5bcd0ea39d2ceabeb6f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3800f117ead3d5bcd0ea39d2ceabeb6f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 203452,
    "post": 366,
    "parent": 0,
    "date": "2020-04-17T20:34:33",
    "content": "<p>This is really good explaination. But that does not fit into a 3d environnement. What can be modified to adjust this tutorial so we can detect collision bewteen &#8230; maybe 2 triangles plane in 3d&amp;</p>\n",
    "author": "Linden",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1aaa7b5fddee754a9d5a4937ecafe7f3?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1aaa7b5fddee754a9d5a4937ecafe7f3?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1aaa7b5fddee754a9d5a4937ecafe7f3?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 202321,
    "post": 366,
    "parent": 0,
    "date": "2020-02-09T04:10:44",
    "content": "<p>Just wanted to say THANK YOU!  Best explanation of SAT found so far&#8230;</p>\n",
    "author": "Tony",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/09c4352bf6d304e003a95bdd34205998?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/09c4352bf6d304e003a95bdd34205998?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/09c4352bf6d304e003a95bdd34205998?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 201430,
    "post": 368,
    "parent": 8985,
    "date": "2019-12-14T12:36:53",
    "content": "<p>ha..! even because this&#8230;, I had some confuse too a moment ago, I am thinking the *2 is means every number make </p>\n<p>a-b = a + (0 &#8211; b)</p>\n<p>so is 2 operations, a negatation, a addition lmao</p>\n",
    "author": "Dre",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/65c4bdd13fa21e1e86d2b6b82ccaebae?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/65c4bdd13fa21e1e86d2b6b82ccaebae?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/65c4bdd13fa21e1e86d2b6b82ccaebae?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 200767,
    "post": 368,
    "parent": 0,
    "date": "2019-11-25T17:53:03",
    "content": "<p>I just realized it doesn&#8217;t like the less than and greater than<br />\ncharacters. Here is a re-post of the code with GT for greater<br />\nthan and LT for less than:</p>\n<p>// cross2D: a.x * b.y &#8211; a.y * b.x<br />\n// a.cross2D(b): GT 0 if a is to the right, LT 0 if a is to the left<br />\n//</p>\n<p>baSide = ao.cross2D(ba); // GT 0 if origin to the right of ba.<br />\nacSide = ao.cross2D(ac); // GT 0 if origin to the right of ac.</p>\n<p>// If origin is on the same side of both ba and ac then it is in<br />\n// R5. baSide * acSide can only return negative if the signs are<br />\n// different (origin is on opposite sides of both).</p>\n<p>if (!(baSide * acSide LT 0))<br />\n&#8230;.return true; // R5 &#8211; origin is not on opposite sides (on same side).</p>\n<p>if (ac.cross2D(ab) GT 0) // CCW &#8211; ac is to the right of ab.<br />\n&#8230;.if (baSide GT 0) { // R4 &#8211; origin to the right of ba.<br />\n&#8230;&#8230;..direction = ba.perpRight();<br />\n&#8230;&#8230;..Remove c<br />\n&#8230;.else // R3 &#8211; origin to the right of ac.<br />\n&#8230;&#8230;..direction = ac.perpRight();<br />\n&#8230;&#8230;..Remove b<br />\nelse // CW<br />\n&#8230;.if (baSide LT 0) // R4 &#8211; origin to the left of ba.<br />\n&#8230;&#8230;..direction = ba.perpLeft();<br />\n&#8230;&#8230;..Remove c<br />\nelse // R3 &#8211; origin to the left of ac.<br />\n&#8230;.direction = ac.perpLeft();<br />\n&#8230;.Remove b</p>\n",
    "author": "Wil Bennett",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 200766,
    "post": 368,
    "parent": 0,
    "date": "2019-11-25T17:45:58",
    "content": "<p>Yup. It mangled the diagram :(  Let me know if it isn&#8217;t clear.</p>\n<p>The important part of the diagram is:</p>\n<p>CCW:</p>\n<p>&#8230;&#8230;&#8230;b&#8230;.c<br />\nR4&#8230;&#8230;&#8230;&#8230;&#8230;R3<br />\n&#8230;&#8230;&#8230;&#8230;a</p>\n<p>CW:</p>\n<p>&#8230;&#8230;&#8230;c&#8230;.b<br />\nR3&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;R4<br />\n&#8230;&#8230;&#8230;&#8230;a</p>\n",
    "author": "Wil Bennett",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 200765,
    "post": 368,
    "parent": 0,
    "date": "2019-11-25T17:37:32",
    "content": "<p>Hello William,</p>\n<p>Similar to the discussion between you and Saad. I&#8217;ve implemented the<br />\n2 simplex case using only cross and perp.  I believe it&#8217;s fewer<br />\ninstructions. Here is the psuedo-code (may need to copy/paste this into an editor, hard to get the formatting right here):</p>\n<p>// &#8230;&#8230;&#8230;&#8230;CCW&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..CW<br />\n//==============================================================<br />\n//                                      .<br />\n// &#8230;.R6 |&#8230;..R2&#8230;..|..R1&#8230;&#8230;&#8230;&#8230;.R6 |&#8230;..R2&#8230;..|..R1<br />\n// &#8230;__ b  b __<br />\n// &#8230;&#8230;..\\&#8230;&#8230;&#8230;/ &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.\\&#8230;&#8230;&#8230;/<br />\n// &#8230;&#8230;&#8230;\\&#8230;R5../&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.\\&#8230;R5../<br />\n// &#8230;&#8230;.R4.\\&#8230;../.R3&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;R3.\\&#8230;../.R4<br />\n// &#8230;&#8230;&#8230;..\\&#8230;/&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;..\\&#8230;/<br />\n// &#8230;&#8230;&#8230;&#8230;\\./&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.\\./<br />\n// &#8230;&#8230;&#8230;../.a.\\&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;../.a.\\<br />\n// &#8230;&#8230;&#8230;./..R7.\\&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;/..R7.\\<br />\n//<br />\n// cross2D: a.x * b.y &#8211; a.y * b.x<br />\n// a.cross2D(b): &gt; 0 if a is to the right,  0 if origin to the right of ba.<br />\nacSide = ao.cross2D(ac); // &gt; 0 if origin to the right of ac.</p>\n<p>// If origin is on the same side of both ba and ac then it is in<br />\n// R5. baSide * acSide can only return negative if the signs are<br />\n// different (origin is on opposite sides of both).</p>\n<p>if (!(baSide * acSide  0) // CCW &#8211; ac is to the right of ab.<br />\n&#8230;.if (baSide &gt; 0) { // R4 &#8211; origin to the right of ba.<br />\n&#8230;&#8230;..direction = ba.perpRight();<br />\n&#8230;&#8230;..Remove c<br />\n&#8230;.else // R3 &#8211; origin to the right of ac.<br />\n&#8230;&#8230;..direction = ac.perpRight();<br />\n&#8230;&#8230;..Remove b<br />\nelse // CW<br />\n&#8230;.if (baSide &lt; 0) // R4 &#8211; origin to the left of ba.<br />\n&#8230;&#8230;..direction = ba.perpLeft();<br />\n&#8230;&#8230;..Remove c<br />\nelse // R3 &#8211; origin to the left of ac.<br />\n&#8230;.direction = ac.perpLeft();<br />\n&#8230;.Remove b</p>\n",
    "author": "Wil Bennett",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/74426faa9c4735aa9ab8e9e6aa25753e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 198549,
    "post": 366,
    "parent": 0,
    "date": "2019-10-05T22:37:01",
    "content": "<p>i have implemented this for convex polygons and its working fine, but how do i get the MTV for concave polygons?</p>\n",
    "author": "Orbit",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b93325e5762b03090b84240fc82353a7?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b93325e5762b03090b84240fc82353a7?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b93325e5762b03090b84240fc82353a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 195099,
    "post": 394,
    "parent": 0,
    "date": "2019-06-15T20:41:22",
    "content": "<p>Re,</p>\n<p>Sorry, my vertices initialization was wrong. I have forgotten the coordinate of the &#8220;v&#8221; vector.</p>\n<p>And so, if I use my normal collision found by the SAT, I don&#8217;t need to flip ;)</p>\n<p>Sorry for myenglish.<br />\nTk</p>\n",
    "author": "tankerpat",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 195072,
    "post": 394,
    "parent": 0,
    "date": "2019-06-14T11:38:52",
    "content": "<p>Hello,</p>\n<p>Thanx for this great tutorial, it&#8217;s help me a lot.</p>\n<p>Everything works fine only if my BodyB coordibnates are Vector2(0,0).<br />\nI don&#8217;t know why, someone can help me?</p>\n<p>Thanks in advance.<br />\nTk</p>\n",
    "author": "tankerpat",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5899931d725dd47513cc54d9c79e16e0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 173408,
    "post": 394,
    "parent": 9250,
    "date": "2019-01-10T21:20:02",
    "content": "<p>Hi William, I know this has been more than 7 years since you posted the article but it&#8217;s still being used.<br />\nIt seems Peter was correct when saying only example 2 worked when you use (y, -x) to orthogonalize the ref vector. If you are using the right-hand rule as you say, it should be (-y, x). But then example 2 doesn&#8217;t work.<br />\nI found that by using the inverted reference face normal (pointing inside the polygon), I get correct results for all three examples, the correct points are getting clipped. This also removes the need for the flip flag.</p>\n",
    "author": "Nicolas",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0d1e2557d7b1ce876e1b2f12af68dd05?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0d1e2557d7b1ce876e1b2f12af68dd05?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0d1e2557d7b1ce876e1b2f12af68dd05?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 169885,
    "post": 370,
    "parent": 0,
    "date": "2018-11-08T23:44:30",
    "content": "<p>Also,<br />\nfor implementing EPA in 3D, since first we have 4 points coming from GJK<br />\nsgould we check all four faces?or only three is enough?</p>\n",
    "author": "Atia",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 169877,
    "post": 370,
    "parent": 0,
    "date": "2018-11-08T17:52:42",
    "content": "<p>Hi William<br />\nSpecial Thanks for this useful tutorial, now am very clear.</p>\n<p>my question is that for penetration depth between a single point and a convex object which algorithm is better?EPA or GJK distance or something else?</p>\n<p>and penetration depth is not too much deep or  even not very small (touching) something in the middle</p>\n<p>I look forward to hearing back from you</p>\n<p>Thanks Atia</p>\n",
    "author": "Atia",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/6c8abcee9596f6361bc08ed505817248?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 168423,
    "post": 370,
    "parent": 168373,
    "date": "2018-10-06T12:57:48",
    "content": "<p>@damien</p>\n<p>GJK can detect collision regardless of depth.  The issue is that the depth can be wrong when the penetration is large.  On the flip side EPA continues to collect vertices that must be iterated on each iteration.  This is especially true when the minkowski sun has curved edges.</p>\n<p>As for a comparison, I‚Äôm not sure.  In my experience EPA performance is acceptable, but I‚Äôm only speaking for 2D.  If your set of shapes doesn‚Äôt include curved shapes, then I‚Äôd expect EPA to be very close to GJK.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3e97336e66e133ba019feb50f9c1046e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3e97336e66e133ba019feb50f9c1046e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3e97336e66e133ba019feb50f9c1046e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 168373,
    "post": 370,
    "parent": 0,
    "date": "2018-10-05T00:07:09",
    "content": "<p>Hi,<br />\nThank you for your description of the EPA. In the end you say that due to its computational cost, the EPA is sometimes not used and the GJK distance algorithm runs with smaller homotheties of the shapes. I wonder what you call &#8216;small&#8217; penetration depths, and how slower it is to use the EPA over GJK to compute contact points.<br />\nMy current code does the second option (performing GJK on smaller solids), and is based on the Gino Van den Bergen implementation of GJK.<br />\nThanks a lot<br />\nDamien</p>\n",
    "author": "Damien",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/6aef3d976a506017d1c98b0a65397573?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/6aef3d976a506017d1c98b0a65397573?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/6aef3d976a506017d1c98b0a65397573?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 166093,
    "post": 394,
    "parent": 166084,
    "date": "2018-05-31T17:19:39",
    "content": "<p>Mine follows your examples exactly but when it reaches the calculation of refNorm it differs. In example 1 and 3 I get the same values for refNorm as your examples do. When it comes to example 2, calculating the cross product gives me (0, -1) which is then flipped to be (0,1) when it should have been crossed to give (0,1) and then flipped to (0,-1). I can alter the way I calculate cross products with how you describe but then it only works for example 2 and now examples 1 and 3 are not correct.</p>\n<p>Everything works exactly as expected right up until the refNorm calculation and when refNorm is correct the output is as expected too.</p>\n<p>Thanks for your help! Your tutorials are really well done!</p>\n",
    "author": "Sean",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 166084,
    "post": 394,
    "parent": 166057,
    "date": "2018-05-31T13:04:43",
    "content": "<p>@Sean<br />\nI&#8217;m not sure at what point yours is failing, but if you can supply more details about the problem you have I could assist more.  Alternatively, you can also look at my implementation of this algorithm <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/manifold/ClippingManifoldSolver.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/manifold/ClippingManifoldSolver.java\" rel=\"nofollow\">here</a>.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 166057,
    "post": 394,
    "parent": 9254,
    "date": "2018-05-30T20:09:32",
    "content": "<p>Hey Peter. Just wondering how you managed to figure it out? I&#8217;m in the same position as you were, where when using the cross product examples 1 and 3 would work and 2 would fail. If i changed the way I did the cross product to as described by William then 2 works and 1 and 3 fails.</p>\n",
    "author": "Sean",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4dbf90ba36b325c04f4ac020a0c9ce90?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 165881,
    "post": 366,
    "parent": 165735,
    "date": "2018-05-24T16:20:38",
    "content": "<p>@Macky I have updated the broken links.  For quick reference, here are the links to the relevant code:</p>\n<ul>\n<li><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Polygon.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Polygon.java\" rel=\"nofollow\">Polygon</a></li>\n<li><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java\" rel=\"nofollow\">Interval</a></li>\n<li><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java\" rel=\"nofollow\">SAT</a></li>\n</ul>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 165735,
    "post": 366,
    "parent": 0,
    "date": "2018-05-19T18:30:00",
    "content": "<p>How do you implement the projection class. Your github link is dead and I need to implement the getOverlap() and overlap methods.</p>\n",
    "author": "Macky",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/6b16059c810cdf50c3d045b1762d18ac?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/6b16059c810cdf50c3d045b1762d18ac?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/6b16059c810cdf50c3d045b1762d18ac?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 162509,
    "post": 366,
    "parent": 0,
    "date": "2018-01-18T22:40:25",
    "content": "<p>Does the algorithm have to be performed in 2 for loops? I generate all of my normals and store them in a single buffer, then do a single for loop over them. I&#8217;ve been battling bugs for days. After reducing my shapes to triangles (which made their behavior easier to observe) I noticed the issue is most likely related to the MTV or the normals. The MTV appears to be correct when based off one shape&#8217;s normals, but backwards when based off the other. My shapes are generated in a circular fashion (rotating counter clockwise using sin/cos) and I use the corresponding right-hand normals.  I have tried flipping the vector based on the direction of the vector between the two shapes&#8217; centers but this only reverses the issue to the other shape.</p>\n",
    "author": "Christiansen",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/998646a06d256e7c79f829ba9411f223?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/998646a06d256e7c79f829ba9411f223?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/998646a06d256e7c79f829ba9411f223?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 158860,
    "post": 394,
    "parent": 158796,
    "date": "2017-10-02T22:23:48",
    "content": "<p>I believe I&#8217;ve found the answers to the questions after some thinking. Question closed.</p>\n",
    "author": "Daniel",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 158796,
    "post": 394,
    "parent": 0,
    "date": "2017-09-30T21:41:28",
    "content": "<p>I have two questions, which are both related to coordinate systems:<br />\n1. What coordinate system do all the operations happen in? Is it each objects&#8217; local coordinates, or in world coordinates?<br />\n2. Will everything work in normal screen coordinates, or is this in standard Cartesian space?</p>\n<p>Sorry if this stuff should be obvious, as I&#8217;m new to making physics engines.</p>\n",
    "author": "Daniel",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/923b3315719227335cbd51b435e29069?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 156381,
    "post": 394,
    "parent": 0,
    "date": "2017-06-18T18:40:33",
    "content": "<p>Hello,</p>\n<p>This article looks like it could complete my necessary collision processing for my physics engine, but there is one point I am confused on: how do I get the collision/seperation normal?  You begin this algorithm assuming it is found, but my current GJK algorithm simply returns true/false on a collision check.</p>\n",
    "author": "Benjamin",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 156380,
    "post": 368,
    "parent": 0,
    "date": "2017-06-18T16:11:39",
    "content": "<p>That is, I am dealing with low depth collisions where a vertex shallowly penetrates an edge.  Using GJK, I know a collision has occurred before significant penetration, but I need to know the vertex and edge involved in the collision to calculate a physically accurate collision response.</p>\n",
    "author": "Benjamin",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 156344,
    "post": 368,
    "parent": 0,
    "date": "2017-06-17T03:49:05",
    "content": "<p>Hello!</p>\n<p>I just finished implementing this algorithm in part of my mission to build a physics engine for game development. I found this page very helpful, but I still need some more information from the collision finding algorithm: point of collision. The very point in which one vertex crosses another polygon&#8217;s side is necessary for calculating impulse and simulating physics. Could someone guide me to how to do this?</p>\n<p>Thanks,<br />\nBenjamin</p>\n",
    "author": "Benjamin",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/666e55bc0cf0133e72a7d9c0c0fa2bbe?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 141463,
    "post": 366,
    "parent": 0,
    "date": "2017-01-08T05:03:02",
    "content": "<p>Where does normalizing the vectors come in to give an accurate overlap? Is the MTV normalized or all the projections entirely. What has to be changed in order for an accurate overlap to be obtained?</p>\n",
    "author": "David",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fd845c13a9380fe5bcad7bf9601816d3?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fd845c13a9380fe5bcad7bf9601816d3?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fd845c13a9380fe5bcad7bf9601816d3?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 136616,
    "post": 369,
    "parent": 0,
    "date": "2016-12-11T11:59:25",
    "content": "<p>I think you made a mistake in the section &#8220;The distance&#8221;. If the t parameter is greater  than 1 or smaller that 0, which can happen with the dot product, you&#8217;ll end up with a point that doesnt lie on the segment. The solution to that problem would be to clamp t to [0;1], in order to only get a point on the segment.</p>\n",
    "author": "Bubu",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5cbd1fbda858a97dde7d1509a42d9e30?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5cbd1fbda858a97dde7d1509a42d9e30?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5cbd1fbda858a97dde7d1509a42d9e30?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 125297,
    "post": 366,
    "parent": 125295,
    "date": "2016-10-15T04:47:10",
    "content": "<p>Not sure what happened to my leading spaces/the second half of my comment. </p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/pastebin.com/3HKMqNRL');\"  href=\"http://pastebin.com/3HKMqNRL\" rel=\"nofollow ugc\">http://pastebin.com/3HKMqNRL</a></p>\n",
    "author": "Cory Efird",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 125295,
    "post": 366,
    "parent": 0,
    "date": "2016-10-15T04:29:55",
    "content": "<p>I found a nice way of handling containment/overlap all at once by getting the displacement between two intervals.</p>\n<p>[code]<br />\n//returns the minimum distance required to move p2 out of p1. Will be +/- depending if it needs to be moved up/down.<br />\n//if p1 and p2 are not overlapping it returns 0<br />\nfloat displacement = p1.getDisplacement(p2); </p>\n<p>if (!displacement)<br />\n    return false;<br />\nelse<br />\n{<br />\n    if (abs(displacement)  other.max || other.min &gt; max) //This is the basically just the overlap() method<br />\n        return 0;<br />\n    else<br />\n    {<br />\n        float mid = (max+min)/2;<br />\n        if (abs(mid-max) &gt; abs(mid-min))<br />\n            return max &#8211; other.min;<br />\n        else<br />\n            return other.max &#8211; min;<br />\n    }<br />\n}<br />\n[/code]</p>\n",
    "author": "Cory Efird",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2decc9f278eae4e40f83104ae9f29934?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 112972,
    "post": 366,
    "parent": 0,
    "date": "2016-08-31T00:38:41",
    "content": "<p>Thank you for this wonderfully detailed explanation.</p>\n",
    "author": "Eric Rini",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a1d0f60e3993d0e8c4ba443cef5aed67?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a1d0f60e3993d0e8c4ba443cef5aed67?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a1d0f60e3993d0e8c4ba443cef5aed67?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 106462,
    "post": 369,
    "parent": 106365,
    "date": "2016-08-05T23:35:59",
    "content": "<p>@shome</p>\n<p>It&#8217;s been a while since I&#8217;ve looked into it. The only ones I remember coming across are Lin-Canny Closest Features Algorithm and another that was based off of it.  There was some question of one of those being patented so I didn&#8217;t look too deep into those.</p>\n<p>In my experience, GJK will only slow down near convergence for rounded or ill-conditioned shapes.  If your shapes are all polytopes, then it should be lightning fast.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 106365,
    "post": 369,
    "parent": 0,
    "date": "2016-08-05T06:24:33",
    "content": "<p>what are the algorithms to determine distance between convex hulls in non-intersecting case? I read that GJK slows down once its near convergence. I am looking for faster ones.</p>\n",
    "author": "shome",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 106336,
    "post": 370,
    "parent": 106291,
    "date": "2016-08-05T01:09:44",
    "content": "<p>@shome</p>\n<p>No.  EPA is only for the collision case.  Take a look at the <a href=\"http://www.dyn4j.org/2010/04/gjk-distance-closest-points/\" target=\"_blank\">GJK ‚Äì Distance &#038; Closest Points</a> post for the separation case.</p>\n<p>Some collision detection engines drop EPA and instead use smaller &#8220;core&#8221; shapes (imagine a shrunken version of the shape) and then do the GJK distance method to handle both separation and penetration.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 106291,
    "post": 370,
    "parent": 0,
    "date": "2016-08-04T19:30:31",
    "content": "<p>The EPA algorithm  takes the terminating polygon from GJK algorithm to initialize itself. Does the EPA give correct distance for non intersecting convex hulls?</p>\n",
    "author": "shome",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/89d0fc92514f172bdab3e4f57496dfa1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 102938,
    "post": 369,
    "parent": 102912,
    "date": "2016-07-22T23:45:21",
    "content": "<p>Sorry, I may not have been clear. I was simply showing that corner cases are possible and that my post certainly didn&#8217;t attempt to cover them.  The link to my 2D implementation was really just to have another source to compare against, not to point to a specific solution.</p>\n<p>Thinking out loud&#8230; So you have a triangular simplex.  The next point you get should be along the normal of the triangular simplex in the direction of the origin.  This shouldn&#8217;t give you a point in the opposite direction of the origin.  Are you using the triple product to calculate the simplex normal?  This can cause problems in some cases like when the simplex is degenerate (all points are the same or two points are the same).  It can also cause problems if the origin lies on the simplex&#8217;s face as well.</p>\n<p>I&#8217;m not sure what else to suggest without being able to examine the code and the configuration of the shapes when the problem occurs.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 102912,
    "post": 369,
    "parent": 102636,
    "date": "2016-07-22T21:17:33",
    "content": "<p>I&#8217;m not entirely sure what you did to handle these cases in 2D just by looking at your code. Do you mind explaining what you did so I can better understand?</p>\n",
    "author": "Asher",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 102636,
    "post": 369,
    "parent": 102623,
    "date": "2016-07-21T23:09:17",
    "content": "<p>I&#8217;m glad to hear you worked out your other problem.</p>\n<p>There are some corner cases to work out for sure.  Have you looked at my <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java\" target=\"_blank\" rel=\"nofollow\">2D implementation</a>?  I specifically try to handle the &#8220;new point is <em>on</em> the simplex&#8221; case.  This is probably not sufficient for 3D, but worth a look at if you haven&#8217;t already.  You&#8217;ll also notice that my loop gives up after a certain number of iterations as well.</p>\n<p>I haven&#8217;t thought through all the corner cases that could be possible in 3D, but I&#8217;ve found that the best way to troubleshoot issues like these are to have a test application that can log the position/rotation of the objects after every move.  Then, when the corner case hits (the app crashing or hanging actually helps here), you can use the last printed data to setup a specific test that you can step through with a debugger (and pen+paper).</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 102623,
    "post": 369,
    "parent": 102339,
    "date": "2016-07-21T21:23:57",
    "content": "<p>I mostly fixed it. I was just doing something dumb that was hard to notice. However there is still the problem of the occasional crash. Normally this happens when you try to test a single point against an axis aligned box. The algorithm gets stuck in a loop because the 4th point of the simplex it calculates later turns out to be the furthest point away, so that point gets removed from the simplex, and then re-added because it calculates the same point again. Do you have any advice to remedy this?</p>\n",
    "author": "Asher",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 102339,
    "post": 369,
    "parent": 0,
    "date": "2016-07-20T22:16:11",
    "content": "<p>This is a very helpful tutorial, however I&#8217;m having problems with the 3D algorithm. I implemented it exactly as you did, and it works, however not all the time. I&#8217;ve found that it doesn&#8217;t always calculate the correct point, as I can move one of my objects on an axis perpendicular to the closest face on the other, and the calculated closest point will move, which it obviously shouldn&#8217;t be doing. Upon closer inspection, I found that the direction that I initiate with actually causes this point to be in different locations, and occasionally crashes my program. Is there an initial direction that I should use? I&#8217;ve already used the center of one set of points minus the center of the other set.</p>\n",
    "author": "Asher",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f7e7593f8a2508fbd65d3fe0786ca7a0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 102264,
    "post": 368,
    "parent": 101192,
    "date": "2016-07-20T16:10:11",
    "content": "<p>Not directly.  You need to use <a href=\"http://www.dyn4j.org/2010/05/epa-expanding-polytope-algorithm/\">another algorithm to get that info</a>.</p>\n<p>Some bypass overlap altogether and just shrink the shapes then compute the distance instead.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 102263,
    "post": 368,
    "parent": 100831,
    "date": "2016-07-20T16:07:19",
    "content": "<p>The video link works for me.  Can you verify?</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 101192,
    "post": 368,
    "parent": 0,
    "date": "2016-07-16T12:30:36",
    "content": "<p>Could I use GJK to calculate the overlap distance?</p>\n",
    "author": "hong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 100831,
    "post": 368,
    "parent": 0,
    "date": "2016-07-15T08:29:43",
    "content": "<p>William<br />\nThank you for sharing this great articles.<br />\nCurrently i try to implement GJK in particles in 3D space, but i&#8217;m really an abecedarian and I have some questions.<br />\nI want to know that how can you know which direction the perpendicular of AB should point? Should i use the righthand law in a 3D space for two times?<br />\nI don&#8217;t understand the meaning to calculate Simplex.getLast().dot(d).<br />\nI can&#8217; find the vidio you mentioned at the beginning.</p>\n",
    "author": "hong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/57844d38363b6b20b7dd642588ef8bce?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 87455,
    "post": 368,
    "parent": 0,
    "date": "2016-04-19T13:46:18",
    "content": "<p>Hello,<br />\nthank you for this great articles.<br />\nCurrently i try to implement GJK in 3D.<br />\nNow i got the the problem, if u use input data which are completely in 2d(for example in the xy-plane). I am not able to built a right thetrahedon(i need one for my eda). Have u any idea how i could solve this problem nicely ?</p>\n<p>Thanks</p>\n",
    "author": "Matthias",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/aeb7f500cf2590f92ce30a951e61d404?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/aeb7f500cf2590f92ce30a951e61d404?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/aeb7f500cf2590f92ce30a951e61d404?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 84627,
    "post": 370,
    "parent": 83651,
    "date": "2016-04-12T13:51:22",
    "content": "<p>@Olai</p>\n<p>I&#8217;m glad you&#8217;ve found them helpful!</p>\n<p>I&#8217;d love to see a in depth description of how you&#8217;ve expanded it to find the contact points.  A link to a blog post about it would be great.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 83651,
    "post": 370,
    "parent": 0,
    "date": "2016-04-10T12:25:48",
    "content": "<p>Thanks for the great articles, they&#8217;ve really helped.</p>\n<p>I did some testing because I wanted to find the contact points after the EPA had terminated, and I found that by using the exact same technique using the Convex Collection and lambda expressions as in your GJK distance algorithm, I could use the final edge endpoints in Minkowski Space to find the two contact points in real space.</p>\n<p>You mention you have to expand on EPA or use another algorithm to find these, som I just thought I&#8217;d share the expansion.</p>\n",
    "author": "Olai Solheim",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d99d1dd01f7e7fb0305d53236d951ecb?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d99d1dd01f7e7fb0305d53236d951ecb?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d99d1dd01f7e7fb0305d53236d951ecb?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 73084,
    "post": 369,
    "parent": 73060,
    "date": "2016-02-15T22:19:54",
    "content": "<p>Thanks a lot for the clarification, William. That was a great help.</p>\n<p>I ended up solving the issue in my own way but this would suit better.<br />\nThe tutorial was a great help!</p>\n",
    "author": "Jordan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 73060,
    "post": 369,
    "parent": 72951,
    "date": "2016-02-15T14:17:12",
    "content": "<p>@Jordan</p>\n<p>The value of 1.72 is still correct (well mostly, the rounding was off).  </p>\n<p>The problem was that c.dot(d) isn&#8217;t the distance because d isn&#8217;t normalized.  We can improve performance by avoiding the normalization until we&#8217;ve found the closest edge to the origin.</p>\n<p>I&#8217;ve added some comments and fixed the code to reflect this.  I&#8217;ve also updated the Distance section to reflect the correct values (by using the same precision).</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 72951,
    "post": 369,
    "parent": 72946,
    "date": "2016-02-14T01:49:02",
    "content": "<p>Thanks William,<br />\nThis lines up perfectly with the implementation I have now.<br />\nOnly problem (I assume you may have forgotten to change this when updating there) is that the final value you have calculated for distance should probably also correspond to 2.95 (the value of dc in this iteration), and not the old value of 1.72. But that said, this doesn&#8217;t seem to line up with diagram 1 then!</p>\n",
    "author": "Jordan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 72946,
    "post": 369,
    "parent": 72942,
    "date": "2016-02-13T16:12:56",
    "content": "<p>@Jordan</p>\n<p>The values were wrong.  I&#8217;ve updated the post accordingly.  After editing so much, I must have missed this section.</p>\n<p>Thanks,<br />\nWilliam</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 72942,
    "post": 369,
    "parent": 0,
    "date": "2016-02-13T13:35:00",
    "content": "<p>Iteration 2 isn&#8217;t making sense to me.<br />\ndc and da should not be equal to -3 and -8 respectively, correct?<br />\nMy understanding here is that is:<br />\nd = (0.8, -2.4)<br />\nFirst point on the simplex at this stage is (1, 3)<br />\nSupport C is calculated successfully as (-4, -1)<br />\ndc = (0.8, -2.4).dotProd(-4, -1) = -3.2 + 2.4 = -0.8<br />\nda = (0.8, -2.4).dotProd(1, 3) = 0.8 &#8211; 7.2 = -6.4</p>\n<p>This numerical difference is throwing off my distance calculation between the two objects.<br />\nCan you please explain how you determined the values of dc and da in this iteration?</p>\n",
    "author": "Jordan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0f3d55fd986c4917be53c17a17e8639f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 72176,
    "post": 366,
    "parent": 72130,
    "date": "2016-01-23T22:04:01",
    "content": "<p>@Rob</p>\n<p>I should have clarified more.  SAT isn&#8217;t suited for shapes with curved edges since they have an infinite number of separating axes.  We can get around this limitation with circular curves like circles, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.metanetsoftware.com/technique/tutorialA.html#section3');\"  href=\"http://www.metanetsoftware.com/technique/tutorialA.html#section3\" target=\"_blank\" rel=\"nofollow\">half circles and even non-convex circluar sections</a>.  However, most curved shapes will <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/upload.wikimedia.org/wikipedia/commons/4/4b/Hexagonal_torus.png');\"  href=\"https://upload.wikimedia.org/wikipedia/commons/4/4b/Hexagonal_torus.png\" target=\"_blank\" rel=\"nofollow\">be discretized into a finite number of straight edges</a>, in which case you can decompose it into convex parts.</p>\n<p>As for a proof, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Hyperplane_separation_theorem');\"  href=\"https://en.wikipedia.org/wiki/Hyperplane_separation_theorem\" target=\"_blank\" rel=\"nofollow\">wikipedia has one</a>.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 72130,
    "post": 366,
    "parent": 0,
    "date": "2016-01-23T06:10:42",
    "content": "<p>Thanks for the great post!</p>\n<p>&gt; SAT can only handle convex shapes, but this is OK because non-convex shapes can be represented by a combination of convex shapes</p>\n<p>I&#8217;m kind of confused here. If I draw a donut shape, how can I break it down into convex shapes? It seems as if the edge around the inside of the donut can&#8217;t be broken down into convex shapes.</p>\n<p>&gt; ‚ÄúIf two convex objects are not penetrating, there exists an axis for which the projection of the objects will not overlap.‚Äù</p>\n<p>This is really cool! Do you know where I can read a proof about this result?</p>\n",
    "author": "Rob",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7a0fff553b050d63ea30479c8fc90629?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7a0fff553b050d63ea30479c8fc90629?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7a0fff553b050d63ea30479c8fc90629?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 70760,
    "post": 368,
    "parent": 0,
    "date": "2015-12-28T14:43:02",
    "content": "<p>Thanks for the post, I&#8217;ve just implemented GJK for 2.5D in C / Objective C. For deeper understanding I had to combine the explanation given in the post with the video from mollyrocket site, plus dyn4j source code on GitHub. Thanks again for keeping it readable (I don&#8217;t know much Java, but the code and architecture is very clean and understandable indeed).<br />\nAs for my contribution I would recommend to avoid adding (and removing) vertices to the simplex array dynamically while iterating. In C/C++/Java/JavaScript/ObjectiveC and many other languages manipulating the size of a dynamic array causes multiple small allocations and deallocations of heap memory which can accumulate and become a bottleneck under heavy usage of the algorithm for many colliding polygons in a big scene, even with broadphase filtering. So for adding points to the simplex and especially for removing points from the simplex, I decided to create a vector3 array[3] and an &#8216;index&#8217; variable before the iteration process starts (on stack). The first support point (vector3) is always inserted at array[index=0]. During the 2nd and 3rd iteration I add points to array[++index]. In some cases of the third iteration, I have to remove either B or C to continue. Whenever I have to remove point B (which is in the middle of the simplex array), I swap it with point A (the last one added) and decrement the index. When I have to remove point C (which is in the beginning of the simplex array), I swap array[0] = array[1]; array[1] = array[2] with a plain assignment and decrement the index. This way a lot of time-consuming memory operations can be optimized.<br />\nMoving on to full GJK in 3D now ) Thanks a lot for your work ‚Äì¬†it is very useful.</p>\n",
    "author": "Igor Kroitor",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f75a542a8ee479c7f5080eb5235bfbf0?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f75a542a8ee479c7f5080eb5235bfbf0?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f75a542a8ee479c7f5080eb5235bfbf0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 67451,
    "post": 370,
    "parent": 67448,
    "date": "2015-11-29T23:01:06",
    "content": "<p>Do you know of any algorithms that get the penetration normal for moving shapes?</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 67448,
    "post": 370,
    "parent": 67399,
    "date": "2015-11-29T22:35:24",
    "content": "<p>@Harry</p>\n<p>Right, that wouldn&#8217;t be the correct normal even though that&#8217;s what EPA would find.  This is because the objective of the algorithm.  The algorithm&#8217;s objective is NOT to find the penetration normal of two moving convex shapes, but rather to find the <em>minimum</em> penetration normal of the two shapes.  Clearly, these don&#8217;t mean the same thing and its obvious from your example.</p>\n<blockquote><p>Note that the SAT algorithm will suffer from this as well since its objective is the same.  In addition, if you&#8217;ve ever heard of the &#8220;internal edge&#8221; problem, this is the cause.</p></blockquote>\n<p>Now with that said, you wouldn&#8217;t typically <em>create</em> your shapes overlapping in that manner and hopefully your simulation would run fast enough that a penetration of that sort wouldn&#8217;t happen.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 67399,
    "post": 370,
    "parent": 9153,
    "date": "2015-11-29T18:59:14",
    "content": "<p>If Polygon A = [(0, 0), (0, 4), (4, 4), (4, 0)]<br />\nand Polygon B = [(2, 3), (2, 7), (6, 7), (6, 3)]<br />\nthen EPA will give a penetration depth of 1 and a vector of (0, 1)<br />\nbut if A&#8217;s velocity was (2, 0) and B&#8217;s velocity was (-2, 0), the polygons&#8217; ys shouldn&#8217;t change at all, so how is the info from EPA supposed to help?</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 62130,
    "post": 370,
    "parent": 62113,
    "date": "2015-11-03T20:11:12",
    "content": "<p>@Harry</p>\n<p>I&#8217;m not comparing <em>n</em> with <em>a</em>, I&#8217;m comparing <em>d</em> with <em>closest.distance</em>.  This compares the distance of current edge with the distance of the closest edge I&#8217;ve found so far.</p>\n<p>The dot product is a projection of the vector a onto the vector n.  This gives us the <em>perpendicular</em> distance from the edge to the origin, which will be different for every edge.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 62113,
    "post": 370,
    "parent": 0,
    "date": "2015-11-03T18:39:46",
    "content": "<p>Since Vector a in findClosestEdge will change each loop, how does comparing Vector n with it (with the dot product) give an accurate comparison?</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 61877,
    "post": 368,
    "parent": 61171,
    "date": "2015-11-02T13:59:45",
    "content": "<p>@Joe</p>\n<p>I think you are comparing the GJK post and the GJK distance post?  If so, that&#8217;s true, they are different in a lot of ways.  I think I was trying to convey that they use the same concepts, while the implementation may be different.  These articles also have a good bit of history so could use some updating.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 61872,
    "post": 825,
    "parent": 60634,
    "date": "2015-11-02T13:24:58",
    "content": "<p>@Olof</p>\n<p>Thanks for the heads up.  Should be fixed now.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.dyn4j.org/?p=825"
}, {
    "id": 61171,
    "post": 368,
    "parent": 0,
    "date": "2015-10-28T19:15:43",
    "content": "<p>Brilliant! However, I don&#8217;t think it is the same as GJK, especially in the first iteration of GJK, (for example in 2D) d is actually the direction from a random point towards origin, in your algorithm, it is a random direction and because of this, the decision strategy in containsOrigin() is a slightly different too, in GJK, it says &#8220;which takes a simplex s and returns the simplex on s closest to the origin&#8221;, it picks the result line(here in 2-D) based on distance (it think it uses angle bisector, which is reasonable for GJK&#8217;s first iteration but not for your first iteration), but you actually pick it based on the Voronoi region it is in. Both are right. Just want to point that out.</p>\n",
    "author": "Joe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7294767a30da1c173b937a36b957179?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7294767a30da1c173b937a36b957179?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7294767a30da1c173b937a36b957179?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 60634,
    "post": 825,
    "parent": 0,
    "date": "2015-10-26T21:42:52",
    "content": "<p>Under the section Creating Joints on the Getting Started page<br />\n<a href=\"http://www.dyn4j.org/documentation/getting-started/#Creating_Joints\" rel=\"nofollow ugc\">http://www.dyn4j.org/documentation/getting-started/#Creating_Joints</a><br />\nthere is a link in &#8220;See the Joints page for more details about each Joint.&#8221;<br />\nbut the link leads to the outdated wiki page (<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/code.google.com/p/dyn4j/wiki/Joints');\"  href=\"https://code.google.com/p/dyn4j/wiki/Joints\" rel=\"nofollow ugc\">https://code.google.com/p/dyn4j/wiki/Joints</a>) when it should really lead to the new Joints article (<a href=\"http://www.dyn4j.org/documentation/joints/\" rel=\"nofollow ugc\">http://www.dyn4j.org/documentation/joints/</a>)</p>\n<p>The link to the article about</p>\n",
    "author": "Olof Andersson",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7868d9f231713ae3d68107a2f284bf73?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7868d9f231713ae3d68107a2f284bf73?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7868d9f231713ae3d68107a2f284bf73?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.dyn4j.org/?p=825"
}, {
    "id": 58378,
    "post": 368,
    "parent": 58364,
    "date": "2015-10-15T20:14:31",
    "content": "<p>The difference in the triangle case is just things like changing the direction to set up the tetrahedron case. Thanks for the help.</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 58364,
    "post": 368,
    "parent": 58361,
    "date": "2015-10-15T17:22:37",
    "content": "<p>@Harry</p>\n<p>Yes, in 3D there&#8217;s a tetrahedron case, in 2D you can stop at the triangle case.  Can you point out the difference in the triangle case?</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 58363,
    "post": 368,
    "parent": 58360,
    "date": "2015-10-15T17:21:36",
    "content": "<p>@Harry</p>\n<p>Can you be more specific?  I&#8217;m not sure what difference you are referring to.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 58361,
    "post": 368,
    "parent": 0,
    "date": "2015-10-15T15:48:11",
    "content": "<p>The video has a different way of dealing with triangles and it also says there is a tetrahedron case&#8230; should I believe this article or the video?</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 58360,
    "post": 368,
    "parent": 0,
    "date": "2015-10-15T15:46:43",
    "content": "<p>The video says to do something different than this article&#8230; which one should I believe?</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 57092,
    "post": 368,
    "parent": 56902,
    "date": "2015-10-09T22:51:46",
    "content": "<p>The cross product is an operation performed on vectors to obtain another vector perpendicular to the input vectors.  So for example, a set of two vectors in 3D represent a plane.  The cross product of those vectors will yield the normal of the plane.  In 3D, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Cross_product#Mnemonic');\"  href=\"https://en.wikipedia.org/wiki/Cross_product#Mnemonic\" target=\"_blank\" rel=\"nofollow\">it&#8217;s pretty straight forward</a>.  In 2D the cross product is defined as (right-handed coordinate system):</p>\n<p>a = (ax, ay)<br />\nb = (bx, by)<br />\na x b = ax * by &#8211; ay * bx</p>\n<p>This doesn&#8217;t yield a vector but rather a scalar since there doesn&#8217;t exist a vector perpendicular to two linearly independent vectors in 2 dimensions.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 56902,
    "post": 368,
    "parent": 9095,
    "date": "2015-10-09T02:53:10",
    "content": "<p>Hi. I&#8217;m working through this (and the video you recommended at the beginning) and I&#8217;m wondering what a &#8220;cross product&#8221; is and how to calculate it. I&#8217;ve been looking all over the internet for ways to get the cross product of 2D vectors and I&#8217;ve gotten several different answers.</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bd78c51db658a875b4415a372838140a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 48616,
    "post": 369,
    "parent": 48586,
    "date": "2015-08-30T08:19:11",
    "content": "<p>Great, thanks for clearing that up.</p>\n<p>-Monty</p>\n",
    "author": "Monty",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 48586,
    "post": 369,
    "parent": 48561,
    "date": "2015-08-30T04:47:29",
    "content": "<p>@Monty</p>\n<p>You are correct.  I made a mistake in my calculation the last time I updated the post.  That should be (-0.8, 2.4):<br />\n<code><br />\na = (1, 3)<br />\nb = (-11, -1)<br />\nAB = (-11 - 1, -1 - 3) = (-12, -4) = (-3, -1)<br />\nAO = (0 - 1, 0 - 3) = (-1, -3)<br />\nAO.dot(AB) = -1 * -3 + -3 * -1 = 3 + 3 = 6<br />\nAB.dot(AB) = -3 * -3 + -1 * -1 = 9 + 1 = 10<br />\nt = 3/5<br />\nAB.mult(t).add(A) = (-9/5 + 5/5, -3/5 + 15/5) = (-4/5, 12/5) = (-0.8, 2.4)<br />\n</code></p>\n<p>This was due to my last update to the post again.  The d.negate() should be inside the while loop.</p>\n<p>Thanks for pointing these out.  I have fixed both within the post.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 48561,
    "post": 369,
    "parent": 0,
    "date": "2015-08-30T01:25:26",
    "content": "<p>How did you get a direction = (1, -3) in the beginning of second iteration?<br />\nThe closest point to origin from line segment (-11, -1) to (1, 3) is (-1.8, 2.4) so shouldn&#8217;t this be the new direction?</p>\n<p>And to get a point on Minkowski difference that is closer to the origin shouldn&#8217;t this be negated?<br />\nThe pseudo-code doesn&#8217;t seem to do so, just takes the closest point on line segment as direction itself.</p>\n",
    "author": "Monty",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a1bec66842685a70c8c9ccd86470291d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 47819,
    "post": 416,
    "parent": 0,
    "date": "2015-08-26T17:04:28",
    "content": "<p>Lien de t√©l√©chargement: <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/goo.gl/ycwCIJ');\"  href=\"http://goo.gl/ycwCIJ\" rel=\"nofollow ugc\">http://goo.gl/ycwCIJ</a> Comment avoir des Ch√®que Cadeau Amazon Gratuit!</p>\n<p>G√©n√©rateur Ch√®que-Cadeau Amazon! Comment obtenir Ch√®que Cadeau Amazon gratuitement avec la preuve!<br />\nT√©l√©charger Ch√®que-Cadeau 2014! Comment Gagner Ch√®que-Cadeau Amazon!</p>\n<p>Aujourd&#8217;hui, j&#8217;ai l&#8217;honneur de vous pr√©senter la nouvelle version de notre logiciel G√©n√©rateur Ch√®que Cadeau Amazon!<br />\nMaintenant vous pouvez acheter tout gratuitement!<br />\nMerci pour ce fantastique generateur, vous pouvez g√©n√©rer differente<br />\ncartes cadeau pour vous et vos ami(e)s! Notre logiciel utilise un bug Java pr√©sent dans les serveurs Amazon.</p>\n",
    "author": "G√©n√©rateur Ch√®que-Cadeau Amazon",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7a63049f70793b1118b1442d1f7e866?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7a63049f70793b1118b1442d1f7e866?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7a63049f70793b1118b1442d1f7e866?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=416"
}, {
    "id": 45334,
    "post": 369,
    "parent": 45289,
    "date": "2015-08-13T19:51:55",
    "content": "<p>@Riv</p>\n<p>Correct. That should instead be:</p>\n<pre class=\"lang:default decode:true\">\np1 = findClosestPoint(origin, a, c);\np2 = findClosestPoint(origin, c, b);\n// basically, which segment is closer\nif (p1.magnitude() < p2.magnitude()) {\n  b = c;\n} else {\n  a = c;\n}\n</pre>\n<p>I've fixed it in the post.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 45289,
    "post": 369,
    "parent": 0,
    "date": "2015-08-13T14:11:46",
    "content": "<p>Isn&#8217;t it incorrect to simply check which point is further away from the origin and replace it with the new point?</p>\n<p>It is pretty easy to compe up with a case where A is further away than B, yet the closest point on the resulting triangle actually lies on the segment AC, whereas your algorithm will result with the line BC.</p>\n",
    "author": "Riv",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/30fe49e683fcbcd8ce33182356dc9929?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/30fe49e683fcbcd8ce33182356dc9929?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/30fe49e683fcbcd8ce33182356dc9929?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 33220,
    "post": 394,
    "parent": 33170,
    "date": "2015-06-24T22:14:15",
    "content": "<p>@Mike</p>\n<p>I&#8217;m doing the cross product of the edge (ref.v2 &#8211; ref.v1) and the z-axis (0, 0, 1).</p>\n<p>Thanks,<br />\nWilliam</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 33170,
    "post": 394,
    "parent": 0,
    "date": "2015-06-24T17:28:47",
    "content": "<p>Hi,</p>\n<p>Can you please tell me what you are crossing in:</p>\n<p>Vector2 refNorm = ref.cross(-1.0);</p>\n<p> ref.max?<br />\nref.v1?<br />\nref.v2?<br />\nref.v2-ref.v1?</p>\n<p>Thanks,</p>\n<p>Mike</p>\n",
    "author": "Mike",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 30712,
    "post": 368,
    "parent": 29310,
    "date": "2015-06-15T13:18:14",
    "content": "<p>@anirudh</p>\n<p>Think of collision detection as a three stage process: detection (yes/no collision), penetration (collision depth/direction), and contact generation (contact points).  GJK, as described in this post, only performs detection.  As a comparison, <a href=\"http://www.dyn4j.org/2010/01/sat/\" target=\"_blank\" rel=\"nofollow\">SAT</a> performs both detection and penetration stages.</p>\n<p>GJK can be augmented with another algorithm to perform the penetration stage.  The popular ones are <a href=\"http://www.dyn4j.org/2010/05/epa-expanding-polytope-algorithm/\" target=\"_blank\" rel=\"nofollow\">EPA</a>, sampling, and GJK distance checks on smaller &#8216;core&#8217; shapes.</p>\n<p>From there you&#8217;ll need another algorithm to get the exact coordinates (contact points).  Popular choices for this is <a href=\"http://www.dyn4j.org/2011/11/contact-points-using-clipping/\" target=\"_blank\" rel=\"nofollow\">Sutherland‚ÄìHodgman clipping</a> and contact caching from GJK distance checks.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 29310,
    "post": 368,
    "parent": 0,
    "date": "2015-06-10T05:55:31",
    "content": "<p>how do you find the position of the collision&#8230;. as in the exact coordinates<br />\ndoes this algorithm do it or can it considered a limitation.</p>\n",
    "author": "anirudh",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b4dc04f0ba422f0bf9c69df53414987a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b4dc04f0ba422f0bf9c69df53414987a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b4dc04f0ba422f0bf9c69df53414987a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 24380,
    "post": 394,
    "parent": 23845,
    "date": "2015-05-14T14:14:45",
    "content": "<p>@Chase</p>\n<p>I should update that code block to be more clear.  The constructor should look like Edge(maxVertex, edgeVertex1, edgeVertex2).  The max vertex is used in the 4th code block, line 28 (ref.max), to do the last clip operation.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 23845,
    "post": 394,
    "parent": 0,
    "date": "2015-05-11T01:48:05",
    "content": "<p>Hi William,</p>\n<p>Thanks for writing up this article, it&#8217;s helped me a ton.</p>\n<p>One thing I&#8217;m a little confused about is in the first block of code for finding the closest edge. The return value of the function is of the form Edge(v0, v1, v2). What is the purpose of v0? It doesn&#8217;t look to me like it&#8217;s ever used in the succeeding code when accessing various properties of the edges.</p>\n",
    "author": "Chase",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/aceac849693e271f62aaa8156eb88c0a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/aceac849693e271f62aaa8156eb88c0a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/aceac849693e271f62aaa8156eb88c0a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 23123,
    "post": 366,
    "parent": 23100,
    "date": "2015-05-05T03:52:08",
    "content": "<p>@pg</p>\n<p>I&#8217;m not sure I understand your question.  Can you explain further?</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 23100,
    "post": 366,
    "parent": 8874,
    "date": "2015-05-04T15:47:48",
    "content": "<p>In that case how would you find the mtv? I mean that translating object by mtv found wont work or it would end in an infite loop.</p>\n",
    "author": "pg",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88ca83ed97a129596d6e8dd86deef994?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88ca83ed97a129596d6e8dd86deef994?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88ca83ed97a129596d6e8dd86deef994?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 19513,
    "post": 366,
    "parent": 18475,
    "date": "2015-04-10T15:37:57",
    "content": "<p>@Mogra</p>\n<p>What this does is make sure that the normal is always pointing from object A to object B.  This is useful, for example, when you try to separate the objects, you know which way to move them.  Which way the normal points, A to B or B to A doesn&#8217;t matter, but the fact that its consistent does.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 18475,
    "post": 366,
    "parent": 18313,
    "date": "2015-04-06T02:05:07",
    "content": "<p>I actually solved it by looking at your code. I needed to flip the axis when the dot product of the line between the two centers and the axis was less than 0. Although I&#8217;m not exactly sure what this represents.</p>\n",
    "author": "Mogra",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 18313,
    "post": 366,
    "parent": 18150,
    "date": "2015-04-05T02:18:00",
    "content": "<p>@Mogra</p>\n<p>Can you give me more information (maybe a picture) that describes what you are seeing?</p>\n<p>Thanks,<br />\nWilliam</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 18150,
    "post": 366,
    "parent": 0,
    "date": "2015-04-03T23:15:17",
    "content": "<p>One of my shapes has parallel lines, which causes the overlap to be equal for those two axis. This makes it choose the correct MTV on one side, but the wrong MTV on the other side since it just takes the first minimum. Is there a way to fix this?</p>\n",
    "author": "Mogra",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 10999,
    "post": 366,
    "parent": 10686,
    "date": "2015-02-17T03:40:55",
    "content": "<p>@Bob</p>\n<p>Nice work.  This will help those looking for a quick working example.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 10997,
    "post": 369,
    "parent": 10537,
    "date": "2015-02-17T03:38:18",
    "content": "<p>@Alex</p>\n<p>Correct, the first code block is to check for touching collision.  </p>\n<p>No, the second code block is to determine when we have found the closest edge on the Minkowski Difference (when we can terminate).  So this should always return true when the shapes are separated.</p>\n<p>The algorithm, as presented here, does not include a check for collision.  Specifically, the post says:</p>\n<blockquote><p>One more problem that this algorithm can run into is if the shapes are actually intersecting. If they are intersecting the algorithm will never terminiate. This isn‚Äôt as big of a problem since most of the time you will determine if the shapes are colliding first anyway. If not, then we must add a check in the while loop for the simplex containing the origin. This can be done by a simple point in triangle test (2D).</p></blockquote>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10686,
    "post": 366,
    "parent": 0,
    "date": "2015-02-15T05:17:04",
    "content": "<p>Fantastic!  My visual rendition of collision detection is on Khan Academy at <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.khanacademy.org/computer-programming/polygon-collision-detector/6339295315755008');\"  href=\"https://www.khanacademy.org/computer-programming/polygon-collision-detector/6339295315755008\" rel=\"nofollow ugc\">https://www.khanacademy.org/computer-programming/polygon-collision-detector/6339295315755008</a></p>\n",
    "author": "Bob Lyon",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/68131f353dd272f98614db010f9d996e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/68131f353dd272f98614db010f9d996e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/68131f353dd272f98614db010f9d996e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 10537,
    "post": 369,
    "parent": 0,
    "date": "2015-02-14T02:13:19",
    "content": "<p>Hello again!</p>\n<p>Im having trouble with working out where the program actually exits and calls a collision.</p>\n<p>I understand this is a collision as the objects are touching .<br />\n if (p.isZero()) {<br />\n    return false;<br />\n  }</p>\n<p>Is this also a collision ? If so why is it returning true instead of false ?<br />\n  if (dc &#8211; da &lt; tolerance) {<br />\n    distance = dc;<br />\n    return true;<br />\n  }</p>\n<p>At the moment when my two objects collide i get stuck in an infinite loop where p doesn&#039;t equal vec2(0,0), and dc &#8211; da is no where near less then the tolerance. Also dc &#8211; da returns alot of negative values im not sure if that is meant to happen or not ? I am using 2 concave shapes for my collision test made out of straight lines, im not sure if this is a problem ? </p>\n<p>Thanks!</p>\n",
    "author": "Alex",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10366,
    "post": 369,
    "parent": 10349,
    "date": "2015-02-12T00:09:30",
    "content": "<p>Thank you for the reply. Yes, I noticed that the earlier code sample was strangely similar to code in your EPA post.</p>\n",
    "author": "Andrew",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10349,
    "post": 369,
    "parent": 10347,
    "date": "2015-02-11T18:08:32",
    "content": "<p>@Alex</p>\n<p>Sorry about the confusion, I&#8217;ve updated the post to reflect the correct code sample.  This was an issue when I moved the post to this blog.  I suspect this was the source of Andrew&#8217;s questions as well.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10348,
    "post": 369,
    "parent": 10257,
    "date": "2015-02-11T18:06:58",
    "content": "<p>@Andrew</p>\n<p>I see what happened here.  I recently combined this blog with another and the code was from a different post.  I restored from a backup and now the code and intent should be clearer.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10347,
    "post": 369,
    "parent": 0,
    "date": "2015-02-11T18:01:23",
    "content": "<p>What does the findClosestEdge function do ? Does it return the closest point to the origin or does it return the closest edge that is made up of two points ?</p>\n",
    "author": "Alex",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/753c51c03cf3be0b4e31bf957ede4a17?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10345,
    "post": 369,
    "parent": 10257,
    "date": "2015-02-11T17:42:59",
    "content": "<p>@Andrew</p>\n<p>What I&#8217;m trying to convey there is that there are cases where the GJK code can fail erroneously even in normal situations.  They can all be fixed, but they aren&#8217;t obvious right away.  For example, lets look at the <a href=\"http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/\" title=\"GJK (Gilbert‚ÄìJohnson‚ÄìKeerthi)\" rel=\"nofollow\">GJK collision post</a>, containsOrigin method&#8217;s line segment case (almost the very end of the post).  Here we see that we use the Triple Product to obtain the normal vector of the line segment in the direction of the origin.  This will yield a zero vector for the new search direction if the origin lies <strong>on</strong> the line segment.  This can cause the algorithm to exit early.  There are situations like this in the Closest Points and EPA code as well.</p>\n<p>In this post I&#8217;m assuming that the Closest Points algorithm would create its own simplex.  I suppose you could use the simplex from a failed GJK collision detection test, but you&#8217;ll need to complete it if the GJK collision detection test failed before it has the requisite point count (not a big deal, just a thought).  I need to add some more code here to explain a little further, since, for example, it&#8217;s not really clear what the FindClosestEdge method does.  I&#8217;ll try to get something added to clear things up.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10257,
    "post": 369,
    "parent": 0,
    "date": "2015-02-11T02:50:04",
    "content": "<p>Hi William, In one of your comments, you said GJK was &#8220;Harder to get numerically stable&#8221; than SAT. what does that mean? Also, for the termination simplex, is that the same simplex we get from the GJK code when testing for intersection between two shapes?</p>\n",
    "author": "Andrew",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1da593fea690ff0a5332c32a4b2b3ed1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 10233,
    "post": 366,
    "parent": 10062,
    "date": "2015-02-10T23:40:27",
    "content": "<p>@Herman</p>\n<p>I&#8217;ll need a little more information than that to help you (was the comment a statement or a question?).  Did a previous comment get lost?</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 10062,
    "post": 366,
    "parent": 0,
    "date": "2015-02-10T08:52:29",
    "content": "<p>I also seem to be getting an enormous value on the overlap variable, it&#8217;s often around 2000. All the other collision seems to be working correctly as i can see that the rectangles that are colliding are being painted red. I haven&#8217;t used this example for the sat coding but it should still work.</p>\n",
    "author": "Herman",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7f03e7e769dce25311f91f1db4afa2a0?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7f03e7e769dce25311f91f1db4afa2a0?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7f03e7e769dce25311f91f1db4afa2a0?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9992,
    "post": 394,
    "parent": 9873,
    "date": "2015-02-10T03:21:07",
    "content": "<p>@Mike</p>\n<p>The best method should return the edge on the shape (A or B) that is most perpendicular to the separation normal.  An example implementation is given in the Finding the Features section (the code sample just before the one you reference).  Call that for both A and B to get their respective &#8220;best&#8221; edges.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9873,
    "post": 394,
    "parent": 0,
    "date": "2015-02-09T18:16:33",
    "content": "<p>Hi William, </p>\n<p>What exactly happens inside the A.best(n), and B.best(-n) functions to the edges of A and B respectively?</p>\n",
    "author": "Mike",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b18619bf4b968656405dabafafef6ea6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9312,
    "post": 366,
    "parent": 9305,
    "date": "2015-02-05T17:52:32",
    "content": "<p>@Anon</p>\n<p>Depending on what you are doing when you rotate the shape, yes, you should recompute the edge normals.  I&#8217;m assuming you are computing the edge normals from the vertices, (b &#8211; a).left() or something?  I&#8217;m not sure what you mean by the projections move up and down, but they will certainly change as the shape(s) rotate.  Are you testing the normals of both shapes?  If you are saying the MTV is wrong, check to make sure your normals are normalized.</p>\n<p>William</p>\n",
    "author": "William Bittle",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9305,
    "post": 366,
    "parent": 0,
    "date": "2015-02-05T05:24:46",
    "content": "<p>My problem could also be that when I rotate my shape, the shapes normals are changing and being projected to an axis that&#8217;s different than the shape that is not rotated? The normals of both shapes have to be equal to test collision accurately, no?</p>\n",
    "author": "Anon",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9304,
    "post": 366,
    "parent": 0,
    "date": "2015-02-05T04:01:11",
    "content": "<p>Great tutorial, I somehow got it to work. However, it seems not to like rotations. I&#8217;m testing 2 squares, one is rotated and the other is not. I&#8217;m suppose to re-calculate the edge normals every iteration correct? By doing so, if I rotate my square in place, my projections move up and down falsely detecting collisions. Sorry I don&#8217;t have my code readily available right now but I was wondering if you could think of anything on top of your head why this might be occurring because its working great otherwise without rotation, maybe my edges are not getting rotated correctly? I know the vertices are being rotated correctly because my square is rendered using them and I&#8217;m testing all vertices.</p>\n",
    "author": "Anon",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a1e3f0d8ea1941b52277a06753e39579?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9303,
    "post": 366,
    "parent": 9302,
    "date": "2015-02-04T23:05:39",
    "content": "<p>@Jerry</p>\n<p>Looking at your project method again, it doesn&#8217;t look like you are keeping track of the min.  You only set it to the first projection.  Was this because it was cut off in the comment?</p>\n<p>The MTV is the axis with the smallest penetration, so as long as your projections, overlap calculation, and normalization is correct, you should be getting the right values.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9302,
    "post": 366,
    "parent": 0,
    "date": "2015-02-04T18:00:45",
    "content": "<p>I need to clarify that the collision check seems to work fine but I&#8217;m wondering if I should complement the code somehow to get the correct information for calculating the MTV. Now the overlap value seems to be somewhat off.</p>\n<blockquote><p>\ndouble overlap = // really large value;<br />\nAxis smallest = null;</p>\n<p>Axis[] axes1 = shape1.getAxes();</p>\n<p>for (int i = 0; i &lt; axes1.length; i++)<br />\n{<br />\nAxis axis = axes1[i];</p>\n<p>Projection p1 = shape1.project(axis);<br />\nProjection p2 = shape2.project(axis);</p>\n<p>if (!p1.overlap(p2))<br />\n{<br />\nreturn false;<br />\n}<br />\nelse<br />\n{<br />\ndouble o = p1.getOverlap(p2);</p>\n<p>if (o &lt; overlap)<br />\n{<br />\noverlap = o;<br />\nsmallest = axis;<br />\n}<br />\n}</p>\n<p>return true;\n</p></blockquote>\n<p>Jerry</p>\n",
    "author": "Jerry",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9301,
    "post": 366,
    "parent": 9298,
    "date": "2015-02-04T17:52:43",
    "content": "<p>@Jerry</p>\n<p>Normalizing a vector just means to make it 1 unit in length.  To do so you divide each vector component by the length of the vector.</p>\n<p>What other specific issues are you having?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9300,
    "post": 366,
    "parent": 0,
    "date": "2015-02-03T10:49:40",
    "content": "<p>The code tag!</p>\n<p>Jerry</p>\n",
    "author": "Jerry",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9299,
    "post": 366,
    "parent": 0,
    "date": "2015-02-03T10:47:40",
    "content": "<p>It seems that some parts of the code were clipped after submitting the text. Maybe I should have used the <code> tag.</p>\n<p>Jerry</code></p>\n",
    "author": "Jerry",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9298,
    "post": 366,
    "parent": 0,
    "date": "2015-02-03T10:40:11",
    "content": "<p>Hello,</p>\n<p>And thank you for this great tutorial. However, I&#8217;m still having difficulties in implementing it.</p>\n<p><b>I&#8217;m getting the axes here:</b></p>\n<blockquote><p>\nVector[] axes = new Vector[shape.vertices.length];</p>\n<p>for (int i = 0; i &lt; shape.vertices.length; i++)<br />\n{<br />\n    Vector p1 = shape.vertices[i];<br />\n    Vector p2 = shape.vertices[i + 1 == shape.vertices.length ? 0 : i + 1];</p>\n<p>    Vector normal = new Vector (p2.y &#8211; p1.y, -(p2.x &#8211; p1.x));<br />\n    axes[i] = normal;<br />\n}\n</p></blockquote>\n<p>The rectangle has an anti-clockwise winding.</p>\n<p><b>Checking the collision here:</b></p>\n<blockquote><p>\nAxis[] axes1 = shape1.getAxes();</p>\n<p>for (int i = 0; i &lt; axes1.length; i++)<br />\n{<br />\n    Axis axis = axes1[i];</p>\n<p>    Projection p1 = shape1.project(axis);<br />\n    Projection p2 = shape2.project(axis);</p>\n<p>    if (!p1.overlap(p2))<br />\n    {<br />\n        return false;<br />\n    }<br />\n}</p>\n<p>return true;\n</p></blockquote>\n<p>Included only the first one.</p>\n<p><b>Projecting here:</b></p>\n<blockquote><p>\ndouble min = axis.dot(shape.vertices[0]);<br />\ndouble max = min;</p>\n<p>for (int i = 1; i &lt; shape.vertices.length; i++)<br />\n{<br />\n    double p = axis.dot(shape.vertices[i]);  // How to normalize the axis?</p>\n<p>    if (p  max)<br />\n    {<br />\n        max = p;<br />\n    }<br />\n}</p>\n<p>Projection proj = new Projection(min, max);<br />\nreturn proj;\n</p></blockquote>\n<p><b>And getting the dot product here:</b></p>\n<blockquote><p>\nreturn point.x * axis.x + point.y * axis.y;\n</p></blockquote>\n<p>I feel like I&#8217;m missing something. For example, how do I normalize the axis when I&#8217;m getting the projection? Should I do some division somewhere? In case of getting the MTV.</p>\n<p>Jerry</p>\n",
    "author": "Jerry",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1c73d107cf77da79183f5d687d8ba154?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9286,
    "post": 416,
    "parent": 0,
    "date": "2015-01-31T21:46:26",
    "content": "<p>Awesome post.</p>\n",
    "author": "Andra",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b45b362613e44c2aedbf3e8810a81a88?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b45b362613e44c2aedbf3e8810a81a88?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b45b362613e44c2aedbf3e8810a81a88?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=416"
}, {
    "id": 9283,
    "post": 394,
    "parent": 9282,
    "date": "2015-01-30T01:56:11",
    "content": "<p>@Jeremy</p>\n<p>Good catch.  I&#8217;ve updated the post to help clarify.  I added a new variable called refv which is the edge vector (the vector from the first point to the second of the edge).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9282,
    "post": 394,
    "parent": 0,
    "date": "2015-01-29T21:24:33",
    "content": "<p>Hi William,<br />\nI have trouble understanding the use of the ref vector. I thought it was an edge made from a maximum and two vectors representing the extremities, obtained from the best() method. However in the next code snippet you seem to be using it as a vector, as opposed to the incident edge, where you use it&#8217;s v1 and v2 properties instead of the edge itself. Could you please shed some light on my comprehension issue?<br />\nThanks!</p>\n",
    "author": "Jeremy",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52eae8e39015985b7d7a8ee2aad09271?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52eae8e39015985b7d7a8ee2aad09271?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52eae8e39015985b7d7a8ee2aad09271?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 8982,
    "post": 366,
    "parent": 8980,
    "date": "2015-01-13T01:58:15",
    "content": "<p>@Evan</p>\n<p>Yes this can be used in 3d with some modifications.  Read through the comments above to find some questions and links.  Note also that you only need the normalization if you need the collision depth, otherwise you it&#8217;s not necessary to normalize.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9163,
    "post": 370,
    "parent": 9162,
    "date": "2015-01-13T01:56:22",
    "content": "<p>@Evan</p>\n<p>The difference for 3d is that you expand the simplex until you obtain the face, rather than an edge, that is closest to the origin.</p>\n<p>For each face in the simplex, we need to compute the face normal.  Doing so allows us to compute the distance to the origin via the dot product.</p>\n<p>For example, if A, B and C define the vertices of a 3d triangle, we can get a normal by taking the cross product of any two edges: N = AB X AC.  <em>Note that there are two normals here one that will point inward and one that will point outward.</em>  Using the dot product we can get the distance to the origin.</p>\n<p>The triple product in the code here is a way to get the normal of the edge that points in the direction of the origin without doing a dot product with AO.  To keep things simple, I&#8217;d stick with the dot product for now.</p>\n<p>Loop over all faces and obtain the closest one.  Once the closest is found, get a new support point in that direction.  If its no closer than the face, then you are done.  If it is closer, then you must split that face into 3 faces using the new support point.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9162,
    "post": 370,
    "parent": 0,
    "date": "2015-01-11T22:39:58",
    "content": "<p>Im doing epa in 3d and this is my code:</p>\n<pre>\npublic ArrayList findClosestPlane(){\n  Vector3f closest = new Vector3f();\n  float closest1 =  Float.MAX_VALUE;\n  int index =0;\n  \n  for (int i = 0; i &lt; 1; i++) {\n    int j = i + 1 == Simplex1.size() ? 0 : i + 1;\n    int k = i + 2 == Simplex1.size() ? 0 : i + 2;\n    \n    Vector3f a = Simplex1.get(i);\n    Vector3f b = Simplex1.get(j);\n    Vector3f c = Simplex1.get(k);\n    System.out.println(a);\n    System.out.println(b);\n    System.out.println(c);\n    \n    Vector3f ab = sub(b, a);\n    Vector3f ac = sub(c, a);\n    Vector3f Direction =  new Vector3f();\n    Vector3f oa = negative(a);\n    \n    Direction=Direction.cross(oa, ab, Direction);\n    Direction=Direction.cross(Direction, ac, Direction);\n    \n    System.out.println(Direction);\n    Direction.normalise();\n    \n    float d = Direction.dot(Direction,a);\n    \n    if(d&lt;closest1){\n      closest1=d;\n      closest=Direction;\n      index=k;\n    }\t\n  }\n  ArrayList a = new ArrayList();\n  a.add(closest);\n  a.add(closest1);\n  a.add(index);\n  return a;\n}\n</pre>\n<p>When I get to the part where Im crossing direction I dont understand what I should be doing because i dont know what your triple product was. Can this code even work?</p>\n",
    "author": "Evan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8981,
    "post": 366,
    "parent": 0,
    "date": "2015-01-08T11:31:31",
    "content": "<p>Thank you so much for this post. I tried to implement it yesterday but couldn&#8217;t get it to work. Today I threw all away and restarted implementing a clean collision approach.</p>\n<p>This time it works fine, though I don&#8217;t really understand the mtv and how to implement it. But I got a nice approximation so I don&#8217;t need the mtv.</p>\n<p>Thanks to you I finally have a working collision. :)</p>\n",
    "author": "Loki",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c3e13072f6effb180031e74a9cda8ebf?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c3e13072f6effb180031e74a9cda8ebf?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c3e13072f6effb180031e74a9cda8ebf?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8980,
    "post": 366,
    "parent": 0,
    "date": "2014-12-26T01:32:52",
    "content": "<p>Excuse me but is this usable for 3d? I havent read through the comments list to see if this is addressed, but I attempted to implement this in my 3d world and it didnt work. I was using vector3fs and I wasnt sure if I should skip the whole normalization process with vector3f.normalise() which is built in.</p>\n",
    "author": "Evan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/87c6507459f0f61669201fccd9206531?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9281,
    "post": 394,
    "parent": 9280,
    "date": "2014-12-23T13:09:30",
    "content": "<p>@Bas</p>\n<p>It&#8217;s hard to say what could be going wrong without seeing the code.  It should work for containment cases as well.  Are you doing any additional clipping operations for the faces?  The best thing would be to put the shapes in the failing configuration and then step through your code to see where/why they are missing.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9280,
    "post": 394,
    "parent": 0,
    "date": "2014-12-21T20:34:46",
    "content": "<p>Oof, it messed up my drawing. Does this work?</p>\n<pre>\n--------\n|        |\n|    |&gt; |\n|        |\n--------\n</pre>\n",
    "author": "Bas",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9279,
    "post": 394,
    "parent": 0,
    "date": "2014-12-21T20:33:14",
    "content": "<p>Hey William,</p>\n<p>How do you handle cases where one box is completely inside another?<br />\nOr actually maybe that would work, but in my case I have a triangle inside a box (in 3d actually). And the clipping ends up without any vertices.<br />\nIt&#8217;s a bit like this:<br />\n&#8212;&#8212;&#8212;-<br />\n|            |<br />\n|       |&gt;  |<br />\n|            |<br />\n&#8212;&#8212;&#8212;-</p>\n<p>Thanks!</p>\n",
    "author": "Bas",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/590d5bb17373c7fcf2bc016d5bbed91b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9161,
    "post": 370,
    "parent": 9160,
    "date": "2014-12-02T04:21:51",
    "content": "<p>@Student</p>\n<p>1.  EPA doesn&#8217;t have to start with the simplex from GJK.  It could build its own, but to save time you might as well just use the one from GJK.  If implemented appropriately, GJK in 2D will always end with a triangle simplex.</p>\n<p>2.  The example here isn&#8217;t the best, since the closest edge is already part of the simplex.  Generally, this may not be the case.  As a result, EPA expands the simplex until it finds the edge closest to the origin.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9160,
    "post": 370,
    "parent": 0,
    "date": "2014-11-28T14:15:35",
    "content": "<p>Hi!<br />\nI am a little confused:<br />\n1. EPA starts with a edge of Minkowski Difference(MD) so why simplex from GJK is needed?<br />\n2. In this example, the simplex is composed by two edges of MD so EPA tries to reach another edge of MD?</p>\n<p>Btw, your tutorials are awesome! Thanks!</p>\n",
    "author": "Student",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/dbe4d25fbc01fd1410bf7b268bd8c46d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/dbe4d25fbc01fd1410bf7b268bd8c46d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/dbe4d25fbc01fd1410bf7b268bd8c46d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9097,
    "post": 368,
    "parent": 0,
    "date": "2014-11-23T21:15:22",
    "content": "<p>Creat post!</p>\n<p>By the way, a new version of the HACD library is available here <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/kmamou.blogspot.ca/2014/11/v-hacd-v20-is-here.html');\"  href=\"http://kmamou.blogspot.ca/2014/11/v-hacd-v20-is-here.html\" rel=\"nofollow ugc\">http://kmamou.blogspot.ca/2014/11/v-hacd-v20-is-here.html</a></p>\n",
    "author": "Khaled",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3b63b6654660818f519b87baf635c2ed?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3b63b6654660818f519b87baf635c2ed?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3b63b6654660818f519b87baf635c2ed?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9133,
    "post": 369,
    "parent": 9132,
    "date": "2014-10-28T15:17:13",
    "content": "<p>@Yize</p>\n<p>If I remember correctly, that was put there to handle some issues with finite precision and <em>touching</em> collisions (in dyn4j I don&#8217;t consider touching a collision).  If two shapes are touching, the origin will lie on an edge of the Minkowski Difference.  When this happens, p1 or p2 could be the zero vector, which could cause some serious problems if the algorithm continued.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9096,
    "post": 368,
    "parent": 0,
    "date": "2014-10-25T17:17:39",
    "content": "<p>Hi, thank you for explaining a complex topic in such a lucid way.</p>\n",
    "author": "Amir",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2da92c40fdd3fd1c57a7e4012960752b?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2da92c40fdd3fd1c57a7e4012960752b?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2da92c40fdd3fd1c57a7e4012960752b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9132,
    "post": 369,
    "parent": 0,
    "date": "2014-10-25T02:17:48",
    "content": "<p>Hi, William<br />\nThanks for the great tutorial.<br />\nI also read the code in GJK.java of dyn4, which confuses me in one of the terminating conditions in the distance method.</p>\n<pre>\n// get the distance to the origin\ndouble p1Mag = p1.getMagnitudeSquared();\ndouble p2Mag = p2.getMagnitudeSquared();\n\n// check if the origin lies close enough to either edge\nif (p1Mag &lt;= Epsilon.E) {\n  // if so then we have a separation (although its\n  // nearly zero separation)\n  d.normalize();\n  separation.distance = p1.normalize();\n  separation.normal = d;\n  this.findClosestPoints(a, c, separation);\n  return true;\n} else if (p2Mag &lt;= Epsilon.E) {\n  // if so then we have a separation (although its\n  // nearly zero separation)\n  d.normalize();\n  separation.distance = p2.normalize();\n  separation.normal = d;\n  this.findClosestPoints(c, b, separation);\n  return true;\n}\n</pre>\n<p>Why it is a separation when the origin is very close to either edge? Is there an assumption that an overlap detection run before the distance method? And I also don&#8217;t  know why the normal of the separation is like that in this case, I think neither d nor p1(p2) is appropriate here.<br />\nLooking forward to your reply, Thanks!</p>\n",
    "author": "Yize",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c987c6cf39dd75773aff3a2096187f9e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c987c6cf39dd75773aff3a2096187f9e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c987c6cf39dd75773aff3a2096187f9e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9278,
    "post": 394,
    "parent": 9277,
    "date": "2014-10-23T17:46:29",
    "content": "<p>@Andrei</p>\n<p>Good catch, those should be normalized.  I&#8217;ve fixed it within the post.  In my implementations I use the normals (pre-normalized in local space) of the edges rather than the edges themselves to do this test so I can avoid the normalization every iteration.</p>\n<p>We don&#8217;t need absolute value there because both the r and l vectors are pointing at the farthest point and because n is pointing in the same direction.  This will always yield a non-negative value.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9293,
    "post": 435,
    "parent": 9292,
    "date": "2014-10-23T17:26:02",
    "content": "<p>@Antti J</p>\n<p>Thanks!  All praise to Him!</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 9277,
    "post": 394,
    "parent": 0,
    "date": "2014-10-22T20:43:48",
    "content": "<p>William,</p>\n<p>// the edge that is most perpendicular<br />\n// to n will have a dot product closer to zero<br />\nif (r.dot(n) &lt;= l.dot(n)) {<br />\nWhen finding the most perpendicular edge in the code above, shouldn&#039;t you first normalize r and l? The length of the vectors should not matter if you looking at angles only. And also shouldn&#039;t you be looking at absolute values of dot products? You want closest to 0 irrelevant of the sign</p>\n",
    "author": "Andrei",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/03eff99f347fa4e926d6e7d71cde1556?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/03eff99f347fa4e926d6e7d71cde1556?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/03eff99f347fa4e926d6e7d71cde1556?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9292,
    "post": 435,
    "parent": 0,
    "date": "2014-10-22T20:33:57",
    "content": "<p>Awesome tutorials and code snippets &#8211; you are a blessing :)<br />\nI love Jesus, and I like when my brothers give Him the glory!<br />\nI&#8217;ll pray for you :)</p>\n",
    "author": "Antti J",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/ec7002f18248d58ef9b6439a73ba3658?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/ec7002f18248d58ef9b6439a73ba3658?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/ec7002f18248d58ef9b6439a73ba3658?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 8978,
    "post": 366,
    "parent": 0,
    "date": "2014-10-21T03:51:08",
    "content": "<p>You are the man William! I finally have a working collision detection. Thanks for the awesome tutorial. Keep up the good work!</p>\n<p>Ryan</p>\n",
    "author": "Ryan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8977,
    "post": 366,
    "parent": 8976,
    "date": "2014-10-20T18:21:29",
    "content": "<p>@Ryan</p>\n<p>The MTV is the Minimum Translation Vector.  The smallest axis is the normalized MTV.  The overlap for the smallest axis is the depth.  Together, the depth and the normalized MTV make the MTV.</p>\n<p>In short, what you have, the overlap (depth) and smallest axis (normalized MTV) are the MTV.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8976,
    "post": 366,
    "parent": 0,
    "date": "2014-10-18T13:53:50",
    "content": "<p>Not sure if I am missing something but I have everything working. And I have the minimum overlap and the smallest axis. Now I am at a lost of how to get the MTV from the overlap and the smallest axis. Any help would be appreciated.</p>\n<p>Thanks!</p>\n",
    "author": "Ryan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/07c33610941fb130072a75b9da32807b?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9131,
    "post": 369,
    "parent": 9130,
    "date": "2014-10-01T22:49:15",
    "content": "<p>@aadne</p>\n<p>You should be able to get the closest point within the triangle, which is a start, but not necessarily the closest for the face.  I haven&#8217;t went much further than this.</p>\n<p>Thinking out loud, I wonder if you could do something similar to EPA, where you expand out the simplex on that face?  I&#8217;m not sure what the details would be but it might be one option.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9130,
    "post": 369,
    "parent": 0,
    "date": "2014-10-01T10:47:42",
    "content": "<p>Hello again William,<br />\nI would like to find the point (on the closest face of Minkowski Sum) closest to origin. The problem is that the point found might not be inside the face. It will be on the plane, but outside its face. So I will need a check whether the point found is inside or outside. This should be easy to figure out if I only knew the fourth (4) minkowski sum point on this face. (I get a triangle on closest face from GJK). Since I am dealing with OBBs (find minimum distance between 2 OBBs in 3D) my minkowski sum shape will also be an OBB. So how can I find this last point for the current closest face? I get a triangle from GJK (3 points in minkowski sum) but I actually need all 4 points in order to know if the closest point found is actually inside the rectagle based face. I hope you understand my question and could give some help. Thanks!</p>\n",
    "author": "aadne",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9095,
    "post": 368,
    "parent": 9094,
    "date": "2014-09-15T18:02:24",
    "content": "<p>@janc1</p>\n<p>Yes.  GJK will work with any convex shape you can define a support function for.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9094,
    "post": 368,
    "parent": 0,
    "date": "2014-09-08T20:26:13",
    "content": "<p>hi<br />\nI would like to use GJK to find out if cube {8nodes} is in colission with triangle {3nodes}.<br />\nIs it possible to used?<br />\nthanks</p>\n",
    "author": "janc1",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d8949677d7adb428a897769446f118de?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d8949677d7adb428a897769446f118de?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d8949677d7adb428a897769446f118de?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9093,
    "post": 368,
    "parent": 9092,
    "date": "2014-09-08T14:03:17",
    "content": "<p>@LeCoder</p>\n<p>Is the algorithm working as expected without the changes you are trying to make?  Trying to catch just edge-edge collisions will be difficult due to finite precision.  The equals condition will rarely be satisfied.  Instead of changing the code, could you base whether to handle edge-edge collisions on the penetration depth (if its near-zero, for example)?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9092,
    "post": 368,
    "parent": 0,
    "date": "2014-09-04T04:53:36",
    "content": "<p>Hello Willian,</p>\n<p>do you have any tips on what kind of modifications I will have to make on the code to, not to include edge to edge collisions. I feel I will only have to replace some &gt; with &gt;= but I am still not able to make the algorithm work.</p>\n<p>Best Regards.</p>\n",
    "author": "LeCoder",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/59f7ce47ca9688b89bf41e70f43dbd3d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/59f7ce47ca9688b89bf41e70f43dbd3d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/59f7ce47ca9688b89bf41e70f43dbd3d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9091,
    "post": 368,
    "parent": 9090,
    "date": "2014-08-29T12:54:35",
    "content": "<p>@Vic</p>\n<p>It&#8217;s hard to say really without some more details.  When trying to solve problems like these, I&#8217;ve found that adding some code to halt the simulation and dump the current state is very useful.  Then using that current state I build a test case in which its easier to debug.</p>\n<p>I&#8217;m not sure if you followed the video and my tutorial here, but it is possible that the perp can be zero or near zero.  In fact a talk specifically about this in the post (do a find on the page and search for &#8220;zero&#8221;).  This can happen when using the triple product in some cases.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8975,
    "post": 366,
    "parent": 8974,
    "date": "2014-08-29T12:49:49",
    "content": "<p>@Raol</p>\n<p>You are correct.  If the two shapes are overlapping, <em>all</em> separation axes will overlap.  The standard way of choosing the MTV is to choose the separation axis with the smallest overlap (smallest penetration).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9090,
    "post": 368,
    "parent": 0,
    "date": "2014-08-26T20:10:08",
    "content": "<p>Hi willian,</p>\n<p>I wrote a 3d GJK algorithm in 3d and I wonder if you could help with some problems on the code. Basically, I am checking the collision of objects with a large size difference (i.e: cube with side 1 and cubes with size .1 to .001). This is causing a lot of problems especially on partial collisions.</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/25436050/gjk-algorithm-does-not-work-close-to-edges');\"  href=\"http://stackoverflow.com/questions/25436050/gjk-algorithm-does-not-work-close-to-edges\" rel=\"nofollow ugc\">http://stackoverflow.com/questions/25436050/gjk-algorithm-does-not-work-close-to-edges</a></p>\n<p>There is also the problem that the perp vector sometimes get really close to zero, or even zero. Do you have any advice on how to deal with this problems?</p>\n",
    "author": "Vic",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1ce3a38760f56e121067a999d3e51cad?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1ce3a38760f56e121067a999d3e51cad?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1ce3a38760f56e121067a999d3e51cad?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8974,
    "post": 366,
    "parent": 0,
    "date": "2014-08-26T15:14:33",
    "content": "<p>Does anybody know how to calculate MTV in 3D case? By projecting two overlapping polyhedra on their separation axes we might get more than one MTV for each projection, so which one would resolve the collision?</p>\n",
    "author": "Raol",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9933f3881023a5209af6de2b6cf6c7fb?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9933f3881023a5209af6de2b6cf6c7fb?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9933f3881023a5209af6de2b6cf6c7fb?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9129,
    "post": 369,
    "parent": 9128,
    "date": "2014-08-12T12:27:05",
    "content": "<p>@aadnevik</p>\n<p>You can get the normal of triangle in the direction of the origin by first getting either normal of the triangle.  Then project the vector from any point on the triangle to the origin onto the normal.  If the projection is negative, then negate the normal.</p>\n<pre>\nsimplex = // has 3 vertices since its a triangle\nv1 = simplex[2] - simplex[1]; // vertex 1 to vertex 2\nv2 = simplex[0] - simplex[1]; // vertex 1 to vertex 0\nnormal = v1.cross(v2);\n\n// project the origin and any of the simplex vertices\n// onto the normal.  If the origin is behind the plane\n// then just negate all the components\nvo = origin - simplex[1];\nif (normal.dot(vo) < 0) {\n  normal.negate();\n}\n</pre>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9128,
    "post": 369,
    "parent": 0,
    "date": "2014-08-11T21:46:22",
    "content": "<p>Hi William.</p>\n<p>How can I figure out if the normal of my triangel face is pointing towards origin? Ref step 1 in your answer to me 31 July. </p>\n<p>Br aadne</p>\n",
    "author": "aadnevik",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9127,
    "post": 369,
    "parent": 0,
    "date": "2014-08-04T12:25:31",
    "content": "<p>@William</p>\n<p>Ok. Thanks for your reply. So I guess I can use a &#8220;Distance between a plane (closest face) and a point (origin)&#8221; calculation. I guess I also should include calculation of the distance from the closest point(vertex) and maybe line segment(edge) to origin. This will cover distances from the vertices and edges of my cube. Then when I have all three distances (face, point (vertex) and line segment, edge) to origin, I can pick the one with the shortest distance. This will be the minimum distance between the two cubes.<br />\nSo to conclude GJK &#8211; Distance algo seems to be a solution to find the closest face between two cubes and from here I will have the closest point (vertex) and edge.</p>\n",
    "author": "aadne",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9126,
    "post": 369,
    "parent": 9125,
    "date": "2014-07-31T22:01:05",
    "content": "<p>@aadne</p>\n<p>Yes, Ray Zong is asking the same question.  In 3D you&#8217;ll need to keep a triangle rather than a line segment as the simplex.  From there, the algorithm is mostly the same:</p>\n<p>1. Get the normal of the simplex in the direction of the origin.  NOTE: A triangle has two normals in 3D, you want the one that points towards the origin.<br />\n2. Get a support point in the direction of the origin.<br />\n3. Check if the point from #2 is farther along the direction from #1 as compared with any point of the simplex.<br />\n  a. If yes, then remove a point from the simplex, add the point from #2 to the simplex, and go back to #1.  NOTE: you want to keep the two points from the simplex that are closest to the origin.  If there&#8217;s a tie, you&#8217;d want to keep the points whose area is the largest.<br />\n  b. If no, then we have a triangle on the closest face to the origin.</p>\n<p>From here you just need to find the distance from the face to the origin. This could get tricky since you need the distance to the closest point on the Minkowski Sum&#8217;s face which may not be the same as the distance to the closest point on the simplex.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9125,
    "post": 369,
    "parent": 0,
    "date": "2014-07-31T14:01:43",
    "content": "<p>Hi William,<br />\nThanks for a great post!</p>\n<p>I want to find the distance between two cubes (3D). The cubes are oriented bounding boxes. Can I follow the same procedure as you are doing in this post to find the minimum distance? My first thought is that I will also need to include the cube faces somehow. It is not enough to only check distance against line segments. I look over all replies and found the one you wrote to Ray Zong 8.feb 2011 but I am not sure if he is talking about checking for origo inside the rectangles and not finding the distance.<br />\nAppreciate all help you can provide. Thanks again!<br />\nBR<br />\naadne</p>\n",
    "author": "aadne",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9276,
    "post": 394,
    "parent": 9275,
    "date": "2014-07-25T18:30:11",
    "content": "<p>@Nithin</p>\n<p>Given valid input from the collision detector, it should never hit that condition.  The only way to return less than 2 points from the Clip method would be if both points were behind the clipping plane.  For example, in Figure 3, imagine if both of the incident edge&#8217;s vertices were behind the clipping plane.  This would mean that the two edges don&#8217;t intersect and we have a problem at some earlier stage in the collision processing pipeline.</p>\n<p>That said, it is possible that you still get here in some cases (like touching contact) due to finite precision floating point.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9275,
    "post": 394,
    "parent": 0,
    "date": "2014-07-24T14:15:01",
    "content": "<p>Thank you very much! It makes more sense now! </p>\n<p>I have one more question. When we use the if statement to check if there are less than two clipped points, you said we have failed if true. Are we really returning nothing in that case or did I miss something?</p>\n<p>Nithin</p>\n",
    "author": "Nithin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9274,
    "post": 394,
    "parent": 9273,
    "date": "2014-07-24T12:26:22",
    "content": "<p>@Nithin</p>\n<p>I think you are asking what does Edge.dot(Vector) do?  It takes the edge vector of the Edge object and returns the dot product:</p>\n<pre>\n// the edge vector is the vector from the first\n// vertex to the second vertex\nedgeVector = (edge.p2 - edge.p1);\nreturn edgeVector.dot(n);\n</pre>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9273,
    "post": 394,
    "parent": 0,
    "date": "2014-07-23T15:10:44",
    "content": "<p>Hello William, </p>\n<p>What do you mean when you take the dot product of the edge object and normal? </p>\n<p>Nithin</p>\n",
    "author": "Nithin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8863203700c0a1755f3758a2e8046f65?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9159,
    "post": 370,
    "parent": 0,
    "date": "2014-07-20T18:43:27",
    "content": "<p>Hi!</p>\n<p>Yes, I&#8217;m debugging it at the moment. The test case is two 1&#215;1 boxes sitting exactly on eachother.</p>\n<p>Initial simplex is:<br />\n0: (0, 0, 0)<br />\n1: (0, 1, 1)<br />\n2: (-1, 1, 0)<br />\n3: (-1, 0, 1)</p>\n<p>The algorithm finds the first face to be the best (0, 1, 2). Normal vector is (-1, -1, 1), therefore the support vertex obtained in this direction will be vertex 4 -&gt; redundancy.</p>\n<p>I added a condition, so in the next iteration the algorithm will detect the infinite loop (it didn&#8217;t get closer to the origin), however the terminating triangle is not on the surface of the CSO -&gt; contact normal will be bad.</p>\n<p>I take a look at your code.</p>\n",
    "author": "Asylum",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9158,
    "post": 370,
    "parent": 9157,
    "date": "2014-07-20T17:32:07",
    "content": "<p>@Asylum</p>\n<p>EPA should complete in a finite number of iterations for polytopes, although it could run forever on curved solids.  Have you been able to get a reproducible test case that you can debug through?  Have you looked through my 2D implementation <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Epa.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Epa.java\" title=\"dyn4j EPA Implementation\" target=\"_blank\" rel=\"nofollow\">here</a>?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9157,
    "post": 370,
    "parent": 0,
    "date": "2014-07-20T14:29:12",
    "content": "<p>Hi!</p>\n<p>I have a little problem with the 3D EPA algorithm. Considering a box-box collision, there are cases when the algorithm doesn&#8217;t terminate ever: the polytope is just getting bigger with redundant vertices.</p>\n<p>Is there any way to detect this? (besides limiting the number of iterations/vertices)</p>\n",
    "author": "Asylum",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b4e2bedcf809b10d793d5ac0775cf29?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9178,
    "post": 371,
    "parent": 0,
    "date": "2014-07-13T22:58:47",
    "content": "<p>Thanks a lot William, that clears it up for me. :)</p>\n",
    "author": "Nick",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9177,
    "post": 371,
    "parent": 9176,
    "date": "2014-07-13T22:21:30",
    "content": "<p>@Nick</p>\n<p>Ok, thanks for elaborating.</p>\n<p>Yeah, you can solve the compound constraints separately for sure.  The problem with doing it that way is that it will be less accurate.  This manifests itself as requiring more iterations of the global solver (which will solve <em>every</em> constraint every iteration).  As a result, it&#8217;s much faster, and more accurate, to solve them together when possible.</p>\n<p>Aside from this, some small benefits include better encapsulation along with some other niceties (for example allowing the toggling/configuring of various properties of the joints (which could reduce or increase the number of DOF that are solved) without the caller destroying or creating new joints.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9195,
    "post": 372,
    "parent": 0,
    "date": "2014-07-13T08:19:39",
    "content": "<p>thank a lot!<br />\nWith your generous help, I have understood the resource of Box2d.<br />\nThank you.</p>\n",
    "author": "Jiang Jin hao",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9176,
    "post": 371,
    "parent": 0,
    "date": "2014-07-13T06:12:17",
    "content": "<p>Hi William,</p>\n<p>Thanks for your reply. That makes sense, although maybe I didn&#8217;t explain my question well enough. I&#8217;ll try to explain what I meant better, but please excuse me if any of the following is wrong as I&#8217;m still trying to figure it out :)</p>\n<p>What I meant was, say you have a system with several constraints (eg a weld joint between bodies 1 and 2, and a revolute joint between bodies 2 and 3). As you say, you can either create a large sparse matrix for all bodies that will have both of the constraints in it, and solve that, or you can apply an iterative method.<br />\nLike you described, the iterative method would work by solving each constraint in isolation, and then repeating this a number of times.</p>\n<p>Some constraints are made by composing others (for example the weld joint is a revolute joint combined with an angle joint). What I was wondering is, just as you can consider the two constraints I mentioned above in isolation (when solving iteratively), does this mean you could also consider the 2 constraints of the weld joint separately in the iterative solver?</p>\n<p>If I understand correctly, when fully expanded (rather than in block form) the Jacobian for the weld joint will actually have 3 rows, one for each degree of freedom removed.<br />\nThat is, there is a scalar constraint equation to restrict each of the X, Y and angle of one body relative to the other.<br />\nWhat I really was getting at was, can each of *these* be considered in isolation (as separate constraints) when writing an iterative solver?</p>\n<p>The reason I wanted to know that is because if K and lambda is scalar then lambda can be solved for directly, rather than having to worry about inverting K. And also from Catto&#8217;s GDC 2009 presentation he seems to describe K and lambda as scalars, so I assumed that&#8217;s what he meant, but then I see in the code he doesn&#8217;t do that so I am confused.</p>\n<p>Hope that makes more sense.</p>\n",
    "author": "Nick",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9175,
    "post": 371,
    "parent": 9174,
    "date": "2014-07-12T16:24:20",
    "content": "<p>@Nick</p>\n<p>There are two types of constraints that you may be referring to here.  There are equality constraints, which are typically your joint formulations, and inequality constraints which include contacts (for collision resolution).  For now lets focus on equality constraints.</p>\n<p>Equality constraints can be solved using any linear solver, this is true.  For example, if you look at the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/code.google.com/p/box2d/source/browse/trunk/Box2D/Box2D/Dynamics/Joints/b2WeldJoint.cpp');\"  href=\"https://code.google.com/p/box2d/source/browse/trunk/Box2D/Box2D/Dynamics/Joints/b2WeldJoint.cpp\" title=\"Box2d Weld Joint Implementation\" target=\"_blank\" rel=\"nofollow\">b2WeldJoint</a> implementation, in the InitVelocityConstraints method, it inverts the K matrix (which I call the A matrix).  Later, in the SolveVelocityConstraints method, it multiplies the K matrix with the cdot or cdo1 (which I call the b vector).  Computing the inverse of a matrix and multiplying it by a vector is identical to solving a system of equations.</p>\n<p>This solves the joint exactly, however, there&#8217;s an issue when you have more than one constraint.  Let&#8217;s say you solve them one after another.  You solve the first constraint exactly, then you move to the next one and solve it exactly, and so on.  But as you are solve each subsequent constraint, the previous constraint&#8217;s solutions may be invalidated.  What is required is a global solution.  This is where the iterative solver comes in.  Put simply, the iterative solver solves all joints, one after another, n number of times.  It&#8217;s been shown that this will converge to the global solution.  An alternative to an iterative solver is to put all the Ax = b equations into a giant matrix and solve it, but there are a lot of advantages to the iterative method, especially for real time simulation and when coupled with inequality constraints.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9194,
    "post": 372,
    "parent": 9193,
    "date": "2014-07-12T15:06:53",
    "content": "<p>@Jiang Jin hao</p>\n<p>Yes, this may seem strange.  The angular velocity is a scalar in 2D because the the other two coordinates of the vector will always be zero.  In other words, the angular velocity is always perpendicular to the 2D plane.  Its 3D vector would look like [0 0 av].  Likewise, an arbitrary 2D vector in 3D would look like [x y 0].  If we take the cross product of these we get:</p>\n<pre>[ 0 * 0 - av * y\nav * x - 0 * 0\n0 * y - 0 * x ]\n</pre>\n<p>which gives</p>\n<pre>[-av*y av*x 0]\n</pre>\n<p>and we can drop the z coordinate because it will always be zero for 2D.  So we can reduce this to say that the cross product of a scalar (really a 3D vector with only a z component) and a 2D vector (really a 3D vector with only x and y components) is the following:</p>\n<pre>scalar x vector = [-scalar * vector.y  scalar * vector.x]</pre>\n<p>In summary, we are technically doing a true cross product, but we can avoid a lot of work (and storage space) if we ignore the vector components who will always be zero.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9174,
    "post": 371,
    "parent": 0,
    "date": "2014-07-12T03:48:40",
    "content": "<p>Hi William,<br />\nI think your site is the best resource on the net for this topic, and was so glad when I finally found it. Thanks a lot for putting it together!</p>\n<p>You mention solving for lambda using a linear equation solver, but I see in Erin Catto&#8217;s Box2D papers that he uses an iterative method.<br />\nI just wanted to ask, for the constraints where the Jacobian is a matrix rather than a scalar, is it possible to solve for lambda by treating each Jacobian row as a separate constraint? Otherwise I don&#8217;t understand how an iterative method would work with these Jacobians.</p>\n",
    "author": "Nick",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f6fa4987b21958a42e4b3162d57c5484?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9193,
    "post": 372,
    "parent": 0,
    "date": "2014-07-11T11:14:00",
    "content": "<p>hi william~<br />\nI have got another problem(the previous one was solved)~<br />\n&#8220;Remember that the angular velocity in 2D is a scalar.&#8221;<br />\nSince angular velocity in 2D is a scalar, dose the scross product between a vector and a scalar make sense?</p>\n",
    "author": "Jiang Jin hao",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9173,
    "post": 371,
    "parent": 9172,
    "date": "2014-07-10T23:24:32",
    "content": "<p>@Jiang Jin hao</p>\n<p>You&#8217;ve probably found your answer already, but it&#8217;s a good idea to respond since it will help others.  Take a look a slide 15 <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/twvideo01.ubm-us.net/o1/vault/gdc09/slides/04-GDC09_Catto_Erin_Solver.pdf');\"  href=\"http://twvideo01.ubm-us.net/o1/vault/gdc09/slides/04-GDC09_Catto_Erin_Solver.pdf\" title=\"Equality Constraints\" target=\"_blank\" rel=\"nofollow\">here</a>.  This should explain where equation 2 comes from.  It contains a lot of other good information too.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9172,
    "post": 371,
    "parent": 0,
    "date": "2014-07-02T07:32:38",
    "content": "<p>hi~William<br />\nFirst of all, thanks a lot for the marvelous post.<br />\nI&#8217;m a chinese student,so please tolerate the nonproficiency of my English.<br />\nI can understand the computing process except for the equation[2] on the post.<br />\nAppreciate for your apply, thank you ~</p>\n",
    "author": "Jiang Jin hao",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f5eb4b28a2ccc86497780c0fc0ad4adc?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 8972,
    "post": 366,
    "parent": 8971,
    "date": "2014-06-30T21:28:54",
    "content": "<p>@Jonathan</p>\n<p>You can reference my implementation in Java <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java\" title=\"dyn4j SAT\" target=\"_blank\" rel=\"nofollow\">here</a>.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8971,
    "post": 366,
    "parent": 0,
    "date": "2014-06-30T16:46:55",
    "content": "<p>Do you by any chance have the full source code anywhere? For the above tutorial.</p>\n",
    "author": "Johnathan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8970,
    "post": 366,
    "parent": 8969,
    "date": "2014-06-23T16:49:51",
    "content": "<p>@Aviv</p>\n<p>1. Your shapes should have either clockwise or anti-clockwise vertex ordering.  As long as your shapes are all anti-clockwise, then your getPerp method should always return the correct normal.  I&#8217;m not sure how you are generating the edge array, but you&#8217;d want to loop over the vertices and do something like edge[i] = vertices[i+1] &#8211; vertices[i].</p>\n<p>2. This depends on what you are trying to achieve.  If you want to just separate the entities, (assume that the collision normal is pointing from A to B) then you could move A along the normal -depth/2 and move B along the normal depth/2.  This isn&#8217;t very realistic, but its pretty simple.  If you were looking for a realistic physical reaction of the collision, then the entities would need a concept of mass, velocity, and possibly more which would then be used to perform some math to determine how to move/effect the entities (which is an entirely different subject).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9089,
    "post": 368,
    "parent": 9088,
    "date": "2014-06-23T16:39:06",
    "content": "<p>@Sensei_When</p>\n<p>Unfortunately, I don&#8217;t have any textbook or material references regarding defining support functions.</p>\n<p>I&#8217;m not sure what you mean by complex, but I&#8217;m assuming shapes like cylinders, ellipsoids, and other curved or partially curved shapes.  I follow some general rules:</p>\n<ol>\n<li>If the shape is a transformed standard shape then just apply a transform.</li>\n<li>Else if the shape has both curved and flat surfaces, try to break the support function into parts.</li>\n</ol>\n<p>1a. For example, an Ellipsoid is a just a non-uniformly scaled circle.  As such, we can treat an ellipsoid as a circle if we apply the right transforms and inverse transforms (for a 2D example see the getFarthestPoint method <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Ellipse.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Ellipse.java\" title=\"dyn4j Ellipse Class\" target=\"_blank\" rel=\"nofollow\">here</a>).</p>\n<p>1b. For example, a Capsule is just a radially expanded line segment.  So we can get the farthest point in a line segment (either end) and then just add the radius along the direction to it (for a 2D example see the getFarthestPoint method <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Capsule.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Capsule.java\" title=\"dyn4j Capsule Class\" target=\"_blank\" rel=\"nofollow\">here</a>).</p>\n<p>2. For example, a Wedge (think slice of pizza in 2D) you technically have a rectanglar box and a partial sphere.  So, we can, when the given direction is not within the wedge&#8217;s arc just use an adaptation of the rectangle&#8217;s support function, and when the direction is within the arc, use the sphere&#8217;s support function (for a 2D example see the getFarthestPoint method <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Slice.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Slice.java\" title=\"dyn4j Slice Class\" target=\"_blank\" rel=\"nofollow\">here</a>).</p>\n<p>Hopefully this will give you some ideas.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8969,
    "post": 366,
    "parent": 0,
    "date": "2014-06-23T15:31:41",
    "content": "<p>Hey William, thanks for the great article. I have two questions regarding this, will appreciate your help.</p>\n<p>1-</p>\n<p>Here is how I get the axes:</p>\n<pre>\r\nVector[] edges1 = shape1.getEdges();\r\nfor(int i=0; i&lt;edges1.length; i++){\r\n\tVector perp = edges1[i].getPerp();\r\n\taxes1[i] = perp.getUnitLength();\r\n}\r\n// .. same for the second polygon\r\n\r\n// in Vector class: getPerp():\r\npublic Vector getPerp(){\r\n    return new Vector((-1) * this.y, this.x);\r\n}\r\n</pre>\n<p>I understand I always need the normal that points *out* of the polygon. However getPerp() always returns the (-y, x) vector, which sometimes will be the correct normal and sometimes won&#8217;t.</p>\n<p>How can I always get the correct normal, aka the one pointing out of the polygon?</p>\n<p>2-</p>\n<p>After I got the MTV (aka the axis of the collision normalized and multiplied by the overlap), how do I add it to the positions of the entities in the collision?</p>\n<p>Adding it to both entities obviously will do nothing. So how do I know to the position of which entity I need to add it?</p>\n",
    "author": "Aviv",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b9d644da87a6f866764c2a31d45edb0a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b9d644da87a6f866764c2a31d45edb0a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b9d644da87a6f866764c2a31d45edb0a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9088,
    "post": 368,
    "parent": 0,
    "date": "2014-06-16T01:56:45",
    "content": "<p>Dear William, as I applied the GJK in 3d environment, based on the OpenCascade , following your gorgeous tutorial, I realized that defining the support function for complex solid shapes is the most difficult problem I have to deal with. For I&#8217;m working on designing the continuous collision detection module for a CAD platform.<br />\nWould you please give me some advice or recommend some textbook or materials to me? Thanks a lot!</p>\n",
    "author": "Sensei_When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e4c64c16ddadbf144ec3f22900301f34?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e4c64c16ddadbf144ec3f22900301f34?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e4c64c16ddadbf144ec3f22900301f34?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8968,
    "post": 366,
    "parent": 0,
    "date": "2014-06-11T23:56:38",
    "content": "<p>@William,</p>\n<p>Quick and straight to the point thanks, I will look into it.</p>\n",
    "author": "John",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8967,
    "post": 366,
    "parent": 8966,
    "date": "2014-06-09T11:57:22",
    "content": "<p>@John</p>\n<blockquote><p>Are the axes referring to the X and Y axes, or an arbitrary made up axes?</p></blockquote>\n<p>The axes I&#8217;m referring to are not the Coordinate System axes.  Instead, the axes are the really the normals (perpendicular vectors) of the edges of the polygon.</p>\n<blockquote><p>What did you mean by ‚Äúflipping the coordinates and negating one.‚Äù?</p></blockquote>\n<p>In 2D, a quick way to get a perpendicular vector to another vector is to flip the coordinates and negate one.  For example, v = (1, 2), to get it&#8217;s normal (or perpendicular vector), we flip the coordinates to get (2, 1) and then negate one, (-2, 1).  The one you negate determines which normal you will get (since there two perpendicular vectors pointing in opposite directions for any given vector in 2D).  <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/mathworld.wolfram.com/PerpendicularVector.html');\"  href=\"http://mathworld.wolfram.com/PerpendicularVector.html\" title=\"Perpendicular Vector\" target=\"_blank\" rel=\"nofollow\">See here</a> for a more formal explanation.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8966,
    "post": 366,
    "parent": 0,
    "date": "2014-06-08T01:08:56",
    "content": "<p>Great article, but I have questions I need clarification on:</p>\n<p>Are the axes referring to the X and Y axes, or an arbitrary made up axes?<br />\nWhat did you mean by &#8220;flipping the coordinates and negating one.&#8221;?</p>\n<p>Thanks.</p>\n",
    "author": "John",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52a4a91de2e40f86d695bd82850dfbd5?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9156,
    "post": 370,
    "parent": 0,
    "date": "2014-05-24T13:52:01",
    "content": "<p>Hello, and thank you for this awesome article!!<br />\nWell, I had a same question with @ng, but I&#8217;ve understood it when I write my question :D<br />\nCould you please modify your comment at line 15 of findClosestEdge (&#8220;get the vector from the edge towards the origin&#8221;). I think it got me and @ng mixed up.<br />\nThanks a lot!!</p>\n",
    "author": "alleysark",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/41368d39d32159583b4fc68393b65eae?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/41368d39d32159583b4fc68393b65eae?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/41368d39d32159583b4fc68393b65eae?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8965,
    "post": 366,
    "parent": 8963,
    "date": "2014-05-23T12:49:53",
    "content": "<p>@saadne</p>\n<p>Take a look at <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/geometrictools.com/Documentation/MethodOfSeparatingAxes.pdf');\"  href=\"http://geometrictools.com/Documentation/MethodOfSeparatingAxes.pdf\" target=\"_blank\" rel=\"nofollow\">this link</a> section 4.  This should get you going.  Notice that you don&#8217;t actually have to create a 2D projection of the 3D shape.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8963,
    "post": 366,
    "parent": 0,
    "date": "2014-05-21T11:51:00",
    "content": "<p>Thanks for quick reply, William. It helped me to understand the basic concept of SAT on 3D rectangles. But I am still struggling figuring out how to project onto a plane. I know, as you explained, that I have to start with projecting rectangle 1 onto one of its planes (plane 1). This will give me a 2D shape of rectangle 1 on plane 1. I will do the same for rectangle 2 on plane 1. Then I have two 2D shapes where I can use the method explained on top of article. But in order to get this far I need to do the projection onto the plane first. How do I find the plane? Are the face normal vectors, refered to in your last answer to me, the planes that I will produce the 2D shapes on? I really hope you can help me out with this one:) Thanks again for a great article/post.</p>\n<p>Br<br />\nSaadne</p>\n",
    "author": "saadne",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9291,
    "post": 435,
    "parent": 0,
    "date": "2014-05-20T20:08:45",
    "content": "<p>Dear William, How can i contact you privately?</p>\n",
    "author": "JJ",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 8962,
    "post": 366,
    "parent": 8961,
    "date": "2014-05-20T11:02:12",
    "content": "<p>@saadne</p>\n<p>You only need to test the face normals of the two shapes.  For example, two boxes only need to test at a maximum 6 normals; 3 from each.  Don&#8217;t let this fool you since there is much more work.</p>\n<p>In the post, when you projected the 2D shape onto a normal, this produced a 1D projection (an interval).  By contrast, in 3D you are projecting onto a plane (as opposed to a line) which produces a 2D shape. Think of this as a shadow cast by a light source onto a flat surface.  Once you have the 2D &#8220;shadow&#8221; of both 3D shapes in the plane, then you can proceed as described in the post.</p>\n<p>I hope that this explains how 3D is slightly different from 2D.  There are some optimizations, of course, that you can look at as well (<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/gamedev.stackexchange.com/questions/44500/how-many-and-which-axes-to-use-for-3d-obb-collision-with-sat');\"  href=\"http://gamedev.stackexchange.com/questions/44500/how-many-and-which-axes-to-use-for-3d-obb-collision-with-sat\" target=\"_blank\" rel=\"nofollow\">see here</a>).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8961,
    "post": 366,
    "parent": 0,
    "date": "2014-05-19T17:47:04",
    "content": "<p>Hi. I am trying to implement SAT to detect collision between two rotated 3D rectangles. They might have a rotation (degree) around x, y or z axis. I have tried to read through all replies here but I cant find a solution that works for me. Can you please explain the following from your answer 11.sept 2012: &#8220;The projection code in the 3D to 2D case will need to return the actual projected points rather than an interval&#8221;. How do you find the actual projected points?<br />\nAs far as I understand I need to include the axis of the face normals of both rectangles in addition to the edge axis? How many axis do I need to check against? I guess 3 face axis for each rectangle, but number of edges axis I dont know.</p>\n<p>I am really stuck finding a solutions for detection in 3D. I would be really happy if you had some good answers. Thanks!</p>\n",
    "author": "saadne",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a187f1c664f89298f5fbdd19ac86358a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8960,
    "post": 366,
    "parent": 0,
    "date": "2014-05-18T20:58:10",
    "content": "<p>@William ahh, thanks for clearing that up. Was thinking about it with rectangles, but didn&#8217;t consider them having parallell lines. :)</p>\n",
    "author": "Aborysa",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8959,
    "post": 366,
    "parent": 8958,
    "date": "2014-05-18T11:26:10",
    "content": "<p>@Aborysa</p>\n<p>In short, yes.  You need to make sure that the projections of both shapes onto <em>all axes</em> are overlapping to conclude that they are intersecting.  That said, the first axis that you find where the projections <em>do not</em> overlap, you can immediately exit since you know they do not overlap.</p>\n<p>You can, for example skip any <em>identical</em> axes.  For example, a rectangle has 4 normals, one for each edge.  However, the opposing edges have the same normal (just in the opposite direction) so you really only need to test with 2 of the normals.  This means, that for any shape that has parallel edges, only one of the parallel edge&#8217;s normals needs to be tested.  By extension, if the two shapes you are testing have parallel edges, only one of those normals needs to be tested as well.  For example, if you have two axis aligned rectangles, that would be 8 normals to test (4 from each).  However, since you only need 2 from each, due to parallel edges, we would only test 4.  However, since both are axis aligned, we only need to test 2 since the shapes edges are parallel to each other.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8958,
    "post": 366,
    "parent": 0,
    "date": "2014-05-16T22:10:25",
    "content": "<p>Do you need to test all the normal axis of both objects?<br />\nWouldn&#8217;t it work to just test the normal axis of the shape with the lowest vertex count or does that only work in some cases?</p>\n",
    "author": "Aborysa",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/77fa32f60a6ce02bf819661b231237dc?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9285,
    "post": 416,
    "parent": 0,
    "date": "2014-05-14T17:33:54",
    "content": "<p>Buenas tardes me ha ayudado tu post, llevaba mucho oportunidad buscando aclaraci√≥n sobre el asunto y no la he encontraba por ninguna parte, te doy<br />\nmi m√°s sincera enhorabuena porque s√© el sacrificio que lleva hacerlo<br />\ny te has ganado un seguidor mas de tu blog. Un saludo</p>\n",
    "author": "Libia",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d6ae79639b3689a09e3278618e17f48?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d6ae79639b3689a09e3278618e17f48?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d6ae79639b3689a09e3278618e17f48?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=416"
}, {
    "id": 8956,
    "post": 366,
    "parent": 8955,
    "date": "2014-04-24T16:43:07",
    "content": "<p>@Nik</p>\n<p>No worries.  It happens to everyone.  If you have other questions, don&#8217;t hesitate to ask.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8955,
    "post": 366,
    "parent": 0,
    "date": "2014-04-23T22:23:08",
    "content": "<p>Never mind, I just realized it&#8217;s because I forgot the y-coordinates are positive in the downwards direction. I was just messing up my coordinates. Yeesh.</p>\n",
    "author": "Nik",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8954,
    "post": 366,
    "parent": 0,
    "date": "2014-04-23T18:48:49",
    "content": "<p>This is a great article! I&#8217;m doing a project for school on collision detection where we research some algorithm and analyze the runtime complexity and other metrics, and your article has helped a great deal in getting my own SAT algorithm up and running for a demo! However, I do have a slight problem that I&#8217;m hoping you can help me with.</p>\n<p>I know in one of the earlier comments there was mention of the &#8220;winding&#8221; of a shape, which I understand means the order in which the vertices of the shape are visited (either clockwise or counter-clockwise). I assume this means the vertices array has the vertices already initialized to be in the correct order, otherwise your getAxes() method would work. I&#8217;ve done the same thing for my code, but for some reason the normal of the edge vector switches between being the right normal and the left normal. </p>\n<p>Here&#8217;s the example I&#8217;m using in my test case: I have a rectangle with vertices at top left (40,40), bottom left (40,50), bottom right (50,50), and top right (50,40). As you can see, these points are in counterclockwise order. I run this rectangle through the following code:</p>\n<pre>Vector2D[] retArray = new Vector2D[vertices.length];\nfor (int i=0; i&lt;vertices.length; i++)\n{\n  Vector2D point1 = vertices[i];\n  Vector2D point2;\n  if (i+1 &lt; vertices.length)\n    point2 = vertices[i+1];\n  else\n    point2 = vertices[0];\n  Vector2D edge = point1.subtract(point2);\n  retArray[i] = edge.rightNormal().normalize();\n}\nreturn retArray;\n</pre>\n<p>This works fine for the first iteration, but once I get to the second iteration, my edge appears to be pointed the wrong way. Expected Edge: (10,0), Actual Edge:(40,50) &#8211; (50,50) = (-10,0). Naturally this is causing me to grab the incorrectly facing normal. </p>\n<p>Did I just misunderstand how to initialize the vertices array? Or is there something else going on that I just don&#8217;t see?</p>\n<p>Thanks for your help!</p>\n",
    "author": "Nik",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/80b4e9b8ab77790d2ddc3704470426b9?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9085,
    "post": 368,
    "parent": 9084,
    "date": "2014-04-08T12:37:51",
    "content": "<p>@NL</p>\n<p>Yeah, I can see how this could be confusing.  Since the cross product is not commutative and we technically have (AC X AB) X AB then we need to use the triple product expansion:</p>\n<pre>(A X B) X C = -A(C &middot; B) + B(C &middot; A) = B(C &middot; A) - A(C &middot; B)</pre>\n<p>It&#8217;s a little hard to tell since both B and C in this case are AB.  I&#8217;ve added parentheses to the triple products and added some text that shows the triple product expansion I&#8217;m using.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9084,
    "post": 368,
    "parent": 0,
    "date": "2014-04-07T07:15:59",
    "content": "<p>In &#8216;checking the simplex&#8217; part. When you try to find in which voronoi region it lies.</p>\n",
    "author": "NL",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9192,
    "post": 372,
    "parent": 0,
    "date": "2014-04-05T09:12:00",
    "content": "<p>thank you, i&#8217;m waiting for your tutorial.</p>\n",
    "author": "james",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3c6cb5e58abb27a1203a17503d9a377e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3c6cb5e58abb27a1203a17503d9a377e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3c6cb5e58abb27a1203a17503d9a377e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9272,
    "post": 394,
    "parent": 9271,
    "date": "2014-04-03T22:09:24",
    "content": "<p>@Branden</p>\n<p>That&#8217;s correct.  ref.max is the vertex that is farthest along the normal (v in the first code sample).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9271,
    "post": 394,
    "parent": 0,
    "date": "2014-04-03T02:47:46",
    "content": "<p>This is an excellent tutorial! And I appreciate the effort that went into it.</p>\n<p>I have one question though.<br />\nWhen using the variable max, to later clamp our points, what is ref.max referring to?</p>\n<pre>\ndouble max = refNorm.dot(ref.max);\n</pre>\n<p>Is that the furthest vertex in the reference edge using the reference edge&#8217;s direction?</p>\n",
    "author": "Branden",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/785e03d4f6ec3f259f022c4bfe258475?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/785e03d4f6ec3f259f022c4bfe258475?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/785e03d4f6ec3f259f022c4bfe258475?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9083,
    "post": 368,
    "parent": 9082,
    "date": "2014-04-02T22:20:12",
    "content": "<p>@NL</p>\n<p>Which part of the post are you referring to that needs an update?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9082,
    "post": 368,
    "parent": 0,
    "date": "2014-04-02T06:53:03",
    "content": "<p>Hi William<br />\nits really quite simple. My data provides for both time and coordinates. I just correlate at what coordinate there is a collision with the corresponding time. Anyway, I found my mistake and now I get the same time of collision same for both algorithms. However, I have a small question about the triple product. In the post you have written to find ABPerp as ACxABxAB but shouldn&#8217;t it be ABxABxAC, as you have rightly written in the formula.<br />\nRegards &amp; Thanks!</p>\n",
    "author": "NL",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9081,
    "post": 368,
    "parent": 9079,
    "date": "2014-04-01T22:42:35",
    "content": "<p>@NL</p>\n<p>Can you elaborate a little more on what you mean by the &#8216;time of collision is a little before&#8217;?  If you mean the collision information (normal and depth) are different, then that&#8217;s definitely possible.  What method are you using to get the collision information (sampling, EPA, collision margins, etc.)?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9080,
    "post": 368,
    "parent": 9078,
    "date": "2014-04-01T22:37:15",
    "content": "<p>@Fluorescence</p>\n<p>Checkout these papers:<br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.continuousphysics.com/ftp/pub/test/files/physics/papers/jgt04raycast.pdf');\"  href=\"http://www.continuousphysics.com/ftp/pub/test/files/physics/papers/jgt04raycast.pdf\" title=\"GJK Ray Cast\" target=\"_blank\" rel=\"nofollow\">http://www.continuousphysics.com/ftp/pub/test/files/physics/papers/jgt04raycast.pdf</a><br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/gamedevs.org/uploads/continuous-collision-detection-and-physics.pdf');\"  href=\"http://gamedevs.org/uploads/continuous-collision-detection-and-physics.pdf\" title=\"Continuous Collision Detection\" target=\"_blank\" rel=\"nofollow\">http://gamedevs.org/uploads/continuous-collision-detection-and-physics.pdf</a></p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9191,
    "post": 372,
    "parent": 9190,
    "date": "2014-04-01T22:27:18",
    "content": "<p>@james</p>\n<p>I agree that this is very hard to find.  If I get some time in the future I certainly will, but at the moment my time is very limited.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9079,
    "post": 368,
    "parent": 0,
    "date": "2014-03-31T11:55:49",
    "content": "<p>Hi William<br />\nAgain an awesome tutorial. I implemented this algorithm and SAT for the same set of data. I get results. However, the time of collision that I find for GJK is always a little before than the result I get from SAT algorithm. Do you think this has a possible explanation?<br />\nBest Regards</p>\n",
    "author": "NL",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9078,
    "post": 368,
    "parent": 0,
    "date": "2014-03-26T01:04:08",
    "content": "<p>Dear William<br />\n        What an inspiring tutorial! Really appreciate it.<br />\n        I&#8217;m wonder how to apply GJK in continuous collision detection? I mean, given a time interval, how to detection the collision between objects during it?<br />\n        Another one, about EPA and Clipping, are there some articles or journals discussing it? Because I want to add it in my paper, hence some obscure mathematical expressions are necessary -_-||<br />\n        Thanks a lot!</p>\n",
    "author": "Fluorescence",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/eebc8fe5a33e1ba57083798dafa0336a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/eebc8fe5a33e1ba57083798dafa0336a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/eebc8fe5a33e1ba57083798dafa0336a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9190,
    "post": 372,
    "parent": 0,
    "date": "2014-03-18T20:24:37",
    "content": "<p>Hi William, please write about contact constraint, i&#8217;m looking for &#8220;practical&#8221; contact constraint solving on the web, but i can&#8217;t find anything.</p>\n",
    "author": "james",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/528247eae833d3d0da33d466a2cb7040?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/528247eae833d3d0da33d466a2cb7040?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/528247eae833d3d0da33d466a2cb7040?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 8953,
    "post": 366,
    "parent": 0,
    "date": "2014-03-13T10:08:56",
    "content": "<p>Hey! I got it! thank you very much! :)</p>\n",
    "author": "NL",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8952,
    "post": 366,
    "parent": 8951,
    "date": "2014-03-12T22:11:36",
    "content": "<p>@NL</p>\n<p>See my comment about the overlap condition.</p>\n<p>Create a couple of examples to see how it works, normal overlap, no overlap, containment, etc.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8951,
    "post": 366,
    "parent": 0,
    "date": "2014-03-12T14:36:46",
    "content": "<p>Hi! This has helped me a lot in the implementation. But I am still confused about the conditions of overlap. I have looked at many places but everywhere it confuses me more. According to me, Lets say when two polygons are present 1 and 2 and I project it on one of the normals. Lets say normals of polygon 1. Then the overlap condition should be min11&gt;min21 and max11&gt;min21. Am I understanding it right or is it something else? Because almost everywhere I have seen the opposite of these conditions! I would be grateful if you could help me. I have been stuck with this for days now. Thanks in advance.</p>\n",
    "author": "NL",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0883e1f1534f3cbb17733b81e7573a77?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9270,
    "post": 394,
    "parent": 9268,
    "date": "2014-03-11T23:49:59",
    "content": "<p>@Dylan</p>\n<p>This may depend on what you are using the results for.  For example, in my collision detection code I have a check at the end that makes sure the normal is always pointing from convex A to convex B.  The same applies here in that, if the reference edge was B, then I need to negate the front normal so that the normal is still pointing from A to B.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9269,
    "post": 394,
    "parent": 9266,
    "date": "2014-03-11T23:47:04",
    "content": "<p>@Dylan</p>\n<p>You can certainly do that as a precaution, but since we have both edge vectors (l and r) pointing towards the farthest point and pointing in the same direction as n, then the projections will always be positive or zero.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9268,
    "post": 394,
    "parent": 0,
    "date": "2014-03-11T20:36:33",
    "content": "<p>Actually it turns out I get the same correct results if I just always use the normal from referenceEdge.crossProduct(-1.0f) and forget about the whole flipping thing.  Not sure why mine works like this.</p>\n",
    "author": "Dylan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9267,
    "post": 394,
    "parent": 0,
    "date": "2014-03-11T19:12:50",
    "content": "<p>I finally got my version of this working.  All of my code seems to be on par with yours with one small difference however.  I had to change my code to compare things differently if the reference angle is flipped/not flipped as follows:</p>\n<pre>\n    float max = referenceNormal.dotProduct(referenceEdge-&gt;vertex);\n    \n    if (flip) {\n        if (referenceNormal.dotProduct(clippedPoints[1]) &gt; max)\n            clippedPoints.erase(clippedPoints.begin() + 1);\n    \n        if (referenceNormal.dotProduct(clippedPoints[0]) &gt; max)\n            clippedPoints.erase(clippedPoints.begin());\n    } else {\n        if (referenceNormal.dotProduct(clippedPoints[1]) &lt; max)\n            clippedPoints.erase(clippedPoints.begin() + 1);\n        \n        if (referenceNormal.dotProduct(clippedPoints[0]) &lt; max)\n            clippedPoints.erase(clippedPoints.begin());\n    }\n</pre>\n",
    "author": "Dylan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9266,
    "post": 394,
    "parent": 0,
    "date": "2014-03-11T18:10:19",
    "content": "<p>That makes more sense.  I think you also need to compare absolute dot products in your findBestEdge() method, when looking for the secondary vertex of the edge.  Cheers.</p>\n",
    "author": "Dylan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9265,
    "post": 394,
    "parent": 9264,
    "date": "2014-03-10T23:49:11",
    "content": "<p>@Dylan</p>\n<p>Good question.  Actually, it shouldn&#8217;t matter since both n and -n should be equally perpendicular.  However, what does need to be done is compare the absolute value of the dot products, not just the dot products.  I&#8217;ve updated the post to reflect this.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9264,
    "post": 394,
    "parent": 0,
    "date": "2014-03-09T11:13:00",
    "content": "<p>Great tutorial but I&#8217;m having a bit of a doubt on one part.</p>\n<p>Edge e1 = A.best(n)<br />\nEdge e2 = B.best(-n);</p>\n<p>You do the above to find the most perpendicular edge for each polygon, which makes sense.  Then later on to find the reference edge you compare (e1.dot(n) &lt;= e2.dot(n)).  Shouldn&#039;t you be comparing e1.dot(n) &lt;= e2.dot(-n) instead?</p>\n<p>Thanks.</p>\n",
    "author": "Dylan",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d6acc0dc7e2148ec433f9befd19fd55?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9124,
    "post": 369,
    "parent": 9123,
    "date": "2014-02-18T13:41:01",
    "content": "<p>@karim</p>\n<p>Nope, it&#8217;s no trouble.</p>\n<p>We have two equations with two unknowns: Œª1 and Œª2.  Our equations are:</p>\n<pre>\n(Œª1A + Œª2B) ¬∑ L = 0\nŒª1 + Œª2 = 1\n</pre>\n<p>Solve one of the equations for Œª1. (I&#8217;ll solve the 1st equation)</p>\n<pre>\n// Distribute the dot product of L\nŒª1A ¬∑ L + Œª2B ¬∑ L = 0\n// We can factor out the lambdas since they are scalars\nŒª1(A ¬∑ L) + Œª2(B ¬∑ L) = 0\n// Move the Œª2(B ¬∑ L) term to the other side\nŒª1(A ¬∑ L) = -Œª2(B ¬∑ L)\n// Divide by (A ¬∑ L)\nŒª1 = (-Œª2(B ¬∑ L)) / (A ¬∑ L)\n</pre>\n<p>Then substitute this into the other equation.</p>\n<pre>\n(-Œª2(B ¬∑ L)) / (A ¬∑ L) + Œª2 = 1\n</pre>\n<p>Then solve for Œª2</p>\n<pre>\n(-Œª2(B ¬∑ L)) / (A ¬∑ L) + Œª2 = 1\n// Multiply everything by (A ¬∑ L)\n-Œª2(B ¬∑ L) + Œª2(A ¬∑ L) = (A ¬∑ L)\n// Factor out Œª2 since its a scalar\nŒª2(A ¬∑ L - B ¬∑ L) = (A ¬∑ L)\n// Factor out the dot product with L (since its distributive)\nŒª2((A - B) ¬∑ L) = (A ¬∑ L)\n// Remember that L = B - A\n-Œª2(L ¬∑ L) = (A ¬∑ L)\n// Divide by L ¬∑ L\nŒª2 = -(A ¬∑ L) / (L ¬∑ L)\n</pre>\n<p>To find Œª1, substitute Œª2 into the Œª1 + Œª2 = 1 equation.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9123,
    "post": 369,
    "parent": 0,
    "date": "2014-02-18T08:02:18",
    "content": "<p>Thank you very much.<br />\ni think i got. but another question, how we achieve this equation:<br />\nŒª2 = -L ¬∑ A / (L ¬∑ L)<br />\n?<br />\nsorry if i bother you.</p>\n",
    "author": "karim",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/986c4bcb2e06cebbed1a5de138618296?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/986c4bcb2e06cebbed1a5de138618296?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/986c4bcb2e06cebbed1a5de138618296?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9077,
    "post": 368,
    "parent": 9076,
    "date": "2014-02-18T04:07:54",
    "content": "<p>@Saad</p>\n<p>An example of a shape similar to a circle is a capsule.  Unless the support direction is perpendicular to the long part of the shape, the farthest point can be found in constant time just like the circle.  An ellipse is just a non-uniformly scaled circle, which means you could also find the farthest point in constant time.  For arbitrary convex polygons, you&#8217;d have to find a way to improve the search (using a binary search or something).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9122,
    "post": 369,
    "parent": 9121,
    "date": "2014-02-18T03:44:50",
    "content": "<p>@karim</p>\n<p>I&#8217;ve updated these sections to better reflect the concept being used: a Convex Combination.</p>\n<p>To explain a little further: we obtained the final simplex [A,B], which is a line segment in 2D, at the termination of the algorithm.  The line segment can be considered a convex hull.  We can find any point inside or on the edge of the hull by using a convex combination of any of the points within the hull (in our case we use all the vertices which make up the convex hull).  Since the simplex is within the Minkwoski Difference, which is a linear combination of two convex shapes, the lambda scalars can be used in the same manner on the individual shape&#8217;s closest edges [A1,B1] and [A2,B2] to find the closest points.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9121,
    "post": 369,
    "parent": 0,
    "date": "2014-02-16T07:01:56",
    "content": "<p>i think convex hull is a set of point and no more.<br />\ni don&#8217;t really what is lambda :-?</p>\n<p>CH(S) = ‚àëi=1‚Ä¶n ŒªiPi = Œª1P1 + ‚Ä¶ + ŒªnPn</p>\n",
    "author": "karim",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/69bb4d218e88a846c696df26bb2b395c?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/69bb4d218e88a846c696df26bb2b395c?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/69bb4d218e88a846c696df26bb2b395c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9076,
    "post": 368,
    "parent": 0,
    "date": "2014-02-16T01:16:12",
    "content": "<p>Right. You kicked off by mentioning that the advantage of GJK over other algorithms (e.g., SAT) is that it works for any shape that implements a support mapping. For a random convex polygon, the support takes time linear in the vertex count; for a circle it takes constant time. Intuition says that there are shapes for which the support takes time proportional to <strong>log n</strong> or something. My intuition tells me that there should be a fast way of computing the support for a regular convex polygon (in part because the more vertices it contains the better it approximates a circle). I should probably formalize this and come up with a formula for doing so.</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0bd576e8af58b1f9b59af28fb11921fc?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0bd576e8af58b1f9b59af28fb11921fc?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0bd576e8af58b1f9b59af28fb11921fc?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9120,
    "post": 369,
    "parent": 0,
    "date": "2014-02-12T05:07:48",
    "content": "<p>Thanks! Now it is clear to me. I drew a few diagrams to understand what you meant and now I understand completely.</p>\n",
    "author": "Vishal",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9119,
    "post": 369,
    "parent": 9117,
    "date": "2014-02-11T13:26:51",
    "content": "<p>@Vishal</p>\n<p>I think that I was answering too many questions in that response, so its a bit confusing.  I have updated it to make more sense.</p>\n<p>What we are doing is testing the projections of the current simplex points and the new simplex point we just found.  So dc represents the projection of the new simplex point onto the support direction.  da represents the projection of one of the current simplex points onto the support direction (it doesn&#8217;t matter which).  These projections tell us how far away from the origin they are.  Doing dc &#8211; da tells us if we are getting closer or farther away from the origin as we are iterating.  Eventually, the projections, dc and da, will be near equal which indicates that we&#8217;ve found the closest edge (feature in your case) to the origin.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9290,
    "post": 435,
    "parent": 9289,
    "date": "2014-02-11T13:03:01",
    "content": "<p>@JJ</p>\n<p>I need to, there&#8217;s no question about that.  I do respond to comments and I make that a priority.  Why haven&#8217;t I posted in a while?  It&#8217;s really been the lack of time honestly.  I&#8217;m hoping here soon that I&#8217;ll be able to post some more.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 9118,
    "post": 369,
    "parent": 0,
    "date": "2014-02-11T11:23:38",
    "content": "<p>Also, I am using the same terminating condition for 3D case and so far there are no problems. Is the terminating condition which you have stated here valid for 3D case as well?</p>\n",
    "author": "Vishal",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9117,
    "post": 369,
    "parent": 0,
    "date": "2014-02-11T11:21:54",
    "content": "<p>Hi,<br />\nI implemented the GJK algorithm for 3D case. The code runs fine but I am not able to get a grasp on the terminating condition.</p>\n<p>I quote your comment &#8220;Right, the termination case is a bit tricky. You know to terminate the loop when the new point you found via the support function is projected onto the search direction and that projection is not greater than zero. &#8221;</p>\n<p>But in iteration 2, your dc value is -0.33 and in the next iteration it is -1.72. So shouldn&#8217;t it have ended at iteration 2 itself? when the value of dc became negative.</p>\n<p>Also, the termination condition is checking for dc-da. Can you explain that further?</p>\n",
    "author": "Vishal",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1f47ac89fcc86ffbc09c9ed60f047b6d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9289,
    "post": 435,
    "parent": 0,
    "date": "2014-02-09T06:53:56",
    "content": "<p>Hi dear William, you are really great man, your tutorials were awesome!<br />\nwhy don&#8217;t update blog?</p>\n",
    "author": "JJ",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b4e491eef95327d66829ae76e47c8ff3?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 9263,
    "post": 394,
    "parent": 9262,
    "date": "2014-01-22T17:42:29",
    "content": "<p>@Karl</p>\n<p>Yeah, you&#8217;d want to initialize it to the largest negative number possible (-Double.MAX_VALUE in Java).  That way if the projections were negative, imagine the shapes in the 3rd quadrant, you&#8217;d still get the maximum.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9262,
    "post": 394,
    "parent": 0,
    "date": "2014-01-22T07:22:55",
    "content": "<p>Thank you for this awesome tutorial. I had a question on the initial value of &#8216;max&#8217; at the finding the feature part.<br />\nAre you initializing it to a really big negative number (-100000.0f)? Or are you setting it to 0?</p>\n",
    "author": "Karl",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 8950,
    "post": 366,
    "parent": 8949,
    "date": "2014-01-21T13:14:44",
    "content": "<p>@Maynza</p>\n<p>Depending on the reason for getting the center of the overlap area, you might just try to get the collision points by doing <a href=\"http://www.dyn4j.org/2011/11/contact-points-using-clipping/\" title=\"Contact Points Using Clipping\" target=\"_blank\" rel=\"nofollow\">Sutherland-Hodgman clipping</a>.  You may be able to modify this to get what you need.</p>\n<p>You could also try and do Constructive Area Geometry to find this out as well (do an intersection) and then compute the area weighted centroid using the vertices of the intersection shape.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8949,
    "post": 366,
    "parent": 0,
    "date": "2014-01-20T21:46:52",
    "content": "<p>Hi William,</p>\n<p>On the off chance you still respond to things on here I have a question.  I am trying to derive the center of the overlapping area of the polygons in the event of a collision.  How can I use the overlapping portions which are not in the x and y plane and determine where the center of my overlap would be in x and y.  I feel like I am on the cusp of it but I keep missing something.</p>\n<p>Here is my matlab attempt:<br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/ideone.com/RGuYBv');\"  href=\"http://ideone.com/RGuYBv\" rel=\"nofollow ugc\">http://ideone.com/RGuYBv</a></p>\n<p>I couldn&#8217;t use pastebin so the syntax highlighting is off but hopefully you can understand what I am doing.</p>\n",
    "author": "Maynza",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/ace25a31a695f7a6ed7a5c38cce3ab2d?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/ace25a31a695f7a6ed7a5c38cce3ab2d?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/ace25a31a695f7a6ed7a5c38cce3ab2d?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9116,
    "post": 369,
    "parent": 9115,
    "date": "2014-01-02T12:51:55",
    "content": "<p>@John</p>\n<p>I&#8217;ll try to summarize the major benefits of each, but this is by no means a complete list.  The tough part is that both are really good algorithms and really only have small benefits over one another.</p>\n<p><strong>SAT Pros:</strong><br />\n1. Very easy to implement and debug.<br />\n2. Returns collision normal and depth when a collision is detected.<br />\n3. Can be implemented on the GPU really easily (and will be extremely fast).<br />\n4. Really fast.<br />\n<strong>SAT Cons:</strong><br />\n1. Really only designed to work with polygons/polyhedra.  You can make it work for circular curves or just use polygonal approximations of curves.<br />\n2. In 3D you may end up tests a lot of axes in the collision case, especially if you end up approximating curved shapes (not really an issue for the GPU).<br />\n3. </p>\n<p><strong>GJK Pros:</strong><br />\n1. Very elegant implementation, for OOP especially.<br />\n2. With very minor code changes it can be used to return the distance between two convexes and their closest points.<br />\n3. Can handle any kind of convex shape, all that&#8217;s required is a support function for it.<br />\n4. Really fast, even in the collision cases.<br />\n<strong>GJK Cons:</strong><br />\n1. Slightly harder to understand, implement and debug.<br />\n2. Harder to get numerically stable.<br />\n3. Requires a separate algorithm to return collision normal and depth when a collision is detected (EPA, sampling, etc.)<br />\n4. Not as easily transferable to the GPU due to the number of branches in the code.</p>\n<p>If you&#8217;ve already implemented one of these, I would just stick with it until the need arises where you need the other for some reason.<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9115,
    "post": 369,
    "parent": 0,
    "date": "2014-01-01T13:44:50",
    "content": "<p>Hey, I recently implemented SAT for 3d collision detection. I&#8217;m just wondering what the benefits are of SAT and GJK. Thanks!</p>\n",
    "author": "John",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/46f887ebf3dc0caae71a2816a79ee16b?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/46f887ebf3dc0caae71a2816a79ee16b?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/46f887ebf3dc0caae71a2816a79ee16b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9075,
    "post": 368,
    "parent": 9074,
    "date": "2013-12-23T13:28:52",
    "content": "<p>@Saad</p>\n<p>Are you asking if there are any fast methods of computing the support mapping for high vertex count polygons?  If so, there are a few ways I can think of:</p>\n<p>One option is to implement a cache for the direction and its resulting farthest point (for each shape, or for the support map as a whole).  I believe the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/bulletphysics.org/');\"  href=\"http://bulletphysics.org/\" title=\"Bullet\" target=\"_blank\" rel=\"nofollow\">Bullet</a> (CPU) library does this.</p>\n<p>Another option would be to use the convexity of the shapes to our advantage again.  We know, because the shape is convex, that if we test the first vertex (what determines the first vertex is arbitrary) in the shape and then test its neighbors, we can find the right direction to iterate to find the farthest vertex.  This can eliminate half of the vertices from being tested.  Another thing we can do is, once we are looping in the correct direction, i.e. the projections are increasing, we can stop and return on the next vertex whose projection is less than our current max.  For example, take the blue shape in figure 1.  If my direction is (0,-1) and I choose (7,3) as the first vertex I test, the (5,7) vertex will have a smaller projection than the (10,2) vertex (and (10,2) being bigger than the first).  So, I would iterate over the vertices in the direction of (10,2).  I then test (10,2) and find that it is now the farthest point and move to the next vertex.  I then test (12,7) and find that its projection is less than my current farthest point&#8217;s projection, so I can stop and return (10,2).  Obviously, this isn&#8217;t really helpful for low vertex count shapes, but you could always have an &#8220;if&#8221; that switches to this logic when the shape has more than X number of vertices.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9074,
    "post": 368,
    "parent": 0,
    "date": "2013-12-21T10:59:17",
    "content": "<p>Are there convex polygons for which the support mapping can be computed really fast (convex shapes close to a circle)</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8948,
    "post": 366,
    "parent": 8947,
    "date": "2013-12-20T13:15:13",
    "content": "<p>@Greg</p>\n<p>Yes. </p>\n<p>A vector represents two things: a direction and a magnitude (length).  What I meant by &#8220;vector portion&#8221; was the direction. The axes that we used to test for collision are normalized (they have a length of 1) and as such represent only the direction of the MTV. For the magnitude of the MTV we use the overlap along the axis (we use the axis whose overlap is the smallest).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8947,
    "post": 366,
    "parent": 0,
    "date": "2013-12-19T20:34:03",
    "content": "<p>&#8220;That axis and that overlap is the MTV, the axis being the vector portion, and the overlap being the magnitude portion.&#8221;</p>\n<p>I&#8217;m a bit confused by this part, specifically what is meant by &#8220;vector portion.&#8221;  Do you mean the MTV is a vector in the same direction as the axis, but with a magnitude equal to the overlap?</p>\n",
    "author": "Greg",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/cecadee37ff3e57ef9f0c8e43555c935?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/cecadee37ff3e57ef9f0c8e43555c935?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/cecadee37ff3e57ef9f0c8e43555c935?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9155,
    "post": 370,
    "parent": 9154,
    "date": "2013-12-11T12:14:09",
    "content": "<p>@ng</p>\n<p>Can you point to the place in the post where you think it should be in the opposite direction?  More specifically, which iteration and which edge calculation?</p>\n<p>I am making some assumptions that may not be apparent that may answer your question:<br />\n1. I&#8217;m using a <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Right-hand_rule');\"  href=\"http://en.wikipedia.org/wiki/Right-hand_rule\" title=\"The Right Hand Rule\" target=\"_blank\" rel=\"nofollow\">right handed coordinate system</a><br />\n2. When computing the vector from A to B, you subtract the vectors in reverse order: A to B becomes B &#8211; A.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9154,
    "post": 370,
    "parent": 0,
    "date": "2013-12-11T07:52:30",
    "content": "<p>when you calculate the distance from origin to the edge shouldn&#8217;t a or normal( n ) be in opposite direction?</p>\n",
    "author": "ng",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9073,
    "post": 368,
    "parent": 0,
    "date": "2013-12-11T02:38:02",
    "content": "<p>just ignore the Chinese&#8230;</p>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9072,
    "post": 368,
    "parent": 0,
    "date": "2013-12-11T02:36:52",
    "content": "<p>Dear William<br />\n    Here is the pseudo code I wrote, would you please help me to check it?</p>\n<pre>\npublic Point support (Shape shape1, Shape shape2, Vector d) {\n  Point p1 = shape1.getFathestPointInDirection(d);\n  Point p2 = shape2.getFartestPointInDirection(d.negative());\n  Point p3 = p1.subtract(p2);\n  return p3;\n}\n\nVector d = Simplex.add(support(A, B, d ));;\nd.negate();\nwhile (true) {\n  Simplex.add(support(A, B, d));\n  if (Simplex.getLast().dot(d)  0) {\n    Simplex.remove(b);\n    d.set(ABCPerp);\n  } \n  else if(ABDPerp.dot(AO) < 0) {\n    Simplex.remove(C);\n    d.set(ABDPerp);\n  }\n  else if(ADCPerp.dot(AO) < 0) {\n    Simplex.remove(b);\n    d.set(ADCPerp);\n  }\n  else if(BCDPerp.dot(BO) < 0) {\n    Simplex.remove(A);\n    d.set(ADCPerp);\n  ÔΩù\n\n  ABPerp = TripleProduct(ac, ab, ab);\n  ACPerp = TripleProduct(ab, ac, ac);\n  ADPerp = TripleProduct(ab, ad, ad);\n  BCPerp = TripleProduct(bd, bc, bc);\n  BDPerp = TripleProduct(bc, bd, bd);\n  CDPerp = TripleProduct(-bc, cd, cd);\n\n  else if(ABPerp.dot(AO) < 0 ) {\n    Simplex.remove(C);\n    Simplex.remove(D);\n    d.set(ADCPerp);\n  ÔΩù\n  else if(ACPerp.dot(AO) < 0 ) {\n    Simplex.remove(B);\n    Simplex.remove(D);\n    d.set(ABPerp);\n  ÔΩù\n  else if(ADPerp.dot(AO) < 0 ) {\n    Simplex.remove(B);\n    Simplex.remove(C);\n    d.set(ADPerp);\n  ÔΩù\n  else if(BCPerp.dot(BO) < 0 ) {\n    Simplex.remove(A);\n    Simplex.remove(D);\n    d.set(BCPerp);\n  ÔΩù\n  else if(BDPerp.dot(BO) < 0 ) {\n    Simplex.remove(A);\n    Simplex.remove(X);\n    d.set(BDPerp);\n  ÔΩù\n  else if(CDPerp.dot(CO) < 0 ) {\n    Simplex.remove(A);\n    Simplex.remove(B);\n    d.set(CDPerp);\n  ÔΩù\n  else {\n    return true;\n  }\n} else if(Simplex.points.size() == 2)ÔΩõ\n  b = Simplex.getB();\n  ab = b - a;\n  ABPerp = TripleProduct(ab, ao, ab);\n  d.set(ABPerp);\n  Simplex.add(support(A, B, d));\n  c = simplex.getC();\n  ac = c - a;\n  ABCPerp = CrossProduct(ab,ac);\n  d.set(ABCPerp);\nÔΩù\nelse if (Simplex.points.size() == 3) {\n  c = simplex.getC();\n  ac = c - a;\n  ABCPerp = CrossProduct(ab,ac);\n  d.set(ABCPerp);\n}\n</pre>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8946,
    "post": 366,
    "parent": 8945,
    "date": "2013-12-10T23:32:28",
    "content": "<p>@Sam</p>\n<p>You can do collision detection against arbitrary curves, just not using SAT.  SAT is designed for polygonal shapes.  One option would be to implement a line segment shape that you then string together to make a piece-wise curve.  Another option is just to implement a collision detection routine specifically for curves.  <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/gamedev.stackexchange.com/questions/37802/collision-detection-with-curves');\"  href=\"http://gamedev.stackexchange.com/questions/37802/collision-detection-with-curves\" target=\"_blank\" rel=\"nofollow\">For example</a>.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8945,
    "post": 366,
    "parent": 0,
    "date": "2013-12-10T11:55:34",
    "content": "<p>Thanks for the quick reply! I have actually read that article you linked but I couldn&#8217;t seem to work out how they had done it.<br />\nSo from what I understand, if I have a shape like the one I described in the last comment, I take the axis from the center of the curve to each vertex of the other shape, as well as all of the axis&#8217;s of the other shape?<br />\nI was mainly interested in this type of collision for games that would have terrain such as hills and slopes that aren&#8217;t straight, but I assume it would be easier to just use many covex shapes such as rotated rectangles to form the outer part of the hill and just test against all of them, since the types of terrain I am thinking of would not be circular?</p>\n",
    "author": "Sam",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8944,
    "post": 366,
    "parent": 8943,
    "date": "2013-12-09T13:13:43",
    "content": "<p>@Sam</p>\n<p>The shape you describe is <em>concave</em>, not <em>convex</em>. As such, SAT will not work on it (however, see this <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.metanetsoftware.com/technique/tutorialA.html');\"  href=\"http://www.metanetsoftware.com/technique/tutorialA.html\" target=\"_blank\" rel=\"nofollow\">article</a>, for a way to get around it for circular <em>concave</em> shapes).  SAT can work with any convex <em>circular</em> shape (Circles, Capsules, half circles, circular sections, etc) without really any extra work.  In these cases always test the axis from the center of the arc to each vertex of the other shape (you can eliminate some of the vertices to test if you examine which voronoi region of the polygon the center of the arc lies).  You will run into problems if the curved shape is not circular (ellipse, arbitrary bezier, cubic, etc).</p>\n<p>That said, depending on the goal, you can decompose the concave shape into many convex shapes.  This will work just fine, you just have more shapes to detect collision with.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8943,
    "post": 366,
    "parent": 0,
    "date": "2013-12-07T08:46:38",
    "content": "<p>Amazing article, I learnt a lot from this, however I am having some trouble with detecting collision with a polygon and a curved shape, what I am trying to achieve is collsion detection with a shape that is simliar to a hill or a curved ramp (if you can imagine a right hand triangle with a hypotenuse that is curved inwards towards the right angle). I&#8217;m just not really sure which of the above methods would work, I presume I would break the shape down into many smaller triangles and use SAT on each one but I&#8217;m not so confident that it would work, any advice would be great, thanks!</p>\n",
    "author": "Sam",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/96dd4a8a1ff6c0a3939ba1492b5ae80a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9114,
    "post": 369,
    "parent": 0,
    "date": "2013-12-05T01:15:23",
    "content": "<p>Appreciate it!</p>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9113,
    "post": 369,
    "parent": 9112,
    "date": "2013-12-04T12:36:35",
    "content": "<p>@Futurecoming</p>\n<p>Yeah, I can see how that is a little confusing.  Its a carry over comment from the GJK collision detection post.  I updated this post to better explain whats happening.</p>\n<p>To explain a little further:<br />\nWe are basically checking to make sure we are making progress.  Progress, in this case, is defined by getting closer to the origin.  In other words, we are checking to make sure that the points we store in the simplex are the closest ones that we have found so far.  This will ensure, after a few iterations, that we will get the closest simplex to the origin, and from there, the closest points.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9112,
    "post": 369,
    "parent": 0,
    "date": "2013-12-04T01:44:27",
    "content": "<p>Dear William:<br />\nI&#8217;m not so clear what the following is used for.</p>\n<p>c = support(A, B, d) = (4, 5) &#8211; (15, 6) = (-11, -1)<br />\n// is c far enough along d<br />\ndc = 3.52 + 0.95 = 4.47<br />\nda = -0.32 &#8211; 2.85 = -3.17<br />\n// 4.47 &#8211; -3.17 = 7.64 not small enough</p>\n<p>What does it mean the c is far enough along d ?</p>\n<p>Thx a lot!</p>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9071,
    "post": 368,
    "parent": 9070,
    "date": "2013-11-25T14:29:17",
    "content": "<p>I think you meant O(n) where n is the number vertices in the shape.  Typically, your number of vertices should be fairly low, but if you do have high vertex count polygons you have a couple of options.  Here are a few I can think of:</p>\n<ol>\n<li>Start at any vertex in the polygon.  Test which vertex, either the left or right vertex of the vertex we are on, gives you a larger dot product.  Loop in that direction until you find a vertex whose dot product is less than the last.  Then you are done.  We can do this because the shape is convex (2D).  On average it should reduce down to O(n/2).</li>\n<li>Another option is perform some caching of the getFarthestPointInDirection method&#8217;s input and output.  You&#8217;ll see that some direction vectors show up often.  This may also be useful information to pass to the EPA algorithm as well.</li>\n</ol>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9070,
    "post": 368,
    "parent": 0,
    "date": "2013-11-24T08:28:44",
    "content": "<p>Hello William,</p>\n<p>This is a wonderful tutorial, thank you very much!<br />\nAbout the function getFarthestPointInDirection(), this seems to require O(n) time for a convex hull composed of n polygons. Are you aware of any algorithms that could speed up this process? Perhaps by partitioning the vertices in some &#8220;directional&#8221; boundaries? I am just wondering what is the best approach for searching for this farthest point? </p>\n<p>Thanks again!<br />\nFrancois</p>\n",
    "author": "Francois",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c1c396df07f20ee59fe980d7f658a1a1?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c1c396df07f20ee59fe980d7f658a1a1?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c1c396df07f20ee59fe980d7f658a1a1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9069,
    "post": 368,
    "parent": 9068,
    "date": "2013-11-07T13:40:23",
    "content": "<p>@Saad</p>\n<p>My implementation of GJK is in Java and I use JUnit tests to do automated/regression testing.  You can find the GJK test cases in the ShapeXShapeYTest files <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/tree/master/src/test/java/org/dyn4j/collision');\"  href=\"https://github.com/dyn4j/dyn4j/tree/master/src/test/java/org/dyn4j/collision\" title=\"GJK Collision Test Cases\" target=\"_blank\" rel=\"nofollow\">here</a>, although I&#8217;m not sure how useful they&#8217;ll be to you.</p>\n<p>I found the best way to test was to setup a program in which, using the mouse, you can move around and/or rotate (at least) one of the shapes, while you continuously check for collision using your GJK implementation.  You can also draw the collision normal when a collision is found to verify it&#8217;s pointing in the correct direction.  Then just play with one shape putting in all sorts of configurations until you are confident it works (try all the pathological cases).  From there you can just add test cases as you find bugs.</p>\n<p>I think you will still need to know the winding of the simplex as well.  For a simplex that has clockwise winding you need the verify if the vector is to the left, whereas for a simplex that has counter-clockwise winding you need to verify if the vector is to the right.  You should be able to use one cross product to determine the winding.  Remember that the winding may change each iteration of the algorithm.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9068,
    "post": 368,
    "parent": 0,
    "date": "2013-11-06T15:14:02",
    "content": "<p>I have a first version of GJK written in C. It needs testing though. If you have tested your code and still have the test cases, I&#8217;d be interested in using them to test mine. I&#8217;m pretty sure that you can find the orientation of a vector with respect to another by just taking the determinant (some authors use the term cross product to refer to that quantity but that&#8217;s an abuse as cross products are defined for 3-vectors only). You can take a look at the algorithms textbook (commonly known as CLRS); the section on computational geometry uses this computation.</p>\n<p>Here is a function that tells you whether the first vector (<em>u</em>) is to the left of the second vector (<em>v</em>):</p>\n<pre>\nbool isLeft(vector u, vector v)\n{\n  float cross = u.x*v.y - u.y*v.x;\n  return cross &lt; 0.0;\n}\n</pre>\n<p><strong>Example 1:</strong><br />\nu = (2, 1) and v = (2, 0). u is obviously to the left of v. The cross gives -2 which is less than 0 so this test passes.</p>\n<p><strong>Example 2:</strong><br />\nu = (2, 3) and v = (-5, -1). here u is to the right of v. The cross gives 13 which is not less than 0 so this test passes as well.</p>\n<p>An extreme case is when the u and v are collinear (cross = 0). In that cases you can answer either left or right.</p>\n<p>You can test if a point is on one side of a line by taking u to be that point and v to be any vector on the line.</p>\n<p>Let me know,<br />\nsaad</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9067,
    "post": 368,
    "parent": 9064,
    "date": "2013-11-06T14:34:31",
    "content": "<p>@Saad</p>\n<p>Thank you, that is much clearer.  I&#8217;m assuming CO is the vector from C to the Origin.  Given that is the case, the problem I see with the pseudo code is what if the origin is inside the simplex already?  At first glance it&#8217;s not a problem because it would be to the right, but what if the winding of the simplex is clockwise (look at Figure 9 for an illustration and replace B and C)?  The first if will be true, the next if will be true, and you will remove B and continue the algorithm, when you should have exited, reporting a collision.</p>\n<p>The winding of the simplex is not constant either, it can change each iteration (since we always just append a new simplex point and we could have removed B earlier).  That said, you could always compute the winding each iteration, then include that in the logic.</p>\n<p>Have you developed the Vector.isLeftOf(Vector) function?  Without thinking it through, I have another function that finds which side a point is relative to a line which has 7 operations.  To find the winding you will need to do one cross product which will be 3 operations.  So you may come out on top.  I&#8217;d be interested to know, how many operations you have once it&#8217;s all working.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9066,
    "post": 368,
    "parent": 9065,
    "date": "2013-11-06T13:21:02",
    "content": "<p>@Futurecoming</p>\n<p>That&#8217;s correct. Just be a little more accurate, as each point is added to the simplex we check where the origin is so that we build up to the tetrahedron case in the direction of the origin.  In otherwords, we are trying to enclose the origin at every step, not just after we have a tetrahedron.  Ideally we would get the 4th point to make the tetrahedron and immediately detect the origin inside.  Technically you could build the tetrahedron however you want, but if we continuously check where the origin is, relative to the simplex, then we can eliminate a lot of ifs in the triangle and tetrahedron cases like I described in the <a href=\"http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/#gjk-origin\" title=\"Checking The Simplex\" target=\"_blank\" rel=\"nofollow\">Checking The Simplex</a> section.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9065,
    "post": 368,
    "parent": 0,
    "date": "2013-11-06T01:34:03",
    "content": "<p>Dear William:<br />\nIn 3D , is the following simple process right?<br />\n(1) first we check whether the point we got through a certain direction pass the origin, which equals to check if the point is in the point VR of the MK Difference;<br />\n    if it doesn&#8217;t then return false, meaning collision doesn&#8217;t exist.<br />\n    if it does then we add it to the simplex;<br />\n   * redo the above until the simplex have 4 points, making up a tetrahedron.<br />\n(2)then we go to check if the origin lies in the 4 face VR by using the perps and dot product;<br />\n    if it lies in one of them, then we use the perp of that face as our new searching direction and get rid of the present useless point of the simplex and rebuild the simplex and do the same thing from * .<br />\n    if it doesn&#8217;t then the origin is surely inside the simplex and we get the collision detected.</p>\n<p>end</p>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9064,
    "post": 368,
    "parent": 0,
    "date": "2013-11-05T17:35:17",
    "content": "<p>Spaces were trimmed from last post so I&#8217;ll re-post with points to mark indentation:</p>\n<p>if CA is to the left of CO (det(CA CO) &gt; 0):<br />\n..if CA and CO point to the same direction (dot &gt; 0):<br />\n&#8230;.D = rotateRight(CA) // D.x = -CA.y; D.y = CA.x (depends on coords-system)<br />\n&#8230;.simplex = [A, C]<br />\n..else<br />\n&#8230;.D = CO<br />\n&#8230;.simplex = [C]<br />\nelse if CB is to the right of CO (= CO is to the left of CB):<br />\n..if CB and CO point to the same direction:<br />\n&#8230;.D = rotateLeft(CB) // D.x = CA.y; D.y = -CA.x<br />\n&#8230;.simplex = [B, C]<br />\n..else<br />\n&#8230;.D = CO<br />\n&#8230;.simplex = [C]<br />\nelse<br />\n..return true // Simplex contains origin</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9063,
    "post": 368,
    "parent": 0,
    "date": "2013-11-05T17:32:52",
    "content": "<p>I&#8217;ll do the 2-simplex case with pseudo-code. Assume there is a macro or function that tells you whether a vector is to the left with respect to another (vector A is to the left of B if you have to rotate left starting at B to get to A). We can use determinant to answer this quickly (det(A B) &gt; 0 means A is to the left of B assuming y-axis points downwards). Assume that direction vector is called D.</p>\n<p>2-simplex case: simplex = [A, B, C] so C is the latest point</p>\n<p>if CA is to the left of CO (det(CA CO) &gt; 0):<br />\n  if CA and CO point to the same direction (dot &gt; 0):<br />\n    D = rotateRight(CA) // D.x = -CA.y; D.y = CA.x (depends on coords-system)<br />\n    simplex = [A, C]<br />\n  else<br />\n    D = CO<br />\n    simplex = [C]<br />\nelse if CB is to the right of CO (= CO is to the left of CB):<br />\n  if CB and CO point to the same direction:<br />\n    D = rotateLeft(CB) // D.x = CA.y; D.y = -CA.x<br />\n    simplex = [B, C]<br />\n  else<br />\n    D = CO<br />\n    simplex = [C]<br />\nelse<br />\n  return true // Simplex contains origin</p>\n<p>&#8212;&#8212;&#8212;&#8212;-</p>\n<p>There are no triple products involved here, coord and sign flips do the job and there is no need for a function to test if a point is inside a 2-simplex so it&#8217;s faster (maybe). I hope this is clearer.</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9062,
    "post": 368,
    "parent": 9061,
    "date": "2013-11-05T15:36:11",
    "content": "<p>How will know which direction to rotate (90 or -90)?  Can you give the full details on what you intend to replace?</p>\n<p>I&#8217;m answering under the assumption you are trying to replace the triple products (you said cross product, can you clarify this?) inside the triangle simplex case with a rotation of the edge.  Given that assumption, I think you would need to know the winding of the simplex to know which direction to rotate (the winding can change each iteration).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9061,
    "post": 368,
    "parent": 0,
    "date": "2013-11-04T15:13:37",
    "content": "<p>No trig function calls required, rotation sare 90 degrees, you just flip the coords and negate one of them.</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9060,
    "post": 368,
    "parent": 9059,
    "date": "2013-11-04T14:17:27",
    "content": "<p>I&#8217;m not sure, I think it depends on the implementation of the trigonometric functions.</p>\n<p>My implementation of the triple product has 8 multiplies, 2 adds, and 2 subtractions for a total of 12 operations.  If the trigonometric functions are implemented using CORDIC or Taylor series, I think the triple product will win out.  If I&#8217;m not missing anything, you would need 3 trigonometric function calls to perform the rotation: 1 (arctan2 probably) to obtain the angle of rotation and 2 (sin/cos) to perform the rotation?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9059,
    "post": 368,
    "parent": 0,
    "date": "2013-11-02T13:40:16",
    "content": "<p>Hello William,</p>\n<p>I watched the video tutorial and read through. In the video, the third line of initialization should negate D (it reads D = -S in the video but his explanation is correct). I&#8217;m implementing a 2D version of GJK and have a question.</p>\n<p>I think that the cross product direction update can be made faster by just rotating the vector AB in the direction of the origin. What do you think?</p>\n",
    "author": "Saad Taame",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9058,
    "post": 368,
    "parent": 9057,
    "date": "2013-11-01T13:30:26",
    "content": "<p>In 2D you only have two cases: the segment and triangle cases.  For 3D you need one more case in addition to these: the tetrahedron case.  By the time you have built a triangle simplex and verified that the origin is &#8220;inside&#8221; you need to add another simplex point in the direction of the origin.  This is because the origin could be above or below the plane of the triangle.  In other words, in 3D we may not have fully enclosed the origin yet.  The algorithm proceeds as normal from here, do plane tests until you verify the origin is (or is not) contained in the tetrahedron.  You can use the same logic as described in Casey&#8217;s video and my post here to try to reduce the number of &#8220;if&#8221; conditions for the tetrahedron case to make the code simpler.</p>\n<p>If you give it a try and have more specific questions I&#8217;d be happy to answer,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9057,
    "post": 368,
    "parent": 0,
    "date": "2013-11-01T02:20:06",
    "content": "<p>Dear William, I want to try to apply the GJK in 3d dynamic environment, can you give me some advice? Thanks!</p>\n",
    "author": "Futurecoming",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b514703dd3528c7bff8281a55397817d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9056,
    "post": 368,
    "parent": 0,
    "date": "2013-10-31T01:18:22",
    "content": "<p>Thx a lot!! ^_^</p>\n",
    "author": "Dimension",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9055,
    "post": 368,
    "parent": 9053,
    "date": "2013-10-30T12:41:27",
    "content": "<p>@Dimension:</p>\n<p>There are two ways to handle concave shapes: 1) develop/find an algorithm that supports concave shapes or 2) decompose the concave shape into convex shapes.</p>\n<p>My research into concave shape collision detection algorithms is minimal.  Typically they are avoided due to complexity and run-time cost, but this may changed since I last looked.</p>\n<p>Most go the second route and decompose the concave shape into convex shapes and perform collision detection using a convex algorithm.  There are a number of methods to decompose concave shapes.  I have listed a few that I have implemented in comment on the SAT post.  If you are working in 3D then you may be interested in <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/sourceforge.net/projects/hacd/');\"  href=\"http://sourceforge.net/projects/hacd/\" title=\"HACD\" target=\"_blank\" rel=\"nofollow\">HACD</a>.  The convex decomposition can be done as a pre-processing step to save some time.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9054,
    "post": 368,
    "parent": 9052,
    "date": "2013-10-30T12:30:36",
    "content": "<p>@ng:</p>\n<p>I think later in the video he explains that the number of ifs for the triangle case can actually be reduced (I could be mistaken here).  The number of ifs at this stage in the video is around 5-6 depending on how you count it.</p>\n<p>If you think about the AC if and its else condition, you can see that its unnecessary.  We obtain the A and C simplex points by getting the point farthest in the Minkowski Difference along a direction.  We have a check on the loop that says we stop and return no intersection if any simplex point we find is not past the origin along that direction.  Because of this check on the loop, we have already determined that the origin cannot lie in regions 5 and (i think, its hard to read) 6.  If the origin was in either of those regions, then A and C would not have been valid simplex points and we would have exited the algorithm with no intersection already.</p>\n<p>I talk about this in more detail in the <a href=\"http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/#gjk-top\" title=\"Checking the Simplex\" target=\"_blank\" rel=\"nofollow\">Checking The Simplex</a> section.  You can also find more talk about the video on this forum thread.  The thread covers a number of improvements which were incorporated into my post here.</p>\n<p>If you have more questions don&#8217;t hesitate to ask,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9053,
    "post": 368,
    "parent": 0,
    "date": "2013-10-30T01:06:04",
    "content": "<p>If I want to handle concave cases, would you please give me some advice, thx!</p>\n",
    "author": "Dimension",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9052,
    "post": 368,
    "parent": 0,
    "date": "2013-10-29T13:04:06",
    "content": "<p>it starts at ~ 32:27 the IF AC case and similarly the IF check marked as a star</p>\n",
    "author": "ng",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9051,
    "post": 368,
    "parent": 9050,
    "date": "2013-10-29T12:34:07",
    "content": "<p>To make sure there is no confusion on attribution, the video was not mine, but rather the best explanation I had found (Kudos to Casey Muratori for putting it together).</p>\n<p>The triangle case should only have up to 3 ifs, which is two more than the segment case, is this what you are referring to?  If you give me the position in the video (in time) I might be able to answer better.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9050,
    "post": 368,
    "parent": 0,
    "date": "2013-10-28T17:07:16",
    "content": "<p>hello, great tutorial! i just wanted to say(ask) that in the video tutorial you suggest there are two extra IF checks in the triangle case (!?)</p>\n",
    "author": "ng",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f31a2d545ca5f7bd4d152264ce2a7531?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8942,
    "post": 366,
    "parent": 8941,
    "date": "2013-10-23T12:15:18",
    "content": "<p>The number of planes you need to test on is dependent on the number of faces in the two shapes.  For example, if we are trying to test if a box and a tetrahedron are intersecting we need to get all the planes to project onto from both shapes.  Looking at the box first, there are 6 faces.  Normally this would mean 6 planes to test, but since some of the faces are parallel, we only need to test the 3 non-parallel faces.  For the tetrahedron, we have 4 faces.  No faces are parallel in this shape so we have 4 planes to test.  In total we have 7 planes to project both shapes onto.  Once you&#8217;ve done the projection onto a plane, then you can use whats described in the post.</p>\n<p>Having said this, I think I&#8217;ve read somewhere that you can do 3D SAT a little different to save some work, but I don&#8217;t remember where I read that.  A Google search might help here.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8941,
    "post": 366,
    "parent": 0,
    "date": "2013-10-22T21:11:44",
    "content": "<p>Hi,</p>\n<p>i want to use the SAT &amp; MTV for a 3D-Javagame.</p>\n<p>So i have a 3D-Object and project that Object onto a 2D-Plane. After that is done i just follow this tutorial. Am i right with the thought that i have to project the same 3D-Object onto two other 2D-Planes from different angles (top, side, front), in order to get the full 3D-Object? Or do i have to project it even more?</p>\n",
    "author": "Sarasca",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fad45af4eb33ad504fc440236c4805aa?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fad45af4eb33ad504fc440236c4805aa?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fad45af4eb33ad504fc440236c4805aa?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9049,
    "post": 368,
    "parent": 9048,
    "date": "2013-10-14T12:41:57",
    "content": "<p>I&#8217;m sure these algorithms can be implemented in any language you choose.  Just use whatever you are comfortable with.  If you are not comfortable with any, I&#8217;d try to learn a programming language first.</p>\n<p>That said, if you are looking for books or other material on this subject you should be able to find a lot more via google.</p>\n<p>You can contact me directly at <a onclick=\"javascript:pageTracker._trackPageview('/mailto/william.bittle@dyn4j.org');\"  href=\"mailto:william.bittle@dyn4j.org\">william.bittle@dyn4j.org</a>.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9048,
    "post": 368,
    "parent": 0,
    "date": "2013-10-12T02:06:43",
    "content": "<p>My email is <a onclick=\"javascript:pageTracker._trackPageview('/mailto/DK_Alive@163.com');\"  href=\"mailto:DK_Alive@163.com\">DK_Alive@163.com</a><br />\nI want to know which book or material to read , and which language is necessary, though I don&#8217;t get any of these languages like c++, java, but I can get through the pseudo code you post here(several year ago I&#8217;ve learned a little about Visual Basic).<br />\nI don&#8217;t want to learn all of them in a fast way, I want to learn the way of thought about this area, and slowly build the platform on my own, like you did here.<br />\n: )</p>\n",
    "author": "Beginner",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9047,
    "post": 368,
    "parent": 0,
    "date": "2013-10-12T01:53:00",
    "content": "<p>Gorgeous tutorial!<br />\nI am a newcomer in this area and I really want to know where to start.<br />\nI mean if I want to build a platform to perform all the algorithms and do some collision detection experiment , where should I start?<br />\nIf convenient, can you give me your email or skype or msn?<br />\nI&#8217;m so sorry to waste your time but I really need a teacher like you to give me some guide.<br />\nThanks a lot!  : )</p>\n",
    "author": "Beginner",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9046,
    "post": 368,
    "parent": 9045,
    "date": "2013-10-10T12:28:13",
    "content": "<p>You can see my implementation of various shapes in dyn4j <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/tree/master/src/main/java/org/dyn4j/geometry');\"  href=\"https://github.com/dyn4j/dyn4j/tree/master/src/main/java/org/dyn4j/geometry\" title=\"dyn4j - source\" rel=\"nofollow\">here</a> (look at each shape&#8217;s &#8220;getFarthestPoint&#8221; method).</p>\n<p>You can also look at those same shapes to see the implementation of a &#8220;contains&#8221; method.  Just ignore any stuff with Transform if its confusing.</p>\n<p>Each shape type has its own implementation (or inherits the implementation of its super class) of the farthest point.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9045,
    "post": 368,
    "parent": 0,
    "date": "2013-10-10T08:41:52",
    "content": "<p>and curves.</p>\n",
    "author": "Mr.When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9044,
    "post": 368,
    "parent": 0,
    "date": "2013-10-09T12:34:08",
    "content": "<p>To be specific, how to find a farthest point in a circle, how to identify a certain point in a circle.</p>\n",
    "author": "Mr.When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9043,
    "post": 368,
    "parent": 0,
    "date": "2013-10-09T12:30:22",
    "content": "<p>Thx a lot !<br />\nBut I still cannot make it clear how to handle circles in 2D environment and balls in 3D environment, would you please give me some points? : )</p>\n",
    "author": "Mr.When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9042,
    "post": 368,
    "parent": 9041,
    "date": "2013-10-03T12:10:15",
    "content": "<p>I use <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.gimp.org/');\"  href=\"http://www.gimp.org/\" title=\"Gimp\" rel=\"nofollow\">Gimp</a> to do most of my figures.  It&#8217;s a long and tedious process, but I&#8217;ve improved the quality and speed over time.  </p>\n<p>The brute force way to generate the Minkowski Sum is to take all the vertices in the first polygon and add them to all the vertices in the second polygon (<em>subtract</em>, rather than add, if you want the Minkowski Difference) which results in a point cloud.  Next perform a <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Convex_hull_algorithms');\"  href=\"http://en.wikipedia.org/wiki/Convex_hull_algorithms\" title=\"Convex Hull Algorithms\" rel=\"nofollow\">convex hull algorithm</a> on the point cloud to get the resulting shape:</p>\n<pre>\nPolygon p1 = // 1st polygon\nPolygon p2 = // 2nd polygon\n\nfor each vertex in p1\n  for each vertex in p2\n    add p1 + p2 to the point cloud (a list, array, whatever)\n  end for\nend for\n\n// finally perform a Convex Hull algorithm \n// to get the Minkowski Sum's shape\nPolygon result = convexHull(point cloud);\n</pre>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9041,
    "post": 368,
    "parent": 0,
    "date": "2013-10-03T03:13:20",
    "content": "<p>I&#8217;m sorry for my quetions being so basic&#8230; I&#8217;m a greenhand in collision detection. I also want to know how can I image the minkowski difference like you did in this post.<br />\nI really really appreciate it, from your post I know where to start.</p>\n",
    "author": "Mr.When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9040,
    "post": 368,
    "parent": 0,
    "date": "2013-10-03T03:02:07",
    "content": "<p>I&#8217;m so inspired by your tutorial, by the way, how can you make the images here? I mean, what program do you use?</p>\n",
    "author": "Mr.When",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/88962f4d61dbde0bbc64c4f88e1db75c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9261,
    "post": 394,
    "parent": 9260,
    "date": "2013-09-30T12:12:37",
    "content": "<p>Yep, that was a typo.  Thanks for pointing that out.  I have fixed it in the post.</p>\n<p>Of course, you can structure your Edge class however you want, but in this post an Edge is represented by the start and end vertex (the winding direction is important) and the maximum vertex.</p>\n<p>Specifically, the first parameter is the maximum vertex, the second parameter is the first vertex of the edge, and the last parameter is the second vertex of the edge.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9260,
    "post": 394,
    "parent": 0,
    "date": "2013-09-30T07:46:56",
    "content": "<p>Think you have a typo at Example 2<br />\nThe max for the first one should be (6,4)</p>\n",
    "author": "Jamie",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9259,
    "post": 394,
    "parent": 0,
    "date": "2013-09-30T07:27:54",
    "content": "<p>On 2nd thought, when you call the constructor Edge(v,v,v1) taken from above.<br />\nWhat does each value represent?</p>\n",
    "author": "Jamie",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9258,
    "post": 394,
    "parent": 0,
    "date": "2013-09-30T04:45:13",
    "content": "<p>Sorry I didnt read your tutorial till the end. :P</p>\n",
    "author": "Jamie",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9257,
    "post": 394,
    "parent": 0,
    "date": "2013-09-29T23:27:12",
    "content": "<p>First, I would like to thank you for this tutorial.  Been a great help implementing my physics engine.<br />\nBut I was a bit confused at the Edge. How is the edge structured?<br />\nDoes it contain 2 Vector3 that holds the data of the 2 vertices that forms the edge? or is it a vector from A to B?</p>\n",
    "author": "Jamie",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/805c60bf8bd814085444322f6bbfc0e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9256,
    "post": 394,
    "parent": 9255,
    "date": "2013-09-27T02:15:20",
    "content": "<p>The cross product of a vector and 1, in this case, is the same as the cross product of a vector and the z-axis (0, 0, 1).  It turns out that doing this, with the negative z-axis, gives us the counter-clockwise normal of the vector.  So all you need is some way to get the edge&#8217;s normal.  In the 3d case, you might be able to use the face&#8217;s normal that the edge belongs to.</p>\n<p>Other than that, I can see this method needed some additional logic to get working properly (handling all the collision cases).  I think that the cases are narrowed down to two (face-edge and edge-edge?)</p>\n<p>To learn more, search on Sutherland-Hodgman clipping.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9255,
    "post": 394,
    "parent": 0,
    "date": "2013-09-26T19:52:39",
    "content": "<p>Great tutorial!</p>\n<p>I do have one question to William, though. Is there anything significantly different or anything to watch out for in implementing this contact manifold method in 3D? I&#8217;m asking, becasue I followed the tutorial and implemented this method, but it does not seems to behave right in 3 dimensional space. Is there something I&#8217;m missing? The only part which strikes my suspicion is:</p>\n<pre>  \n// get the reference edge normal\nVector2 refNorm = ref.cross(-1.0);\n</pre>\n<p>The way I&#8217;m doing it in 3d is pretty much this:</p>\n<pre>\n// get the reference edge normal\nVector3 refNorm = ref.cross(Vector3(-1.0, 0.0, 0.0));\n</pre>\n<p>Everything else is identical to the tutorial.<br />\nThanks in advance, and once again, amazing tutorial!</p>\n",
    "author": "John",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/24254a0c205572b9a888b38ef69b8c6b?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/24254a0c205572b9a888b38ef69b8c6b?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/24254a0c205572b9a888b38ef69b8c6b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9213,
    "post": 376,
    "parent": 9212,
    "date": "2013-09-02T13:14:45",
    "content": "<p>Part of the confusion here is what the FrictionJoint is designed to do:</p>\n<p>The FrictionJoint in farseer, box2d, dyn4j, etc. is a constraint that drives the linear and angular velocities to zero.  Instead of supplying a friction coefficient, you supply a maximum torque and force that the joint can apply to reduce the velocities.</p>\n<p>Given that, its really just a combination of the <a href=\"http://www.dyn4j.org/2010/07/point-to-point-constraint/\" title=\"Point-to-Point Constraint\" target=\"_blank\" rel=\"nofollow\">Point-to-Point constraint</a> and the <a href=\"http://www.dyn4j.org/2010/12/angle-constraint/\" title=\"Angle Constraint\" target=\"_blank\" rel=\"nofollow\">Angle constraint</a>:</p>\n<pre>[ 1 r_skew -1 -r_skew ]\n[ 0      1  0      -1 }\n</pre>\n<p>This will compute the impulse required to fix the bodies in place (the <a href=\"http://www.dyn4j.org/2010/12/weld-constraint/\" title=\"Weld Constraint\" target=\"_blank\" rel=\"nofollow\">Weld</a> constraint).  But if we clamp the linear and angular impulse by the maximum force/torque it will give the effect of friction.</p>\n<p>In general, the friction constraint constrains all 3 degrees of freedom (for 2D), translation along the x and y and rotation about z.  In this case we can solve them separately to make things easier.  You can also reference the implementation in dyn4j <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/dynamics/joint/FrictionJoint.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/dynamics/joint/FrictionJoint.java\" title=\"Friction Joint - dyn4j\" target=\"_blank\" rel=\"nofollow\">here</a>.  Focus your attention on the solveVelocityConstraints method.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9212,
    "post": 376,
    "parent": 0,
    "date": "2013-09-01T10:20:34",
    "content": "<p>I took a look at this implementation<br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/farseerphysics.codeplex.com/SourceControl/latest#SourceFiles/Dynamics/Joints/FrictionJoint.cs');\"  href=\"http://farseerphysics.codeplex.com/SourceControl/latest#SourceFiles/Dynamics/Joints/FrictionJoint.cs\" rel=\"nofollow ugc\">http://farseerphysics.codeplex.com/SourceControl/latest#SourceFiles/Dynamics/Joints/FrictionJoint.cs</a></p>\n<p>but I don&#8217;t understand how it has been derived. I understand  how  &#8216;C_dot&#8217; has been derived ( quite obvious ) but the  jacobian &#8212; J =   [-I -r1_skew I r2_skew ]    is too misty for me. ( pardon me if it is obvious but  I am unexperienced  about these stuff ). Could you help me with the derivation of the jacobian-matrix for this case ?<br />\nAlso, why are they taking a different equation for the angle-constraint &#8212;<br />\n&#8221;<br />\n// Angle constraint<br />\n    // Cdot = w2 &#8211; w1<br />\n    // J = [0 0 -1 0 0 1]<br />\n    // K = invI1 + invI2<br />\n&#8221;<br />\nwhy not accomodate it in the previous constraint itself?<br />\nAlso,  I  don&#8217;t see any place where they have made use of the  friction-coefficient  between the bodies.</p>\n",
    "author": "seeanvit",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9211,
    "post": 376,
    "parent": 0,
    "date": "2013-09-01T04:54:24",
    "content": "<p>Oops, I was making a silly mistake somewhere else in the code. It is working fine now :) .<br />\njacobianderivative in  the case of my solver is the time-derivative of the jacobian matrix .  Deriving it is simple       ( after I gave it some clear thinking )  , simply take each term of the jacobian-matrix and find its time-derivative.           </p>\n<p>Thanks for such descriptive post William, It helped me a lot in understanding  how the constraint deriving works, (specially the part where you find the &#8216;jacobian&#8217;  from &#8216;C_dot&#8217;  by separating the velocities)  :)</p>\n<p>I am also trying add friction-force to  STEP .  Could you help me out in deriving  the values of  &#8216;C&#8217; ,  &#8216;C_dot&#8217;,   and  &#8216;J&#8217; for that?</p>\n",
    "author": "seeanvit",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9210,
    "post": 376,
    "parent": 9209,
    "date": "2013-08-29T11:52:53",
    "content": "<p>Hmm, I&#8217;m not familiar with STEP, but perhaps I can give some pointers.  It looks like these three steps are computing the right side of the <a href=\"http://www.dyn4j.org/2010/07/equality-constraints/\" title=\"Equality Constraints\" target=\"_blank\" rel=\"nofollow\">Equality Constraint</a>:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/eqc14.png\" alt=\"Equality Constraint Formulation\" /></p>\n<p>I could be wrong, but I think the info->jacobianDerivative is referring to what I have derived in this post.<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/12/pulley-12.png\" alt=\"Pulley Jacobian (velocity)\" /></p>\n<p>From the source there its hard to tell what that first and last operations are.  I&#8217;m guessing they are including external forces or some sort of bias factors or another ODE for stability.  </p>\n<p>You can see my full implementation <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/dynamics/joint/PulleyJoint.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/dynamics/joint/PulleyJoint.java\" title=\"Pulley Joint - dyn4j\" target=\"_blank\" rel=\"nofollow\">here</a> if you would like a reference.  The meat is in the <code>initializeConstraints</code> and the <code>solveVelocityConstraints</code> methods.</p>\n<p>Hope that helps,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9209,
    "post": 376,
    "parent": 0,
    "date": "2013-08-29T03:43:18",
    "content": "<p>Actually, I am working on STEP (a physics simulator). Its constraintsolver  calculates the  &#8216;b&#8217;  vector  as :<br />\n    b = info-&gt;jacobian * info-&gt;acceleration;<br />\n    b += info-&gt;jacobianDerivative * info-&gt;velocity;<br />\n    b = &#8211; (b + info-&gt;value + info-&gt;derivative);</p>\n<p>(&#8216;info&#8217;  is  a pointer to a structure  here)</p>\n",
    "author": "seeanvit",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9208,
    "post": 376,
    "parent": 9207,
    "date": "2013-08-19T12:17:03",
    "content": "<p>I&#8217;m not sure I understand what you are asking.  Why do you need the time derivative of the Jacobian?  For this particular instance we only need the time derivative of the constraint, then we identify the Jacobian and then plug it into our equality constraints formulation.  Can you elaborate a bit more one what you are looking for?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 9207,
    "post": 376,
    "parent": 0,
    "date": "2013-08-18T10:35:22",
    "content": "<p>Hi, I am trying to implement Pulley joint in a physics simulator. This post has been very helpful.<br />\nCould you derive the expression for (del_J / del_t) i.e. the time derivative of the jacobian matrix.<br />\nMy implementation is giving very erratic behaviour which I suspect is because of the incorrect value of<br />\ntime-derivative of the jacobian-matrix.</p>\n",
    "author": "seeanvit",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f3d3fb9d1364908a196c799b08f8e6d6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=300"
}, {
    "id": 8940,
    "post": 366,
    "parent": 0,
    "date": "2013-08-07T04:24:55",
    "content": "<p>Usually I do not read post on blogs, but I wish to say that this write-up very forced me to take a look at and do so! Your writing style has been surprised me. Thank you, very nice article.</p>\n",
    "author": "ÈªíÊú¨„ÄÄÁû≥",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/82b14153858ec4fe18a18c4ed8d79d3d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/82b14153858ec4fe18a18c4ed8d79d3d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/82b14153858ec4fe18a18c4ed8d79d3d?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9206,
    "post": 375,
    "parent": 0,
    "date": "2013-07-12T07:28:47",
    "content": "<p>Pretty! This has been a really wonderful post. Many thanks for providing<br />\nthese details.</p>\n",
    "author": "otuliny",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e2a8f93f0f9e347b9dd38027ae26e44f?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e2a8f93f0f9e347b9dd38027ae26e44f?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e2a8f93f0f9e347b9dd38027ae26e44f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=295"
}, {
    "id": 8939,
    "post": 366,
    "parent": 0,
    "date": "2013-06-05T12:51:46",
    "content": "<p>Hey,</p>\n<p>Very great tutorial, thanks a lot.</p>\n<p>I¬¥ve implemented a SAT but it does not work completely properly.<br />\nI sent you an E-Mail with my code. Maybe you are able and have the time to find the mistake even though it is no java code.</p>\n<p>Thanks, Benno</p>\n",
    "author": "Benno",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4fba6348a74a8efc27494e5b0cc6efa0?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4fba6348a74a8efc27494e5b0cc6efa0?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4fba6348a74a8efc27494e5b0cc6efa0?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8938,
    "post": 366,
    "parent": 0,
    "date": "2013-05-16T16:05:35",
    "content": "<p>Thanks!! Like always it was a stupid little error (the order of the convex points was wrong) and now it works great! Thanks!</p>\n",
    "author": "Bas",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9039,
    "post": 368,
    "parent": 9038,
    "date": "2013-05-06T20:33:47",
    "content": "<p>Once you are in the while loop the algorithm will choose the next direction in the containsOrigin method: d.set(&#8230;).  So the only direction you need to choose is the first.  This one can be chosen arbitrarily, but you would want to choose a direction which would allow the algorithm to exit early.  For example, using the vector from the center of shape1 to the center of shape2 is a good option.  This is what I used in the post (Iteration section, before iteration 1).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9038,
    "post": 368,
    "parent": 0,
    "date": "2013-05-04T22:05:05",
    "content": "<p>How can i choose the direction (Vector d) to get the farthest point in A, i know the direction of the farthest point of B will be d.neg().</p>\n<p>Please i need help with this.</p>\n",
    "author": "Hector",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c28dd5d7e3d89c8635fc5b4b371fa4b1?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c28dd5d7e3d89c8635fc5b4b371fa4b1?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c28dd5d7e3d89c8635fc5b4b371fa4b1?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8937,
    "post": 366,
    "parent": 8936,
    "date": "2013-04-23T12:21:35",
    "content": "<p>It&#8217;s hard to know what exactly might be the problem without seeing some code, but here are some things to check:</p>\n<ol>\n<li>How are you calculating the overlap?  For instance, I do\n<pre>Math.min(p1.max, p2.max) - Math.max(p1.min, p2.min);</pre>\n<p> in my getOverlap method.</li>\n<li>Are the axes normalized? (they should be if you want accurate MTVs)</li>\n</ol>\n<p>You can either post your code here in a comment or <a onclick=\"javascript:pageTracker._trackPageview('/mailto/william.bittle@dyn4j.org');\"  href=\"mailto:william.bittle@dyn4j.org\" title=\"Email Me\" rel=\"nofollow\">send it to me privately</a>.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8936,
    "post": 366,
    "parent": 0,
    "date": "2013-04-23T10:01:45",
    "content": "<p>You&#8217;ve been a great help William, i only got one problem.</p>\n<p>My code does recognize intersection perfectly, but when looking at the MTV i sometimes get some weird results. For example, on one side of a rectangle i collide perfectly and i gives me the correct MTV, but when i&#8217;m on the other side of the rectangle (which is 20px thick), it gives me and MTV of &gt; 20, as if it is colliding on the other side. When i invert my Perpendicular function for my vectors, the problem is also inverted. Any idea what the problem could be? I&#8217;m at a dead end.</p>\n<p>Cheers,<br />\nBas</p>\n",
    "author": "Bas",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/ffa6321c115c34c279d6a21731bdb222?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8935,
    "post": 366,
    "parent": 0,
    "date": "2013-03-10T05:54:05",
    "content": "<p>found the issue!</p>\n<p>had a bug in my get axes.. should be i + 1 not 1 in the ternary</p>\n",
    "author": "jwilliams",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8934,
    "post": 366,
    "parent": 0,
    "date": "2013-03-10T05:10:59",
    "content": "<p>Not quite sure why my image/code formatting didn&#8217;t go through. Here is a direct link to the image.</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/i.imgur.com/uaNVPks.png');\"  href=\"http://i.imgur.com/uaNVPks.png\" rel=\"nofollow ugc\">http://i.imgur.com/uaNVPks.png</a></p>\n",
    "author": "jwilliams",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8933,
    "post": 366,
    "parent": 0,
    "date": "2013-03-10T05:08:37",
    "content": "<p>William,</p>\n<p>Thank you for this article. It&#8217;s been quite a help in trying to implement SAT.</p>\n<p>I&#8217;ve run into an issue in my implementation that I can&#8217;t seem to figure out after 2 days banging my head on the keyboard here and am hoping you could shed some light on what is going on.</p>\n<p>Below is an image which depicts the issue. I am getting false positives on<br />\noverlap detection with shapes such as these, however something like a line,<br />\nsquare, rectangle etc. all work perfectly fine. The current position of the small box is as close as I am able to get to the nearest face without an overlap detection.</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/imgur.com/uaNVPks');\"  href=\"http://imgur.com/uaNVPks\" rel=\"nofollow\"></a></p>\n<p>Below is my current code for SAT detection in C#</p>\n<pre>\r\npublic static class SATHelper\r\n    {\r\n        struct Projection\r\n        {\r\n            public double Min;\r\n            public double Max;\r\n\r\n            public bool Overlaps(Projection other)\r\n            {\r\n                if (other.Min &gt; this.Max ||\r\n                        this.Min &gt; other.Max)\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        public static bool Overlaps(VertexPositionColor[] anchor, VertexPositionColor[] other)\r\n        {\r\n            List anchorAxes = SATHelper.GetAxes(anchor);\r\n            List otherAxes = SATHelper.GetAxes(other);\r\n\r\n            for (int i = 0; i &lt; anchorAxes.Count; i++)\r\n            {\r\n                Vector2 axis = anchorAxes[i];\r\n\r\n                //  project both shapes onto the axis\r\n                Projection anchorProjection = SATHelper.Project(axis, anchor);\r\n\r\n                Projection otherProjection = SATHelper.Project(axis, other);\r\n\r\n                if (!anchorProjection.Overlaps(otherProjection))\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i &lt; otherAxes.Count; i++)\r\n            {\r\n                Vector2 axis = otherAxes[i];\r\n\r\n                //  project both shapes onto the axis\r\n                Projection anchorProjection = SATHelper.Project(axis, anchor);\r\n\r\n                Projection otherProjection = SATHelper.Project(axis, other);\r\n\r\n                if (!anchorProjection.Overlaps(otherProjection))\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            Debug.WriteLine(&quot;Overlap &quot; + DateTime.Now.Millisecond);\r\n            return true;\r\n        }\r\n\r\n        private static Projection Project(Vector2 axis, VertexPositionColor[] vertices)\r\n        {\r\n            SATHelper.NormalizeVector(axis);\r\n\r\n            double min = GetDotProduct(axis, new Vector2(vertices[0].Position.X, vertices[0].Position.Y));\r\n            double max = min;\r\n\r\n            for (int i = 0; i &lt; vertices.Length; i++)\r\n            {\r\n                double p = GetDotProduct(axis, new Vector2(vertices[i].Position.X, vertices[i].Position.Y));\r\n\r\n                if (p  max)\r\n                {\r\n                    max = p;\r\n                }\r\n            }\r\n\r\n            Projection projection = new Projection();\r\n            projection.Min = min;\r\n            projection.Max = max;\r\n\r\n            return projection;\r\n        }\r\n\r\n        private static void NormalizeVector(Vector2 vector)\r\n        {\r\n            if (float.IsNaN(vector.X) || float.IsNaN(vector.Y))\r\n            {\r\n                return;\r\n            }\r\n\r\n            float length = vector.Length();\r\n            vector.X /= length;\r\n            vector.Y /= length;\r\n        }    \r\n\r\n        private static double GetDotProduct(Vector2 v1, Vector2 v2)\r\n        {\r\n            double xDp = v1.X * v2.X;\r\n            double yDp = v1.Y * v2.Y;\r\n\r\n            return xDp + yDp;\r\n        }\r\n\r\n        //  returns normals for the shapes edges\r\n        private static List GetAxes(VertexPositionColor[] vertices)\r\n        {\r\n            List axes = new List();\r\n\r\n            for (int i = 0; i &lt; vertices.Length; i++)\r\n            {\r\n                VertexPositionColor v1 = vertices[i];\r\n                Vector2 v1Vector = new Vector2(v1.Position.X, v1.Position.Y);\r\n\r\n                VertexPositionColor v2 = vertices[i + 1 == vertices.Length ? 0 : 1];\r\n                Vector2 v2Vector = new Vector2(v2.Position.X, v2.Position.Y);\r\n\r\n                Vector2 edge = v2Vector - v1Vector;\r\n\r\n                // This could cause problems later\r\n                Vector2 normal = new Vector2(-edge.Y, edge.X);\r\n\r\n                axes.Add(normal);\r\n            }\r\n\r\n            return axes;\r\n        }\r\n    }\r\n</pre>\n<p>Any help or insight into what may be causing the issue would be swell!</p>\n<p>Thanks,</p>\n<p>Justin</p>\n",
    "author": "jwilliams",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3dcdee8f416bcbe67ceae3a04e11d872?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8932,
    "post": 366,
    "parent": 8931,
    "date": "2013-03-07T13:15:31",
    "content": "<p>I didn&#8217;t read it all but it seems well constructed and easy to follow.  I especially like the first half of the paper that explains some preliminaries.  I think this is really useful to those just getting into the field.</p>\n<p>If I understand correctly, the inequality is basically equivalent to what is done in most engines today.  They take the vector from the center of body1 to the center of body2 and project (dot product) the MTV&#8217;s normal onto it.  If the projection is negative then the normal is reversed, otherwise its left alone.  The difference is that you are using the already computed projections to do the same thing (saving one or two operations).  The thing I like about this the most is simply: it&#8217;s actually mentioned (details like this often trip up those new to the subject).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8931,
    "post": 366,
    "parent": 0,
    "date": "2013-03-06T05:37:39",
    "content": "<p>Hey I just wanted to share this paper that I wrote a while ago on the 2D Rigid Body Physics/Collision Detection.</p>\n<p>Note the inequality test on pages 20-22 of the PDF. I haven&#8217;t seen this solution anywhere else (I discovered it while thinking a lot about the SAT)</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box.com/s/wyfbpomd17j5tdxgvnlr');\"  href=\"https://www.box.com/s/wyfbpomd17j5tdxgvnlr\" rel=\"nofollow ugc\">https://www.box.com/s/wyfbpomd17j5tdxgvnlr</a></p>\n",
    "author": "Caleb Helbling",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/47c39795288f1b6437be850f2f90a8c7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/47c39795288f1b6437be850f2f90a8c7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/47c39795288f1b6437be850f2f90a8c7?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8930,
    "post": 366,
    "parent": 8929,
    "date": "2013-02-16T00:53:45",
    "content": "<p>The vectors to test against are the normals of both shapes.  For example, let&#8217;s say your first shape is a triangle with coordinates: a = (0, 3), b = (0, 1) and c = (1, 2).  From this we can define the edge vectors:</p>\n<pre>\nab = b - a = (0, 1) - (0, 3) = (0, -2)\nbc = c - b = (1, 2) - (0, 1) = (1, 1)\nca = a - c = (0, 3) - (1, 2) = (-1, 1)\n</pre>\n<p>Now that we have the three edge vectors we can get their normals (in 2D) by switching the x-y coordinates and negating one (There are two normals to an edge, one that points inward and one that points outward; you will want the one that points outward. Depending on the winding of the shape you will negate either the y or x. In the example here, I have anti-clockwise winding, so I negate the y.):</p>\n<pre>\nnormal1 = ab.perp() = (ab.y, -ab.x) = (-2, 0)\nnormal2 = bc.perp() = (bc.y, -bc.x) = (1, -1)\nnormal3 = ca.perp() = (ca.y, -ca.x) = (1, 1)\n</pre>\n<p>Hope this clears things up,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8929,
    "post": 366,
    "parent": 0,
    "date": "2013-02-15T20:58:34",
    "content": "<p>Hi,<br />\nI&#8217;ve been looking into SAT for a while but still don&#8217;t understand the method used to get the vector the vertexes are tested against?</p>\n<p>Harry</p>\n",
    "author": "Harry",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7df80878da68d22e0a58ea0df029b138?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7df80878da68d22e0a58ea0df029b138?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7df80878da68d22e0a58ea0df029b138?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8928,
    "post": 366,
    "parent": 8927,
    "date": "2013-02-15T13:21:49",
    "content": "<p>I have been meaning to go back through my posts and update some of these images anyway.  I have updated Figure 7 to be a little easier to understand by labeling the edges and their associated axes of projection.</p>\n<p>Hopefully that will clean up some confusion,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8927,
    "post": 366,
    "parent": 0,
    "date": "2013-02-14T17:07:59",
    "content": "<p>Hi William,</p>\n<p>I&#8217;m a little confused about figure 7. It seems that instead of being projected onto the normals, the shapes are projected onto the edges themselves. I hope you can help me.</p>\n<p>Thanks in advance, John</p>\n<p>(By the way, this is the best SAT tutorial I could find on the web, thanks a lot!)</p>\n",
    "author": "John",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/ddd98f884ce6ba277c4c3d52f062c19e?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/ddd98f884ce6ba277c4c3d52f062c19e?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/ddd98f884ce6ba277c4c3d52f062c19e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9221,
    "post": 377,
    "parent": 9220,
    "date": "2013-02-11T12:39:42",
    "content": "<p>Just to give a few more details (I&#8217;m not sure if I answered your question fully).  The typical flow is:<br />\n  1. Apply external forces/torques to get new velocities.<br />\n  2. Initialize constraints (compute the K matrices).<br />\n  3. Solve velocity constraints using the K matrix.  Using an iterative approach this will be called a number of times to reach a global solution, but since the K matrix is dependent on position and mass rather than velocity, it doesn&#8217;t need to be recomputed.<br />\n  4. Apply the velocities to get new positions<br />\n  5. Solve position constraints (position correction).  If you are going for the iterative approach, you need to be careful here.  To do this right you will need to recompute the K matrix on each call since the K matrix is dependent on the position and the position is changing at the end of each call. (In some cases, like the angle joint, this isn&#8217;t the case since K only includes the mass).  Since this is a heavy process, you can probably get away with using the same K matrix without much loss in accuracy in most cases.</p>\n<p>Then repeat.  Applying the position correction will be seen in the computation of the K matrix and that&#8217;s how it gets fed back into the velocity constraint upon the next iteration.</p>\n<p>Hope that helps,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9220,
    "post": 377,
    "parent": 0,
    "date": "2013-02-09T00:56:22",
    "content": "<p>Thanks William. </p>\n<p>Yes, that&#8217;s what I mean by bias. It&#8217;s computed once per frame before updating the velocities.</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9219,
    "post": 377,
    "parent": 9218,
    "date": "2013-02-08T13:12:23",
    "content": "<p>I&#8217;m not sure I understand your question completely, but let me take a stab at answering.</p>\n<p>If you have solved the velocity constraint as shown above, you will experience drift at the limits.  If you want to cancel out the drift you need to solve the position constraint:</p>\n<p>Solve the following (so C will be a matrix,<br />\nbasically the relative rotation):<br />\nC = Ra &#8211; Rb &#8211; Ri</p>\n<p>Then solve using the K matrix (from the<br />\nvelocity constraint derivation):<br />\nJ = C * K<sup>-1</sup></p>\n<p>Then apply to the bodies:<br />\nBa.R += J * Ia<sup>-1</sup><br />\nBb.R -= J * Ib<sup>-1</sup></p>\n<p>This will feed the error in the rotation back into the bodies which will be taken care of in the next velocity constraint solving iteration on the next world step.</p>\n<p>If you are computing this before solving the velocity constraint (is that what you mean by &#8220;bias&#8221;?), just apply it to the bodies first, then solve the velocity constraint.</p>\n<p>Hope that helps,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9218,
    "post": 377,
    "parent": 0,
    "date": "2013-02-08T05:32:14",
    "content": "<p>Thanks William, I have got the hinge constraint to work, however I have a question about the derivation for an angle joint. You have started off with a matrix, then used the angular velocity to solve for lambda. However to compute the bias to prevent drift, the equation is as follows:</p>\n<p>bias = beta/dt * C where C is a rotation matrix in this case and the bias required is a vector, due to the angular velocities being vectors.</p>\n<p>Given C = Ra &#8211; Rb &#8211; Ri and the equation to solve for the impulse is:</p>\n<p>JM^-1JT*lambda = -Jvi &#8211; bias</p>\n<p>lambda = (-wa+wb-bias) (Ia^-1 + Ib^-1)^-1</p>\n<p>So we are subtracting a matrix from vectors (-wa+wb-[bias]) and this is undefined. I am definitely missing something, any thoughts?</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 8926,
    "post": 366,
    "parent": 8925,
    "date": "2013-01-31T12:19:57",
    "content": "<p>I can&#8217;t see the image that you posted.  I keep getting an error that says its unavailable.  Can you send another link or send it to me directly?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8925,
    "post": 366,
    "parent": 0,
    "date": "2013-01-31T03:59:59",
    "content": "<p>I think just the normals of edges are not sufficient for a test. For instance:</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/farm9.staticflickr.com/8195/8430875045_e02d27aef7_b.jpg');\"  href=\"http://farm9.staticflickr.com/8195/8430875045_e02d27aef7_b.jpg\" rel=\"nofollow\"></a></p>\n",
    "author": "shuangwhywhy",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/25a14cdd82f0f4e5c6db1c759d4a742b?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/25a14cdd82f0f4e5c6db1c759d4a742b?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/25a14cdd82f0f4e5c6db1c759d4a742b?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9153,
    "post": 370,
    "parent": 9152,
    "date": "2013-01-22T12:48:27",
    "content": "<p>Sure, but how do you know how much to move them without first knowing how much they are penetrating?  In addition, what happens when two bodies at rest (both have zero velocity) and are overlapping?</p>\n<p>Can you elaborate a little more on what you are describing?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9152,
    "post": 370,
    "parent": 0,
    "date": "2013-01-22T01:59:25",
    "content": "<p>After a collision, why not separate objects by moving them back along their velocity vectors?  This should get the objects back to their actual positions at the TOI (time of impact), which is clearly more precise.</p>\n",
    "author": "honestann",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/64d21be2185f18bef8cb2ab9a3bd2eed?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/64d21be2185f18bef8cb2ab9a3bd2eed?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/64d21be2185f18bef8cb2ab9a3bd2eed?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9230,
    "post": 438,
    "parent": 0,
    "date": "2013-01-05T01:53:19",
    "content": "<p>Thanks William, that does clear things up. </p>\n<p>I have managed to implement the 3D version, with two restricted tangent axis, thereby ending up with a 2&#215;2 matrix. The only difference is for 3D, you need to build an orthogonal basis from the supplied legal axis of movement and derive a second constraint identical to the one you derived.</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=348"
}, {
    "id": 9229,
    "post": 438,
    "parent": 9228,
    "date": "2013-01-04T14:09:27",
    "content": "<p>Yeah this is one of the more difficult parts to understand.  Basically, to perform the derivative, we need to know how u is defined (in terms of what? A single body? Both bodies? Is it fixed?).  Since we are doing pair-wise constraints we know that we want to have u in terms of both of the bodies so that their <em>relative</em> motion is constrained.  We can define the <em>position</em> constraint using the initial relative position vector of the two bodies relative to the anchor point (this is why we still have to supply an anchor).<br />\nTake a look at this image:</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/12/line-arbitrary-vector.png\" style=\"border: 0px;\"/></p>\n<p>If either body moves (in this case I move only body b), we can&#8217;t recompute u, since the constraint would always be satisfied.  That means that we compute u once, when the constraint is created, from the initial positions of the bodies.  But if we are doing that, why can&#8217;t we just supply an axis rather than compute it? The answer is, we can, because the creator of the constraint could do the same thing if they just positioned the bodies appropriately upon creation of the constraint.  So if I were to position b in the second position in my image above initially, I could make the constraint use (1, 0) as the axis rather than (8, 6).</p>\n<p>I hope that clears things up a bit,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=348"
}, {
    "id": 9228,
    "post": 438,
    "parent": 0,
    "date": "2013-01-03T12:59:50",
    "content": "<p>Thanks William. I am having trouble with some parts of the derivation.</p>\n<p>I understand as follows:</p>\n<p>We have u initially as the relative position between the two bodies, which is transformed with one of the bodies.</p>\n<p>t is always perpendicular to u</p>\n<p>In your code, you are using the specified legal axis, and the tangent axis, and additionally, the relative position.</p>\n<p>So since you have the original equation as</p>\n<p>C = t.u = t.(xa + ra &#8211; xb &#8211; rb)<br />\ndC/dt = t.(va + Cross(wa,ra) &#8211; vb &#8211; Cross(wb,rb)) + Cross(wb,t).u</p>\n<p>and u = xa + ra &#8211; xb &#8211; rb</p>\n<p>Where do you incorporate the specified axis in the equation as you do in the code? All I see is t vectors in your derivation and the relative position u, and not the actual legal axis of movement.</p>\n<p>I understand that even if we specify the legal axis upon initialisation, this axis and the tangent vector to this axis can change with the movement of one of the bodies.</p>\n<p>Contrary to a revolute joint, where the relative position is always zero, we are saying the relative position between the two bodies can be non-zero only if the tangent vector is perpendicular to this relative position vector.</p>\n<p>Thanks for your help</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=348"
}, {
    "id": 9227,
    "post": 438,
    "parent": 9226,
    "date": "2013-01-02T13:52:02",
    "content": "<p>The u vector should be the locally transformed world axis (and normalized) passed to the joint. So you should be able to specify the axis of the joint (but using the center of masses is fine). You will also need the local tangent of that vector as well. You will also need an anchor point for the joint. This will allow you to compute the r vectors for both bodies (we need the r vectors so we can determine if the bodies have deviated from the tangent).</p>\n<p>The local axis and tangent should be computed on initialization. Then in each iteration we transform those into world coordinates using the rotation matrix (only) of the body that we fixed the axis with.</p>\n<p>One thing that may be tricky is solving the system. The b vector is going to be (which I didn&#8217;t expand in the post):</p>\n<p>b = -Jv<br />\nb = [ t<sup>T</sup> r<sub>a</sub> x t -t<sup>T</sup> -(r<sub>b</sub> + u) x t ] * [ v<sub>a</sub> w<sub>a</sub> v<sub>b</sub> w<sub>b</sub> ]<sup>T</sup><br />\nb = t<sup>T</sup> * v<sub>a</sub> + (r<sub>a</sub> x t) * w<sub>a</sub> &#8211; t<sup>T</sup> * v<sub>b</sub> &#8211; ((r<sub>b</sub> + u) x t) * w<sub>b</sub></p>\n<p>Where u and t are the world space axis and tangent of the joint that we have from initialization.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=348"
}, {
    "id": 9217,
    "post": 377,
    "parent": 9216,
    "date": "2013-01-02T13:25:26",
    "content": "<p>Just to clarify, are you having trouble with the limits or just constraining the 5 DOF.  I would try the joint without limits and see if you can get it to work without it locking, then add in the limits.  Limits, especially rotational limits are annoying to get right (at least in my <em>limited</em> experience).</p>\n<p>What you describe here seems to be correct. When you do the transformation of world to local coordinates you should be including the body rotation too.  Also, on each iteration be sure to transform the local vectors and anchors properly.  I had a few problems with this myself and it ended up being a problem in my local<=>world transformation code.</p>\n<p>// assume that a body contains an augmented<br />\n// transformation matrix<br />\nT = [ R<sub>0,0</sub> R<sub>0,1</sub> R<sub>0,2</sub> | x ]<br />\n    [ R<sub>1,0</sub> R<sub>1,1</sub> R<sub>1,2</sub> | y ]<br />\n    [ R<sub>2,0</sub> R<sub>2,1</sub> R<sub>2,2</sub> | z ]<br />\n// to transform from local coordinates to world<br />\n// you simply multiply the matrix with the<br />\n// vector/point that you want to transform<br />\nlocalV = [ x ]<br />\n         [ y ]<br />\n         [ z ]<br />\n         [ 1 ]<br />\nworldV = T * localV<br />\n// then to transform back you need to invert<br />\n// the transformation matrix to do this, it&#8217;s<br />\n// best not to use the augmented matrix since a<br />\n// <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Rotation_matrix');\"  href=\"http://en.wikipedia.org/wiki/Rotation_matrix\" title=\"Rotation Matrix\" target=\"_blank\" rel=\"nofollow\">rotation matrix</a> can be easily inverted<br />\n// by taking the transpose:<br />\nR<sup>-1</sup> = R<sup>T</sup><br />\nT<sub>x,y,z</sub><sup>T</sup> = [ x y z ]<br />\nlocalV = R<sup>-1</sup> * (worldV &#8211; T<sub>x,y,z</sub>)</p>\n<p>You may also want to consider looking at using Quaternions rather than using Euler angles since they can solve some <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Gimbal_lock');\"  href=\"http://en.wikipedia.org/wiki/Gimbal_lock\" title=\"Gimbal Lock\" target=\"_blank\" rel=\"nofollow\">gimbal lock</a> problems (they may come with their own problems too though).</p>\n<p>I think you only need the hinge axis in one body&#8217;s coordinates since it can only be fixed in one coordinate frame.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9037,
    "post": 368,
    "parent": 9036,
    "date": "2013-01-02T12:53:28",
    "content": "<p>I am normalizing the vectors. You can normalize a vector by doing the following:</p>\n<pre>\nx = vector.x;\ny = vector.y;\n// z = vector.z;\n// get the length of the vector\n// just add a \"+ z<sup>2</sup>\" if you are\n// in 3D\nl = sqrt(x<sup>2</sup> + y<sup>2</sup> /* + z<sup>2</sup> */)\n// then normalize the vector by dividing by\n// the length\nvector.x /= l\nvector.y /= l\n// vector.z /= l;\n</pre>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Euclidean_vector#Length');\"  href=\"http://en.wikipedia.org/wiki/Euclidean_vector#Length\" title=\"Vector Normalization\" target=\"_blank\" rel=\"nofollow\">Here&#8217;s a wikipedia link</a></p>\n<p>This process turns an arbitrary length vector into a vector of length 1.</p>\n<p>The GJK algorithm as described here doesn&#8217;t require normalization however (the GJK distance algorithm does). But it was done in the computations to aid the reader in plotting/visualizing the computed vectors.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9226,
    "post": 438,
    "parent": 0,
    "date": "2013-01-02T07:44:52",
    "content": "<p>Hi William,</p>\n<p>I have a a body at (-20,0,0) and an immovable body at (0,41,0). The world anchor point is at (-20,0,0). Therefore the initial world u vector should be along the line connecting the two body&#8217;s center points? I am having trouble getting the simulation correct and trying the 2D case first.</p>\n<p>Also, at each frame I have Cross(wa, t) in the velocity equation, therefore the tangent vector should change with body A and be fixed relative to body B. </p>\n<p>Thanks for your help</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=348"
}, {
    "id": 9036,
    "post": 368,
    "parent": 0,
    "date": "2012-12-29T08:25:19",
    "content": "<p>Hi William,<br />\nExcelent post! Could you help me with this question?</p>\n<p>I don&#8217;t understand how do you get (-0.573, -0.819) from (-336, -480), or how do you get (0.316, -0.948) from (32, -96) in one step. I understand that both pairs have the same reason (x/y), but, how do you exactly calculate those points? And, how do I interpret these points ((-0.573, -0.819) or (0.316, -0.948))? Because I see that you use (-336, -480) or (32, -96) in next iterations.</p>\n<p>Thanks, and sorry but my english isn&#8217;t very good.</p>\n",
    "author": "Alejandro",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4262825a179c196f6707bcee74e227eb?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4262825a179c196f6707bcee74e227eb?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4262825a179c196f6707bcee74e227eb?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9216,
    "post": 377,
    "parent": 0,
    "date": "2012-12-28T23:05:17",
    "content": "<p>Same here, references are hard to find. It behaves well until the constraint is violated about the restricted axis. </p>\n<p>Perhaps someone else has had this problem before, I follow this process:</p>\n<p>Initialise the joint:</p>\n<p>1) Transform the world anchor (anchor &#8211; body.position) and world free hinge axis into local coords of each body<br />\n2) build an orthogonal basis consisting of the restricted axes (tangent1 and tangent2) from the local free hinge axis of body1</p>\n<p>Each frame:</p>\n<p>3) Transform (anchor &#8211; body.position) into world coords of each body<br />\n4) Transform the local hinge axis into world coords of each body<br />\n5) Transform each tangent vector into world coords of body1<br />\n6) Compute the constraint, bias, and K matrix</p>\n<p>At each impulse iteration:<br />\n7) Solve for lambda as with other joints<br />\n8) Update the velocities of each body</p>\n<p>THe only problem I see is the world hinge axis of body2 is not used but I don&#8217;t see where to actually use it. Can anyone point me in the right direction?</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9215,
    "post": 377,
    "parent": 9214,
    "date": "2012-12-28T15:10:15",
    "content": "<p>Yeah, that sounds reasonable.  I think a lot of 3D engines offer a generic 6DOF joint in which each degree of freedom is defined separately; sort of like what you describe.  Is it not working?</p>\n<p>I can&#8217;t really offer much help unfortunately, as I haven&#8217;t done any 3D joint derivations (nor can I find any good references&#8230;)</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9214,
    "post": 377,
    "parent": 0,
    "date": "2012-12-28T10:42:54",
    "content": "<p>Hi William,</p>\n<p>I am having trouble with the hinge constraint. Which equations do you use in addition to the revolute joint constraint?</p>\n<p>I have C1 = xa + ra &#8211; xb &#8211; rb (rev joint)</p>\n<p>C2 = t1.(thetaA &#8211; thetaB) = 0<br />\nC3 = t2.(thetA &#8211; thetaB) = 0</p>\n<p>Where the dot product between the two axes perpendicular to the free hinge axis and the change in orientation between the two bodies is zero</p>\n<p>I now have the combined Jacobian for C2 and C3 as follows</p>\n<p>JC2 = [ 0 t1T 0 -t2T ]<br />\nJC3 = [ 0 t2T 0 -t2T ]</p>\n<p>Using the fact that the dot product with a vector is equivalent to the inverse of that vector multiplied by it</p>\n<p>IS this how you would go about this? Thanks for your input</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=330"
}, {
    "id": 9205,
    "post": 375,
    "parent": 9204,
    "date": "2012-12-22T01:24:25",
    "content": "<p>The key to angular limits is to use a reference angle.  The reference angle should be the original angle between the two bodies when the joint is created.</p>\n<p>refAngle = b1.angle &#8211; b2.angle;<br />\nangleDiff = b1.angle &#8211; b2.angle &#8211; joint.refAngle;</p>\n<p>The reference angle allows the 2 body system to rotate <em>together</em> without it affecting the joint.</p>\n<p>Another thing to look at is the way you represent the body angles.  For example, math functions like arctan2 give an angle in the range [-pi, pi] which could cause problems at those limits (since joint will all of the sudden think its way far from being solved).  Let&#8217;s say your limits are 30 to 270, when the angle reaches 180 it will flip to a negative (-170 for example).  This could explain the locking that you see.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=295"
}, {
    "id": 9204,
    "post": 375,
    "parent": 0,
    "date": "2012-12-21T04:24:11",
    "content": "<p>Hi William,</p>\n<p>I would like to create a hinge joint, which restricts rotation about one arbitrary axis between two angles, which keeps rotating with the original owning body. In addition to applying a revolute joint constraint at a common point between the two bodies, I have the following:</p>\n<p>I have tried restricting an angle joint as follows:<br />\n1) Convert the local axis of each into world coords<br />\n2) Project the difference in angle onto the axis of rotation<br />\n3) If difference is outside the angle limits, apply the constraint</p>\n<p>\tAMG3DVector4 worldAxis1 = Rot1*localAxis1;<br />\n\tAMG3DVector4 worldAxis2 = Rot2*localAxis2;</p>\n<p>        AMG3DVector4 ta = m_pRigidBody1-&gt;orientation;<br />\n\tAMG3DVector4 tb = m_pRigidBody2-&gt;orientation;</p>\n<p>\tAMG3DVector4 currAngleDiff = ta &#8211; tb;</p>\n<p>        AMG3DScalar dtdotaxis = currAngleDiff.dot(worldAxis1);</p>\n<p>\tif(dtdotaxis&gt;=lowerLimit &amp;&amp; dtdotaxis&lt;=upperLimit) {<br />\n\t\tskipConstraint = true;<br />\n\t\treturn;<br />\n\t}</p>\n<p>\t// Compute the bias factor to prevent drift<br />\n\tAMG3DVector4 C = ta &#8211; tb &#8211; worldAxis1*dtdotaxis;<br />\n\tbias = k_biasFactor / dt * C;</p>\n<p>This however doesn&#039;t behave correctly and locks the joint when it reaches the angle limit. Has anyone implemented a hinge joint before? Any suggestions?</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=295"
}, {
    "id": 9225,
    "post": 437,
    "parent": 0,
    "date": "2012-12-19T23:06:10",
    "content": "<p>Thanks William, that helps.</p>\n<p>I have temporarily just applied the revolute joint and restricted angle joint separately to both bodies and it seems to be doing the trick.</p>\n<p>For the elbow angle:</p>\n<p>currAngleDiff = body1.orientation &#8211; body2.orientation<br />\nif(currAngleDiff.z&gt;=0 &amp;&amp; currAngleDiff.z&lt;=radians(130) skip constraint, assuming the arm is straight at first at angle zero</p>\n<p>Hope that helps anyone</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=337"
}, {
    "id": 9224,
    "post": 437,
    "parent": 9223,
    "date": "2012-12-19T20:41:08",
    "content": "<p>Yeah, working in 3D is much harder since multiplying out the matrices symbolically is messy.  The good thing is, once you have identified the Jacobian you don&#8217;t really have to go much further (one reason to go further is to find places where you can improve performance).  You can just use the equations below, fill in all the numbers and do the matrix multiplication then.</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/12/weldc-9.png\" style=\"border: 0px;\"/><br />\nThis should yield a 6&#215;6 matrix (each row has 2 3&#215;3 columns).  To solve this we need to have a b vector that is 6&#215;1.</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/12/weldc-6.png\" style=\"border: 0px;\"/><br />\nWe can see that the first row will yield a 3&#215;1 as will the bottom.  So we should be able to solve this 6 variable system using whatever linear equation solver you would like to use.  To solve this you must invert the 6&#215;6.  You can use <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Gaussian_elimination');\"  href=\"http://en.wikipedia.org/wiki/Gaussian_elimination\" title=\"Gaussian Elimination\" target=\"_blank\" rel=\"nofollow\">Gaussian Elimination</a>, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/LU_decomposition');\"  href=\"http://en.wikipedia.org/wiki/LU_decomposition\" title=\"LU Decomposition\" target=\"_blank\" rel=\"nofollow\">LU Decomposition</a>, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Cholesky_decomposition');\"  href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\" title=\"Cholesky Decomposition\" target=\"_blank\" rel=\"nofollow\">Cholesky Decomposition</a>, etc just be careful of singularities and the respective algorithm&#8217;s restrictions.</p>\n<p>Another option is to use an application like Mathematica (or something similar) to simplify the matrices symbolically (since it isn&#8217;t really hard, just tedious).</p>\n<p>Hope that helps,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=337"
}, {
    "id": 9223,
    "post": 437,
    "parent": 0,
    "date": "2012-12-19T10:58:56",
    "content": "<p>Hi William,</p>\n<p>When combining a revolute joint and an angle constraint to form the 2&#215;2 block K matrix consisting of four 3&#215;3 matrices below for an elbow joint with restricted angular movement, how do I invert this matrix to solve for lambda, which seems like another matrix of two 3&#215;1 vectors as follows:</p>\n<p>A*lambda = b</p>\n<p>A = JM^-1JT</p>\n<p>A11 = Ma^-1 + [~ra]TIa^-1[~ra] + Mb^-1 + [~rb]TIb^-1[~rb]<br />\nA12 = [~ra]TIa^-1 + [~rb]TIb^-1<br />\nA21 = Ia^-1[~ra] + Ib^-1[~rb]<br />\nA22 = Ia^-1 + Ib^-1</p>\n<p>b = -Jvi</p>\n<p>b11 = -va &#8211; [~ra]Twa + vb + [~rb]Twb<br />\nb12 = -wa + wb</p>\n<p>A*lambda = b</p>\n<p>I am working in 3D, so multiplying the matrices out gets really messy</p>\n<p>Thanks for another great tutorial</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=337"
}, {
    "id": 9189,
    "post": 372,
    "parent": 9188,
    "date": "2012-12-18T12:48:44",
    "content": "<p>Not a problem, as I&#8217;m sure these discussions will help others.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9188,
    "post": 372,
    "parent": 0,
    "date": "2012-12-18T12:12:59",
    "content": "<p>I am misrepresenting the distance of course, stupid me. The distance should be zero if the relative position is zero, so ra and rb should extend to the boundaries of the bodies and pa and pb should be points on the bodies rather than points at the anchor ! Sorry for the previous post.</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9187,
    "post": 372,
    "parent": 0,
    "date": "2012-12-18T11:44:42",
    "content": "<p>Thanks for you help! I have implemented this constraint in 3D with drift correction, so it&#8217;s working 100%.</p>\n<p>For the distance constraint, I am having some problems:</p>\n<p>I have dp = xa + ra  &#8211; xb &#8211; rb<br />\nC = |dp| &#8211; L = 0</p>\n<p>Initially, for example, I set the bodies to xa = (35,0,0) xb = (-35,-10,0) and the anchor point at (0,0,0)</p>\n<p>So ra = (0,0,0) &#8211; (35,0,0) = (-35,0,0) and rb =  (0,0,0) &#8211; (-35,-10,0) = (35,10,0)</p>\n<p>L = |ra &#8211; rb| = 70.71</p>\n<p>So C = | (35,0,0) + (-35,0,0) &#8211; (-35,-10,0) &#8211; (35,10,0) | &#8211; 70.71<br />\nC = 0 &#8211; 70.71 which is non-zero and causing me problems</p>\n<p>I have tried different combinations and it seems like x and r cancel each other out in any case. In which cases are relative positions non-zero?</p>\n<p>Also, as relative position is zero JM^-1JT is zero since the normal vector is dp/|dp| which causes a divide by zero for lambda. It makes sense in a point-point constraint that dp  should always be zero so that C=0 but I am definitely missing something for the distance constraint. </p>\n<p>Please help!</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9186,
    "post": 372,
    "parent": 9185,
    "date": "2012-12-17T12:36:28",
    "content": "<p>The Jacobian&#8217;s <em>row</em> count may differ depending on the type of constraint you are creating.</p>\n<p>Because we are creating a <em>pair-wise</em> constraint (involving only two bodies) then we will always have 4 <em>columns</em> in the Jacobian.  As you point out, column 2 and 4 are 3&#215;3, but column 1 and 3 are scalars.</p>\n<p>They are getting a 3&#215;12 because you can write the scalar elements as a matrix of the same size by multiplying by the identity matrix (sometimes this makes things easier):</p>\n<pre>1 = | 1 0 0 | \n    | 0 1 0 |\n    | 0 0 1 |</pre>\n<p>So the Jacobian would look something like:</p>\n<pre>J = [ | 1 0 0 |  | sra sra sra |  | -1  0  0 |  | -srb -srb -srb | ]\n    [ | 0 1 0 |  | sra sra sra |  |  0 -1  0 |  | -srb -srb -srb | ]\n    [ | 0 0 1 |  | sra sra sra |  |  0  0 -1 |  | -srb -srb -srb | ]</pre>\n<p>Where sra and srb are the elements of skew[ra or rb] respectively.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9185,
    "post": 372,
    "parent": 0,
    "date": "2012-12-16T03:29:44",
    "content": "<p>Thanks! I am sure you have implemented the 3D version and have better tips than me. I am however happy to send some c++ code if it helps anyone</p>\n<p>I have a question about the Jacobian. Some people say its a 3&#215;12</p>\n<p>[ 1    skew[ra]     -1       -skew[rb] ]</p>\n<p>Since we have two scalars and 2 3&#215;3 matrices, how would you arrange these to form a 3&#215;12 matrix? I am not that familiar with a matrix inside a matrix</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9184,
    "post": 372,
    "parent": 9183,
    "date": "2012-12-15T16:59:36",
    "content": "<p>Glad to here that you were able to solve it!  If you have any tips for others, feel free to share.  Solving these types of equations are difficult to get right since there are so many matrices (and block matrices).  The 3D version is definitely more difficult to reduce down.</p>\n<p>Just let me know if you have any other questions,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9183,
    "post": 372,
    "parent": 0,
    "date": "2012-12-15T13:02:22",
    "content": "<p>Please disregard the above posts and thanks for a great tutorial ! I have implemented the revolute joint without drift correction and it&#8217;s working great.</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9182,
    "post": 372,
    "parent": 0,
    "date": "2012-12-15T10:55:32",
    "content": "<p>Sorry forgot to mention, even if we have a 3&#215;3 mass matrix, multiplying the inverse mass of each matrix by the identity, we&#8217;d still end up with a 3&#215;1 vector lambda, when there are two linear and two angular velocities. Maybe I am going wrong somewhere</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9181,
    "post": 372,
    "parent": 0,
    "date": "2012-12-15T10:48:13",
    "content": "<p>Hi William,</p>\n<p>I am having trouble solving for lambda in J*M^-1*JT*lambda = -Jvi in 3D</p>\n<p>With the following equation:</p>\n<p>( Ma^-1 + skew(ra)*Ia^-1*skew(ra)T + Mb^-1 + skew(rb)*Ib^-1*skew(rb)T ) * lambda = ( -vai &#8211; skew(ra)*wai + vbi + skew(rb)*wb)</p>\n<p>THe matrices added are of the following dimensions for 3D:</p>\n<p>( [4&#215;4] + [3&#215;3] + [4&#215;4] + [3&#215;3] ) * lambda = [3&#215;1]</p>\n<p>Since the addition of different sizes matrices is not defined, do you have any idea how to add these to end up with a 4&#215;1 vector lambda to sub into the following equations:</p>\n<p>vaf = vai + Ma^-1*lambda<br />\nwaf = wai + Ia^-1*skew(ra)T*lambda<br />\nvbf = vbi &#8211; Mb^-1*lambda<br />\nwbf = wbi &#8211; Ib^-1*skew(rb)T*lambda</p>\n<p>Much appreciate your help</p>\n",
    "author": "c0der",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d7f2ee1dd5d2d313242ca7e0986d46a7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9180,
    "post": 372,
    "parent": 9179,
    "date": "2012-12-13T13:23:21",
    "content": "<p>Good question. To isolate the velocity terms we must convert the cross product into a matrix multiplication and depending on the number of dimensions you will get different Jacobians.</p>\n<p>In 2D the angular velocity, w, is a scalar and you can simply separate the scalar and matrix with a multiplication (as shown in the post).  Performing a transpose in 2D is not necessary, although, it may have made things easier to follow.  (For 2D using the transpose vs. not transpose will still yield the same jacobian, but only because w, I, and M are all scalars).</p>\n<p>However, in 3D you cannot do this since w is a vector and matrix multiplication is not commutative.  For 3D you must use <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Cross_product#Conversion_to_matrix_multiplication');\"  href=\"http://en.wikipedia.org/wiki/Cross_product#Conversion_to_matrix_multiplication\" title=\"Cross Product to Matrix Multiplication\" target=\"_blank\" rel=\"nofollow\">this formula</a> to separate the angular velocity.  You will need to use the second equation which gives you <strong>R</strong><sup>T</sup><strong>w</strong> so that you can further separate out the Jacobian but retain the order of matrix multiplication.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9179,
    "post": 372,
    "parent": 0,
    "date": "2012-12-12T13:04:00",
    "content": "<p>Hi William,</p>\n<p>In the step where we want to isolate velocities, you have converted a vector into its corresponding skew-symmetric matrix.</p>\n<p>For two vectors a and b, and a skew symmetric matrix [A] of a,<br />\nwill b X a = [A] X b<br />\nor will b X a = (transpose of [A]) X b</p>\n<p>Such a formula would change the Jacobian to contain transposes of the skew symmetric matrices, instead of the skew symmetric matrices. Which one is right?</p>\n<p>Thanks</p>\n",
    "author": "roehit",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=225"
}, {
    "id": 9035,
    "post": 368,
    "parent": 9034,
    "date": "2012-11-12T12:38:01",
    "content": "<p>Yes.  You can create a line segment and make sure its past the origin before beginning the while loop for a slight performance improvement.  </p>\n<p>The goal of this post was to introduce the topic and explain the algorithm.  I tend to leave small improvements like this out because they tend to lose the reader.  Once the reader understands the algorithm, these types of improvements are usually obvious.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9034,
    "post": 368,
    "parent": 0,
    "date": "2012-11-12T04:56:36",
    "content": "<p>hi William, </p>\n<p>i think there should be a little improvement(through i am not very sure)</p>\n<p>as you said &#8220;Instead what we can do is iteratively build a polygon inside the Minkowski Difference that attempts to enclose the origin.&#8221;, </p>\n<p>so we need a line(triangle for 3D) before the &#8216;while&#8217; looping(line 7 in your skeleton code), not a single point, then we never need to check whether the &#8216;Simplex&#8217; has been built, or there is only a line in it.</p>\n<pre>\nVector d = // choose a search direction\n// get the first Minkowski Difference point\nSimplex.add(support(A, B, d));\n// negate d for the next point\nd.negate();\nSimplex.add(support(A, B, d));  <b>  //*** build the first line ****// </b> \n// start looping\nwhile (true) {\n  // same as your code\n}\n</pre>\n<p>and Sorry, English is not my native language.</p>\n",
    "author": "Anghan",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4b0bae87f1890c838b6de2331fa4c75b?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4b0bae87f1890c838b6de2331fa4c75b?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4b0bae87f1890c838b6de2331fa4c75b?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9254,
    "post": 394,
    "parent": 0,
    "date": "2012-09-27T22:54:25",
    "content": "<p>Just wanted to say that your clarification did help! Thanks again for the awesome tutorial!</p>\n",
    "author": "Peter",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d2d5423aa5146d5a18512e94b8019151?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d2d5423aa5146d5a18512e94b8019151?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d2d5423aa5146d5a18512e94b8019151?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9253,
    "post": 394,
    "parent": 9252,
    "date": "2012-09-25T12:30:36",
    "content": "<p>Thanks man!</p>\n<p>Sadly, I still haven&#8217;t found a <em>fast</em> tool to make good sketches.  These were all made in Gimp just using a bunch of layers and time (at least there&#8217;s an easy way to make a grid pattern).  If you&#8217;d like any of the gimp files for these just let me know,</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9252,
    "post": 394,
    "parent": 0,
    "date": "2012-09-24T19:50:45",
    "content": "<p>Hi William,</p>\n<p>awesome tutorial! May I ask what you use for the sketches? They look really nice!</p>\n",
    "author": "Dirk Gregorius",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/49a99749f959d44ba6b496403b714b32?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/49a99749f959d44ba6b496403b714b32?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/49a99749f959d44ba6b496403b714b32?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 8922,
    "post": 366,
    "parent": 0,
    "date": "2012-09-23T15:07:10",
    "content": "<p>Can you please explain this algorithm for n-dimensional convex polytopes?</p>\n",
    "author": "DiEvAl",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8997f35d4219d10acb6b2634b85d4941?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8997f35d4219d10acb6b2634b85d4941?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8997f35d4219d10acb6b2634b85d4941?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8921,
    "post": 366,
    "parent": 0,
    "date": "2012-09-22T19:17:08",
    "content": "<p>Notch army :D</p>\n",
    "author": "Marc",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0046e648034bd4614b4eeec6094aebea?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0046e648034bd4614b4eeec6094aebea?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0046e648034bd4614b4eeec6094aebea?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8920,
    "post": 366,
    "parent": 8919,
    "date": "2012-09-11T13:01:27",
    "content": "<p>Yeah it can be a bit confusing going from 2D to 3D.  If we take a step back for a moment we can see where the difference lies.  When we project a 3D shape onto an axis what do we actually get and what are we actually doing?</p>\n<p>For instance, in 2D when we project a shape onto an axis (line) to get a 1D interval; [min, max].  But in 3D, its not quite the same.  In 3D we have to project the shape onto a plane (we use the axes of the 3D shape as the plane normals).  This will produce a 2D shape for each axis (see the following illustrations).</p>\n<p>Example Scene:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_1.png\" alt=\"3D scene\" /></p>\n<p>View from above (this would be the y axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_2.png\" alt=\"Top Projection\" /></p>\n<p>View from the front (this would be the z axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_3.png\" alt=\"Front Projection\" /></p>\n<p>View from the side (this would be the x axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_4.png\" alt=\"Side Projection\" /></p>\n<p>The projection code in the 3D to 2D case will need to return the actual projected points rather than an interval.  Then we would perform the standard 2D SAT algorithm as described in my post on the 2D shapes generated.</p>\n<p>The tricky parts will be with any planar shapes in 3D (like your triangle case).  Their projections onto the planes of their edges will create line segments.  When the 2D line segment is projected onto a perpendicular axis (line), it will create a degenerate 1D interval like [3, 3] (in this case you will need to really examine your overlaps method to handle this case).</p>\n<p>My recommendation is to start simple.  Start with two 3D AABBs so that you only have to test 3 axes (x, y, z).  Then project each shape onto those 3 axes (to produce 3 2D AABB tests).  Then perform the 2D SAT algo. on those pairs.  Then move to the general case (OBB, arbitrary convex).  Then move to incorporating planar shapes (triangles, planar AABBs, etc.) (btw your projection/axes code looks good for 2D).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9033,
    "post": 368,
    "parent": 0,
    "date": "2012-09-11T08:57:43",
    "content": "<p>Thanks for your answer. I thought that I had to take AO.dot(AB),<br />\nbecause I watched the molleyrocket video and that&#8217;s the way they explained it.<br />\nIf AO.dot(AB) &gt; 0 it proves you passed the origin on your way from B to A.<br />\nYou take last.dot(d) for the reason you explained.<br />\nBut both tests will always give the same result (I think..)</p>\n",
    "author": "Roely de Vries",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8919,
    "post": 366,
    "parent": 0,
    "date": "2012-09-10T13:57:53",
    "content": "<p>I&#8217;ve implemented two different versions of the getAxes, one for a triangle and one for the AABB.</p>\n<p>The axes code: <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/gist.github.com/3691081');\"  href=\"https://gist.github.com/3691081\" rel=\"nofollow ugc\">https://gist.github.com/3691081</a></p>\n<p>The project method code: <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/gist.github.com/3691088');\"  href=\"https://gist.github.com/3691088\" rel=\"nofollow ugc\">https://gist.github.com/3691088</a></p>\n",
    "author": "Ilya Radchenko",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8918,
    "post": 366,
    "parent": 8917,
    "date": "2012-09-08T15:30:52",
    "content": "<p>The code that you emailed me seemed correct however, the project method and the getAxes methods could be causing some problems.  In 3D you typically don&#8217;t have plane like shapes, usually you work with AABBs (6 sided boxes) and tetrahedrons.  In this case you would use the face normals of the shapes, 6 (or 3) for the AABB and 4 for the tetrahedron.  However, if you use planar shapes then you must include the edge normals as well (like height maps, meshes, etc.)  So if you have a planar AABB, you would have the one face normal and 4 (or 2) edge normals.  Likewise for a triangle you would have one face normal and 3 edge normals.  The edge normals should be the normals of the edge perpendicular to the face normal to be precise (in other words they should lie in the plane of the triangle).</p>\n<p>If I were debugging the problem, I would first make sure my normals are correct.  Then I would verify my project method is working on some simple 3D cases.  Then I would step through the algorithm (looks like your code is good though).</p>\n<p>Also, I have an implementation of the 2D version <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Sat.java\" title=\"2D SAT implementation in Java\" target=\"_blank\" rel=\"nofollow\">here</a> in Java.  The Projection class I call <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java\" title=\"Projection implementation in Java\" target=\"_blank\" rel=\"nofollow\">Interval</a> since I use it for other purposes as well.  You may also want to take a look at the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Polygon.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Polygon.java\" title=\"Polygon implementation in Java\" target=\"_blank\" rel=\"nofollow\">Polygon</a> class (the project method would be of interest, just try to ignore the transform stuff).</p>\n<p>If you can send me the project and getAxes code I may be able to help further.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8917,
    "post": 366,
    "parent": 0,
    "date": "2012-09-07T23:16:43",
    "content": "<p>I&#8217;ve implemented your version of the SAT in 3D space with AABB (voxel, so it&#8217;s a cube) and triangles. For the axes, I get 6 normals for all the faces of the AABB, which might not be needed, but it works right now, and for the triangle I have one surface normal, which I think is wrong, should it be 4 normals?</p>\n<p>So now my collision detection works so-so, what I mean is that I get false positives when the triangles that are tested make up a convex curve.. so AABB&#8217;s that are in the curve but not touching the triangles are marked as colliding. Furthermore, I also get false positives on triangles that make up a diagonal rectangle. So imagine a forward slash, and I get false positives on the top left and bottom right.</p>\n<p>So for both cases, it&#8217;s almost as if I&#8217;m testing against the bounding box of the object. Since I&#8217;m breaking down the object into triangles and then testing for collisions with the AABB&#8217;s (voxels). What could be my problem?</p>\n",
    "author": "Ilya Radchenko",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9196,
    "post": 373,
    "parent": 0,
    "date": "2012-09-07T22:47:23",
    "content": "<p>Wow, that is really cool! I especially like that you noticed the logical aspect concerning proofs. I never noticed it that way :) It&#8217;s like two birds with one stone, Jesus says the truth and Jesus is God. Plus I love those verses because they show how the new testament is inspired, and that the authority of Jesus is on the same level as the Father.</p>\n",
    "author": "Ilya Radchenko",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9807852d7a4883b1bc996416e47a703f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=261"
}, {
    "id": 9288,
    "post": 435,
    "parent": 9287,
    "date": "2012-09-04T12:40:14",
    "content": "<p>Thanks man!</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 9032,
    "post": 368,
    "parent": 9031,
    "date": "2012-09-04T12:35:14",
    "content": "<p>Good question.  For whatever reason I had (-1.5, 1) for d but it really should be (-1, 1); I fixed this in the post.  Using d (the first line of Iteration 1), we get (-6, 9) as the next support point (we now have 2 support points in our simplex).  Then we need to make sure that the last support point we just added is past the origin along d; that&#8217;s what proj is for (the second line of Iteration 1):</p>\n<pre>proj = last.dot(d) = (-6, 9).dot(-1, 1) = -6 * -1 + 9 * 1 = 15\n</pre>\n<p>Since the dot product is greater than zero, then we know that the point is past the origin along d and we can continue the algorithm.  Then next step is to find the next search direction (since we need 3 points to form a triangle to enclose the origin in 2D).  To do this, we use the line segment case below in the <a href=\"http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/#gjk-top\" title=\"Checking the Simplex\" rel=\"nofollow\"></a> section.  Once we have a new search direction, we use it to obtain a new support point (just like we did with the original direction).</p>\n<p>Let me know if something is still confusing here,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9031,
    "post": 368,
    "parent": 0,
    "date": "2012-09-03T04:12:12",
    "content": "<p>sorry, correction, I mean at iteration 1:</p>\n<p>proj = (6, -9).dot(10,-7) = 60 +63 = 123.<br />\nThis because AB=(10,-7)  and AO=(6,-9)</p>\n",
    "author": "Roely de Vries",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9030,
    "post": 368,
    "parent": 0,
    "date": "2012-09-03T04:03:07",
    "content": "<p>I&#8217;m trying to understand the GJK algorithm for collission detection in my  2D Android game. I&#8217;m stuck at the description of iteration 1.</p>\n<p>proj = (-6, 9).dot(-1.5, 1) = 9 + 9 = 18</p>\n<p>should that not be:</p>\n<p>proj = (-6, 9).dot(10,-7) = -60 +63 = 3.<br />\nThis because (10,-7) = AB</p>\n",
    "author": "Roely de Vries",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/64ad7dde8d4bd0084772a2c6807fb806?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9287,
    "post": 435,
    "parent": 0,
    "date": "2012-09-01T23:23:28",
    "content": "<p>I&#8217;m digging your shout out to JC at the end. Way to represent!</p>\n",
    "author": "theK",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1adb3593fc89fbd376be6ee986c1872c?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1adb3593fc89fbd376be6ee986c1872c?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1adb3593fc89fbd376be6ee986c1872c?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=435"
}, {
    "id": 9251,
    "post": 394,
    "parent": 0,
    "date": "2012-08-23T19:19:09",
    "content": "<p>SAT, GJK, EPA and now this. Great job! Really useful. I hope you will write an article about how to find the Time of Impact, and about something solver, for example erin catto&#8217;s sequential impulses.</p>\n",
    "author": "Dandi",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/237b20794303421a929162bfb277a3cc?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/237b20794303421a929162bfb277a3cc?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/237b20794303421a929162bfb277a3cc?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9202,
    "post": 374,
    "parent": 9201,
    "date": "2012-07-25T13:00:28",
    "content": "<p>Exactly.  In the <a href=\"http://www.dyn4j.org/2010/07/equality-constraints/\" title=\"Equality Constraints\" rel=\"nofollow\">Equality Constraints</a> post I briefly touch on the drift problem.  Basically as you pointed out, the velocity constraints can easily be satisfied, however, because our integration techniques are approximations, we will always get drift in the position constraints.  The generally accepted solution to this problem is to use some sort of post stabilization method.</p>\n<p>Unfortunately I don&#8217;t have a post for this yet but I can offer a few details.  If we take our original position constraint that we defined:</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/dc-23.png\" alt=\"Distance Constraint - Position Constraint\" /></p>\n<p>and we solve this for C we get the position constraint error.  We can feed this error back into the velocity constraint by moving/rotating the bodies by this error (using the effective mass to apply the position correction appropriately):</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_6_1.png\" alt=\"Solve the position constriant for C\" /></p>\n<p>Then we can apply this position correction by:</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_6_2.png\" alt=\"Solve for the change in position and rotation\" /></p>\n<p>This will give the change in position of the Center of Mass and the change in Rotation of both bodies.  Because we changed the position and rotation, upon the next iteration of the simulation, the velocity constraint will see these changes (that&#8217;s why we say &#8220;the position error gets feed back into the velocity constraint&#8221;).</p>\n<p>Naturally, each constraint will have a different position constraint equation.  The one above is specifically for the Distance Constraint.  But they all follow the same process, solve the position constraint for C (which could be a vector instead of a scalar for some constraints) and then scale this by the &#8220;effective mass&#8221; (the K matrix).  Then apply the result to the bodies.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9201,
    "post": 374,
    "parent": 0,
    "date": "2012-07-25T06:18:48",
    "content": "<p>Hi William,</p>\n<p>Thanks for the replies.<br />\nI am getting the right responses from the bodies when i&#8217;ve implemented the distance constraint, but there seems to be a constant drift arising out of the numerical integration errors. I&#8217;ve noticed this error for the point-to-point constraint also.<br />\nHow do we solve/cancel out these errors and ensure close-to-perfect behavior with the constraints?</p>\n<p>Thanks in advance.</p>\n",
    "author": "roehit",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9200,
    "post": 374,
    "parent": 9199,
    "date": "2012-07-13T15:32:13",
    "content": "<p>v<sub>f</sub> and v<sub>i</sub> are the linear velocities of the bodies at their center of mass.</p>\n<p>The velocity of the pivot point would be:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_4_1.png\" alt=\"\" /></p>\n<p>This is seen in the derivation of the distance constraint.  However, the formulation we have setup here is to find the velocities at the center of mass for the bodies.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9199,
    "post": 374,
    "parent": 0,
    "date": "2012-07-13T14:02:32",
    "content": "<p>Hi William,</p>\n<p>Are Vf and Vi velocities about the pivot or about the COM?</p>\n<p>If they are about the pivot, shouldn&#8217;t Vf be 0 after every frame(for Pin Constraint of a body with the world[very heavy static object])?</p>\n<p>Thanks</p>\n",
    "author": "roehit",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9198,
    "post": 374,
    "parent": 9197,
    "date": "2012-07-12T13:07:25",
    "content": "<p>Yes, you are exactly right, lambda will be a scalar in this case.  Once lambda (the scalar impulse) is found, we can use the equation from the <a href=\"http://www.dyn4j.org/2010/07/equality-constraints/\" title=\"Equality Constraints\" target=\"_blank\" rel=\"nofollow\">Equality Constraints</a> post to find the change in velocity:</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_2_1.png\" alt=\"\" /><br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_2_2.png\" alt=\"\" /></p>\n<p>Now if we plug in the mass matrix, J<sup>T</sup> and lambda we get 4 equations to find the change in velocity for the two bodies (note in 2D the mass matrix entries are scalars and as you pointed out lambda is a scalar):</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_2_3.png\" alt=\"\" /><br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_2_4.png\" alt=\"\" /></p>\n<p>As a side note, the above explains how to apply the impulse to the bodies.  The impulse is simply (in this case):</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/07/distance_2_5.png\" alt=\"\" /></p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9197,
    "post": 374,
    "parent": 0,
    "date": "2012-07-11T12:55:16",
    "content": "<p>Hi William,</p>\n<p>You have mentioned that the size of the K matrix will be equal to the no. of degrees of freedom removed.<br />\nThis makes the &#8216;K&#8217; matrix in the distance constraint a 1&#215;1(a scalar).<br />\nAnd with &#8216;J&#8217; having a &#8216;nT&#8217; (transpose of n) term before the 3&#215;12 matrix, that makes &#8216;b&#8217; a scalar too.<br />\nDoes this mean &#8216;x&#8217; (lambda) will be a scalar too? And if so, how will this lambda be used to calculate the impulses to be applied on both the bodies?</p>\n",
    "author": "roehit",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2b0bdff3518af39097a87ce13e415840?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=267"
}, {
    "id": 9029,
    "post": 368,
    "parent": 0,
    "date": "2012-06-25T17:50:39",
    "content": "<p>Okay, thanks! I&#8217;ll e-mail you the code I&#8217;m using.</p>\n",
    "author": "CyrusFiredawn",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9028,
    "post": 368,
    "parent": 9027,
    "date": "2012-06-25T12:44:18",
    "content": "<p>It&#8217;s hard for me to tell exactly what the problem might be without examining some code.  The &#8220;jolting&#8221; of the penetration normal maybe correct in some cases, however the algorithm should only detect the collision if they are indeed overlapping.</p>\n<p>Just a quick question, you said one of your boxes is 80&#215;80.  You are using floating point (and not integers) for the computations right?  I&#8217;m sure you are, but I have to make sure.</p>\n<p>The &#8220;jolting&#8221; of the penetration normal will happen when the minimum penetration shifts from one edge of a rectangle to another.  This typically happens around the vertices.  Let&#8217;s say two rectangles are overlapping normally and we get the penetration normal to be (-1.0, 0.0) (see figure A).  Then let&#8217;s say that one of the rectangles moves up in one iteration (see figure B).</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk_45_1.png\" alt=\"\" /></p>\n<p>The normal was (-1.0, 0.0) but is now (0.0, 1.0).  This is because (-1.0, 0.0) is no longer the vector with the minimum penetration depth.  This is a side effect of the way that collision detection as defined what the collision normal is: the vector of minimum penetration.  In practice this shouldn&#8217;t be a big problem.</p>\n<p>Although it sounds like you have a different problem.  Perhaps you can give a bit more details or post (or email) some code?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9027,
    "post": 368,
    "parent": 0,
    "date": "2012-06-24T23:17:28",
    "content": "<p>Hello, William!</p>\n<p>Firstly, thanks for the awesome tutorial! You make it alot more simpler than everyone else does!</p>\n<p>I have GJK almost working, however I&#8217;ve encountered one problem I can&#8217;t find the source of. I&#8217;ve made a little program for testing it out, in the form of two equal sized squares (80&#215;80) and use the central points to obtain the first direction to check. One square can be moved about in 4 directions and upon detecing a collision, has its speed lowered to a noticable level.</p>\n<p>HOWEVER: in a small perimeter around the static box, the collision because detected as true, even if the box isn&#8217;t touching. At first I thought this may just be a graphical error, then I noticed the speed is perfectly fine in that perimeter when the box is either in the region diagonal to the static box, or perfectly in line with it. To me, it seems as though the collision detection is going off as if there are extruding lines on the corners of the box, like so: <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/i.imgur.com/C6DDL.png');\"  href=\"http://i.imgur.com/C6DDL.png\" rel=\"nofollow ugc\">http://i.imgur.com/C6DDL.png</a></p>\n<p>I&#8217;m unsure on their length since I haven&#8217;t tested it that much, but it seems to be having that effect (I noticed it when I move the box in to this field and moved it parallel to the edge of the box, when the moving box suddenly jolted, as if it was free of the invisible grasp).</p>\n<p>Any idea what&#8217;s causing this? I thought it might be me just getting some &gt;&#8217;s mixed up with some &gt;=&#8217;s or something, but if it is, I haven&#8217;t pinned down which one.</p>\n<p>Dunno if you still watch this post but there&#8217;s no harm in asking, ha.</p>\n<p>Thanks in advance!</p>\n",
    "author": "CyrusFiredawn",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/3b951a1085d39cf108b405f189025548?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9151,
    "post": 370,
    "parent": 9150,
    "date": "2012-06-08T12:12:41",
    "content": "<p>Awesome!  Yeah, I meant to put ab.left() instead of abPerp.  I fixed it in the previous comment of mine.  Thanks for pointing that out!</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9150,
    "post": 370,
    "parent": 0,
    "date": "2012-06-08T08:43:24",
    "content": "<p>Thank you so much for this fast and accurate answer William !</p>\n<p>I&#8217;m in 2D(second case) and it works perfectly !</p>\n<p>Just a little thing: in your correction I believe it is ab.left and not abPerp.left as abPerp is &#8220;null&#8221;.</p>\n<p>Thanks a lot !</p>\n<p>Quentin</p>\n",
    "author": "Quentin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9149,
    "post": 370,
    "parent": 9148,
    "date": "2012-06-07T18:17:53",
    "content": "<p>Yeah these are some of the cases where GJK and EPA can get tricky.  First let me say that the EPA guide here requires that the final simplex from GJK is a triangle (for 2D) to work correctly.</p>\n<p>There are two sub cases for the case in which the origin is on an edge of the simplex:<br />\n  1. The edge of the simplex (which the origin lies on) is an edge of the Minkowski Sum<br />\n  2. The edge of the simplex (which the origin lies on) lies inside of the Minkowski Sum</p>\n<p>In the first case, this indicates touching contact between the two shapes.<br />\nThe second case is a bit of a problem in 3D for the line segment case.</p>\n<p>Thankfully in 2D we have an easy way out for both of these cases.  If the origin lies on an edge of the simplex we can just use either perpendicular vector of that edge as the next search direction (the modified line segment case of GJK.containsOrigin):</p>\n<pre>\n// then its the line segment case\nb = Simplex.getB();\n// compute AB\nab = b - a;\n// get the perp to AB in the direction of the origin\nabPerp = tripleProduct(ab, ao, ab);\n// is the new direction vector close to the zero vector?\nif (abPerp.getSquaredMagnitude() <= EPSILON) {\n  d.set(ab.left());\n  // you can use either v.left() = (v.y, -v.x)\n  // or v.right() = (-v.y, v.x)\n} else {\n  // set the direction to abPerp\n  d.set(abPerp);\n}\n</pre>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9148,
    "post": 370,
    "parent": 0,
    "date": "2012-06-07T13:12:48",
    "content": "<p>Little precision: When I fix this in GJK the output simplex only have 2 points and when I look for the closest edge the on I find has a e.distance =0 . So I never enter the if(d &#8211; e.distance &lt; epsilon)&#8230;</p>\n",
    "author": "Quentin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9147,
    "post": 370,
    "parent": 0,
    "date": "2012-06-07T13:05:57",
    "content": "<p>Hi and first of all thank you four your guides ! It is really the best I found on the subject (GJK &amp; EPA).</p>\n<p>I have yet a little problem:<br />\nI have a particular case where the origine belongs to the edge formed by the two first point of my simplex (in GJK). In this case the algorithm find that the shape are not colliding even if they are&#8230;<br />\nI tried to fix this by returning a colision if the origin belongs to an edge of the simplex but then I have a problem in the EPA who seems unable to find the closest edge (infinite loop).</p>\n<p>English is not my first language so I&#8217;m not sure if I &#8216;m clear enough.</p>\n<p>Here is my example :</p>\n<p>Shape 1 points: (2,2),(2,5),(4,5),(4,2)<br />\nShape 2 points: (3,3),(5,4),(5,2)<br />\nFirst d : center shape 1 &#8211; center shape 2<br />\nFirst edge in my simplex formed by :(-3,3), (1,-1)<br />\nepsilon chosen: 0.01</p>\n",
    "author": "Quentin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e9ee16999373da7e48e37add841a2b6a?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8914,
    "post": 366,
    "parent": 0,
    "date": "2012-05-19T22:11:43",
    "content": "<p>&#8220;What I would suggest is that you always return a vector that is pointing from shape A to shape B from SAT. This way you don‚Äôt have to worry about which way the vector is pointing.&#8221;</p>\n<p>You can¬¥t belive the relief I felt when I read this! I¬¥ve been having serious trouble with the MTV, jitter and tunneling and now it¬¥s all solved. Just like that! :)</p>\n<p>Thank you very much, William! For this and for writing all those great tutorials. Internet owes you. :)</p>\n",
    "author": "Fredrik",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fa90b639c8d9becebf3d849a9ccad9e6?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fa90b639c8d9becebf3d849a9ccad9e6?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fa90b639c8d9becebf3d849a9ccad9e6?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8913,
    "post": 366,
    "parent": 0,
    "date": "2012-05-12T07:13:19",
    "content": "<p>Thanks.</p>\n<p>Well if anything, it was a good learning experience. I may end up implementing some basic physics / collision resolution but i think for now, what I have will suffice, and I will just end up working around the issues, and just use an existing library for advanced stuff.</p>\n<p>I always try to refrain from using 3rd party libraries whenever I can, so I can learn as much as I can.</p>\n",
    "author": "Cecilectomy",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8912,
    "post": 366,
    "parent": 8911,
    "date": "2012-05-12T03:29:42",
    "content": "<p>To be clear you have three questions (right?):<br />\n1. What happens when there are multiple MTVs in which they are the same depth but different normals<br />\n2. What do you do to resolve the collision of multiple shapes vs. pairwise<br />\n3. What happens when we choose the wrong MTV causing a shape to stop abruptly (internal edge collisions).</p>\n<p>These are good questions and, as it turns out, all difficult problems to solve.  I will briefly talk about each one and give my recommendation.</p>\n<p>1.  Most code just chooses either the first or last minimum MTV.  Algorithms like SAT require that the shapes be intersecting.  Once the shapes are overlapping we have left &#8220;the real world&#8221; and must rely on approximations and best judgement.  The idea in these cases is that we don&#8217;t know which way the shapes intersected to determine which MTV to use.  You could use the relative velocity of the bodies to help decide (where you prefer the minimum MTV that is least perp. to the relative velocity).  If the relative velocity is a) zero or, b) equally perp. to both minimum MTVs, then you are back to choosing an arbitrary one.  I always choose the first minimum MTV IIRC.</p>\n<p>2. SAT handles Collision Detection.  Collision resolution is an entirely different subject and much more complex.  Collisions <em>could</em> be resolved by using the MTV directly and translating the shapes out of the collision.  But as you said, if you have more than just a pairwise interaction, the translating method won&#8217;t solve the global solution (it&#8217;s a local solution).  Enter physics engines.  This is the main reason why physics middleware exists.  They solve the multi-body problem and a whole host of others.  Most physics engines these days use impulse based solutions.  dyn4j uses the Sequential Impulses method that the creator of Box2d came up with.</p>\n<p>3. It is certainly possible that the wrong MTV will be chosen and a shape will abruptly stop.  In fact this is a big problem for platformer type games (where the character is controlled by the user).  I have not researched solutions to this problem in depth but I know that Box2d has a solution.  The Box2d solution is to use a chain of vertices representing linked line segments and detect internal collisions using this special structure.  However, if you have a 4 x 4 stack of blocks, this method will not solve the problem for the collisions on the top of said blocks.  I think most attempt to get around this problem by optimizing the collision body representation.  In dyn4j I chose to ignore this problem and let the game designers decide how best to solve this issue.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8911,
    "post": 366,
    "parent": 0,
    "date": "2012-05-11T15:33:54",
    "content": "<p>my reference picture didn&#8217;t show up. not sure how others got images in their posts.</p>\n<p><a onclick=\"javascript:pageTracker._trackPageview('/outgoing/i18.photobucket.com/albums/b121/comeon666/mtvproblem.png');\"  href=\"http://i18.photobucket.com/albums/b121/comeon666/mtvproblem.png\" rel=\"nofollow ugc\">http://i18.photobucket.com/albums/b121/comeon666/mtvproblem.png</a></p>\n",
    "author": "Cecilectomy",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8910,
    "post": 366,
    "parent": 0,
    "date": "2012-05-11T15:29:47",
    "content": "<p>I have read many articles while coding a java implementation of SAT, using this as my primary. It is only polygon-&gt;polygon but that is sufficient for now.</p>\n<p>Since there seems to be a lot of knowledge so far on here so I thought I&#8217;d post my question here. I already have some ideas in my head, but other opinions on the matter may sway or change the way I end up dealing with my problem.</p>\n<p>My problem is this. Given that you use the MTV for dealing with collisions, I have come across a problem where the MTV could be 1 of multiple possibilities, i.e. two corners of two rectangles penetrating the same distance in both axes. How should you decide which is the right axes? This isn&#8217;t of much concern when 2 objects are colliding, but what about 3? And what if one or more objects are moving? say sliding against a wall made up of multiple objects and the movement is at an angle, as the object slides onto the next object forming the wall, if it tests for a collision with THAT object first instead of the object it is / was already colliding with last frame, and it returns the &#8220;wrong&#8221; mtv, it wreaks havoc. By havoc i mean it behaves like there is something in front when there really isn&#8217;t.</p>\n<p>If it collides with the rectangle to the right first and it gets the mtv for the horizontal axis, it will be pushed back first, causing it to halt forward movement. If i could determine though, that i needed the vertical mtv, it would move up and out first, allowing it to continue its movement.</p>\n<p>The solution I have in my head is to return a list of equal MTV&#8217;s instead of a single MTV, then deal with it later.</p>\n<p>Or possibly rather, using a supplied movement vector, determine which mtv is more appropriate based on the movement of the shape upon entering the collision? This would cause the same problem though if it is a 45degree angle.</p>\n",
    "author": "Cecilectomy",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1432ab7870469494e1d607207145d10f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8909,
    "post": 366,
    "parent": 0,
    "date": "2012-05-06T04:10:56",
    "content": "<p>Hello! aaadaae interesting aaadaae site! I&#8217;m really like it! Very, very aaadaae good!</p>\n",
    "author": "Pharma340",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/bcfbbf0f8e6d3f6e2fd1b42e6d9fe407?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/bcfbbf0f8e6d3f6e2fd1b42e6d9fe407?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/bcfbbf0f8e6d3f6e2fd1b42e6d9fe407?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8908,
    "post": 366,
    "parent": 0,
    "date": "2012-05-01T13:43:49",
    "content": "<p>wow thanks for the fast reply. </p>\n<p>this helped me a lot.</p>\n",
    "author": "nutter",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8907,
    "post": 366,
    "parent": 8906,
    "date": "2012-05-01T12:15:48",
    "content": "<p>The best way to do this is to always fix the direction to be either from shape A to shape B or vise-versa.  Once you have decided, you can do something like this to make sure its always pointed in the correct direction:</p>\n<pre>\nVector2 centerA = // the center/centroid of shape A\nVector2 centerB = // the center/centroid of shape B\n// get the vector pointing in the desired \n// direction as described above in this case \n// i want the vector to always point from A to B\nVector2 CAtoCB = centerB - centerA;\n// now we check the normal to see if its \n// pointing the right way\nif (CAtoCB.dot(normal) < 0) {\n  // if its pointing in the opposite \n  // direction then we just reverse it\n  normal = -normal;\n}\n</pre>\n<p>This makes sure that the normal is always pointing in the correct direction.  There is one issue with this.  What happens if the centers of A and B are the same point?  In this case, you don't need to worry which direction the normal is in, you can just assume that its correctly pointing from A to B.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9203,
    "post": 375,
    "parent": 0,
    "date": "2012-05-01T06:26:54",
    "content": "<p>Thanks a million kajillion times over!!!! I really love these constraint tutorials; so far the simplest and clearest I&#8217;ve seen. Very helpful, and again thank you!!</p>\n",
    "author": "Programpro",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/eac25dc02157bd0722fcc6db6084d022?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/eac25dc02157bd0722fcc6db6084d022?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/eac25dc02157bd0722fcc6db6084d022?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=295"
}, {
    "id": 8906,
    "post": 366,
    "parent": 0,
    "date": "2012-04-30T21:14:34",
    "content": "<p>Hello, this is an amazing article!</p>\n<p>i,ve implemented most of it. but i geht stuck with the axes:</p>\n<p>let&#8217;s say i have a rectangle with the four normals<br />\n0/1, -1/0, 0/-1, 1/0<br />\nnow i remove duplicates and end with these two normals to test:<br />\n0/1, -1/0<br />\nwhen there is a colision  i get the right overlap value, but i dont understand how the get the right direction of the offset translation?</p>\n",
    "author": "nutter",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/7c996e2ae344eb0f26b4b23c3bd4f293?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9026,
    "post": 368,
    "parent": 9025,
    "date": "2012-04-21T22:04:24",
    "content": "<p>Yeah, as you point out, what I describe will only work in 2D.</p>\n<p>If the origin lies on the triangle simplex plane (yielding a zero triple product), you can use the normal of the triangle plane by using the three vertices of the simplex instead.  Either normal of the plane will work in this case (only two to choose from).  For the line segment case in 3D, I would probably just choose an arbitrary direction (that is perp. to the line) so I could get to the triangle simplex case.  Once you have a tetrahedron, its much easier to make better decisions about the &#8220;special&#8221; cases.</p>\n<p>The Minkowski Sum algorithms (GJK and EPA) are typically harder to get correct for this very reason.  Many of these &#8220;special&#8221; cases happen more often then you&#8217;d think.  In addition, the finite precision doesn&#8217;t help.</p>\n<p>Thanks for sharing what you found!<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9025,
    "post": 368,
    "parent": 0,
    "date": "2012-04-21T19:26:32",
    "content": "<p>Hi William, thanks for your very quick reply. I&#8217;m trying to implement GJK in 3D and I get into all kinds of trouble in the case where the origin lies &#8216;on&#8217; (i.e. on the line or inside the triangle in 3D) the simplex. What you suggest works in 2D but in 3D (in the case of the edge of the tetrahedron) you have to take the cross product ABxAOxAB, which gives a null vector. You then also have to consider that we don&#8217;t have infinite precision which introduces additional complications. </p>\n<p>I tried to read ch.4 of &#8220;Collision Detection in Interactive 3D Environments&#8221; by Gino van den Bergen. From my understanding, he introduces two additional checks on each iteration. He first computes the new point using the support function and then he returns &#8216;false&#8217; if either the new point belongs to the previous simplex or  if the origin lies farther than the new point. The second additional check is to return &#8216;true&#8217; whenever the direction vector becomes relatively small.</p>\n<p>This may be beyond the scope of this excellent tutorial but I hope it helps those interested in implementing it in 3D.</p>\n",
    "author": "Grieverheart",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9024,
    "post": 368,
    "parent": 9023,
    "date": "2012-04-21T17:02:31",
    "content": "<p>Good question.  My comment in the post about this problem was a bit misleading.  There are two places where the origin can lie on the edge of the simplex which can cause problems:</p>\n<ol>\n<li>The origin lies on the edge of the simplex inside the Minkowski Sum.</li>\n<li>The origin lies on the edge of the simplex on the edge of the Minkowski Sum.</li>\n</ol>\n<p>The latter case indicates touching contact and my intention was to point out this implication.  It&#8217;s up to the developer to decide whether to call this a collision.</p>\n<p>The former case just causes problems altogether.  The fix I described in the comment in the post should work for both cases.  Just get the left or right normal of the simplex AB and use that as the next direction.</p>\n<p>I also fixed the comment in the post to help others.<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9023,
    "post": 368,
    "parent": 0,
    "date": "2012-04-20T20:45:55",
    "content": "<p>I&#8217;m a bit confused about one thing. If the origin lies on the line AB, why is it a contact point? Or are you talking about the bounding line of the Minkowski sum? If the latter is the case, how is that handled? I.e you get a null direction and terminate although the point resides in the Minkowski sum.</p>\n",
    "author": "Grieverheart",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f71426da6340603613339a5ab6fe938?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9146,
    "post": 370,
    "parent": 9145,
    "date": "2012-04-18T12:47:01",
    "content": "<p>The winding of the simplex can be found just like you would find the winding of any polygon.  See <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/paulbourke.net/geometry/polygonmesh/');\"  href=\"http://paulbourke.net/geometry/polygonmesh/\" title=\"Winding Direction\" target=\"_blank\" rel=\"nofollow\">this</a> for more details.</p>\n<p>As a performance enhancement, you only really need to know the value of the first non-zero cross product to determine the winding.  In addition, since EPA retains the winding of the simplex throughout the algorithm, you only need to calculate the winding when the algorithm starts.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9145,
    "post": 370,
    "parent": 0,
    "date": "2012-04-18T08:45:14",
    "content": "<p>I am also curious about how to detect winding of a simplex.</p>\n",
    "author": "Tylor",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a82b329deed40721172f6ac2c85f67b4?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a82b329deed40721172f6ac2c85f67b4?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a82b329deed40721172f6ac2c85f67b4?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8905,
    "post": 366,
    "parent": 0,
    "date": "2012-04-13T00:48:50",
    "content": "<p>You sir, are a gentleman and a scholar.</p>\n",
    "author": "Alex",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d662fbe31b8961dcee8ebaf8c1974727?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d662fbe31b8961dcee8ebaf8c1974727?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d662fbe31b8961dcee8ebaf8c1974727?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9111,
    "post": 369,
    "parent": 0,
    "date": "2012-04-11T12:32:35",
    "content": "<p>right&#8230;. it looks like this was a drawing error and not an algorithmic one! </p>\n<p>I was using the Margin property of an Ellipse to define it&#8217;s offset from the borders. </p>\n<p>This works as long as positive integral values are provided. Negative, non-integral values for margin values are technically permitted, but should be avoided because they are rounded by the layout rounding behavior. </p>\n<p>This perfectly explains the behavior I was seeing where points would &#8216;lag behind&#8217; a shape. </p>\n<p>Again, thanks for you suggestions. It helped me verify the points where chosen correctly but just drawn incorrectly.</p>\n<p>On to the EPA article :)</p>\n<p>cheers!<br />\nErnst</p>\n",
    "author": "Ernst",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9110,
    "post": 369,
    "parent": 0,
    "date": "2012-04-11T06:30:19",
    "content": "<p>Thanks for your reply! By drifting I mean that the points leave the polygon and lag behind if you move the polygon around. It&#8217;s perhaps a bit difficult to explain in text but it looks as if the closest points have a smaller radius of action.</p>\n<p>That&#8217;s a good suggestion and thanks for your offer. I&#8217;ll check if the points fall onto the sum shape. Maybe there is an error I can spot. </p>\n<p>I&#8217;ll let you know!</p>\n<p>thanks,<br />\nErnst</p>\n",
    "author": "Ernst",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9109,
    "post": 369,
    "parent": 9108,
    "date": "2012-04-10T19:02:56",
    "content": "<p>No I haven&#8217;t seen that behavior before.  What do you mean by drift?</p>\n<p>The first thing I would check is if the distance check is working correctly minus the closest points in all quadrants.  Then I would make sure that the Minkowski points are correct.  The Minkowski points should be the points on the Minkowski sum that form the edge that is closest to the origin (see Figure 6).</p>\n<p>If you still can&#8217;t find the problem you are welcome to send me the code via <a onclick=\"javascript:pageTracker._trackPageview('/mailto/william.bittle@dyn4j.org');\"  href=\"mailto:william.bittle@dyn4j.org\" rel=\"nofollow\">email</a> or by posting it here.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9108,
    "post": 369,
    "parent": 0,
    "date": "2012-04-10T14:02:05",
    "content": "<p>Hi William,</p>\n<p>First of all, thanks for the great articles you&#8217;ve put online! </p>\n<p>I&#8217;ve been playing with an implementation in C#/WPF based on this text and the dyn4j code. Everything looks quite alright but there is an small issue with the closest point that you might be able to give me some hints on.</p>\n<p>I have the following (default) quadrant setup; </p>\n<p>  4 | 1<br />\n&#8212;&#8212;&#8211;<br />\n  3 | 2 </p>\n<p>the origin (0,0) is in the middle of my screen. q1 = x &gt; 0 &amp;&amp; y &gt; 0;  q2 = x &gt; 0 &amp;&amp; y &lt; 0 and so on. </p>\n<p>The results look fine whenever I keep both polygons inside the first quadrant. i.e. all the vertices have a positive value. As soon as I move one or more shapes to a different region the closest points start to drift. Is this something you&#039;ve seen before using this algorithm or am I overlooking a minus sign somewhere and just need to look harder?</p>\n<p>Thanks!<br />\nErnst</p>\n<p>b.t.w. I&#039;m in 2d as you might have guessed.</p>\n",
    "author": "Ernst",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c2af557cb3840617db0ccb7fbf98cc75?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 8904,
    "post": 366,
    "parent": 8902,
    "date": "2012-04-09T12:52:37",
    "content": "<p>To check for overlap see the previous comments.  It can be a bit tricky.</p>\n<p>Since the projection class is a one dimensional projection of the shapes onto an axis there is only the above check to perform on each projection so no additional code should be required.  For SAT to work however, the shapes must be projected onto every axis (edge normal) of both shapes.</p>\n<p>Let me know if it needs more explanation.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8902,
    "post": 366,
    "parent": 0,
    "date": "2012-04-08T01:11:53",
    "content": "<p>EDIT:<br />\nI screwed up the function in my first post.<br />\nHere&#8217;s how I should have wrote it:</p>\n<pre>\nfunction overlap(V1,V2){\n  if( (V1.min&gt;V2.min AND V1.minV2.min) \n   OR (V1.max&gt;V2.min AND V1.max&lt;V2.min) )\n  {return true;}\n  return false;\n}\n</pre>\n",
    "author": "bruce wayne",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8901,
    "post": 366,
    "parent": 0,
    "date": "2012-04-08T01:09:05",
    "content": "<p>You are a LEGEND!!!<br />\nI can&#8217;t believe I actually have this (sort of) working!<br />\nI was almost ready to give up on SAT. Thanks a lot.</p>\n<p>Just one question:<br />\nWhen checking if they overlap, should it be as follows:</p>\n<pre>\nfunction overlap(V1,V2){\n  if( (V1.min&gt;V2.min \n   AND V1.minV2.min\n   AND V1.max&lt;V2.max ))\n  {return true;}\n  return false;\n}\n</pre>\n<p>and if so,<br />\nwill I need to do some extra coding to see if the collision should affect the y or x axis on the colliding polygon?</p>\n<p>Thanks again!</p>\n",
    "author": "bruce wayne",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2033a17c3b7b7a990f30dd7b9ef5b81a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9250,
    "post": 394,
    "parent": 9249,
    "date": "2012-04-02T12:44:45",
    "content": "<p>The definition of the 2D cross product I use is:</p>\n<pre>\nVector2 cross(Vector2 v, double z) {\n  return new Vector2(-1.0 * v.y * z, v.x * z);\n}\n</pre>\n<p>Which when used will be:</p>\n<pre>\nref = (-1, 0)\n//                 (-1.0 * v.y *    z,  v.x *    z)\ncross(ref, -1.0) = (-1.0 * 0.0 * -1.0, -1.0 * -1.0) = (0.0, 1.0)\n</pre>\n<p>The cross product can yield two different vectors depending on the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Cross_product#Cross_product_and_handedness');\"  href=\"http://en.wikipedia.org/wiki/Cross_product#Cross_product_and_handedness\" title=\"Handedness\" target=\"_blank\" rel=\"nofollow\">handedness</a> of the system.  I use the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.physics.udel.edu/~watson/phys345/Fall1998/class/1-right-hand-rule.html');\"  href=\"http://www.physics.udel.edu/~watson/phys345/Fall1998/class/1-right-hand-rule.html\" title=\"Right Hand Rule\" target=\"_blank\" rel=\"nofollow\">right-hand-rule</a> for my projects.  However, in two dimensions there exists 2 orthogonal vectors from which to choose from.  Which do we use is the problem with this approach.  In addition, three dimensions have an infinite number of orthogonal vectors to a given vector.  This is why the cross product is used vs. choosing a orthogonal vector.</p>\n<p>I hope this clears up some confusion.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9249,
    "post": 394,
    "parent": 0,
    "date": "2012-03-31T20:40:32",
    "content": "<p>Mind sharing what you did to fix your issue Haubna? I&#8217;m having an issue with example number 2. Everything matches up until the cross product and then it differs.</p>\n<p>In the example it says:</p>\n<pre>\nref.normalize() = (-1, 0)\n\n// 2 clips...\n\nrefNorm = (0, 1)\n</pre>\n<p>How does that work? According to an above comment the 2D cross product we want is:</p>\n<pre>\nVector2 refNorm = Vector2 (ref.Y * -1.0, ref.X * -(-1.0));\n</pre>\n<p>Thus this would mean refNorm = (-1.0 * 0.0, -1.0 * -(-1.0)) = (0.0, -1.0).</p>\n<p>If just get an orthogonal vector using refNorm = (ref.Y, -ref.X) (which I&#8217;ve seen refered to as another form of the 2d cross product elsewhere), example 2 works but the other two fail.</p>\n<p>If anyone has any advice to offer it would be greatly appreciated!</p>\n<p>Also, thanks for the wonderful tutorial William!</p>\n",
    "author": "Peter",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/060e92ac8ff47c0f9ae1a114f6d71f29?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/060e92ac8ff47c0f9ae1a114f6d71f29?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/060e92ac8ff47c0f9ae1a114f6d71f29?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9248,
    "post": 394,
    "parent": 0,
    "date": "2012-03-25T16:21:37",
    "content": "<p>Oh sry i was wrong, fixed it xD</p>\n",
    "author": "Haubna",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9247,
    "post": 394,
    "parent": 0,
    "date": "2012-03-24T19:42:48",
    "content": "<p>First of all thank you for great tutorial!</p>\n<pre>Vector2 refNorm = ref.cross(-1.0);\n// if we had to flip the incident and reference edges\n// then we need to flip the reference edge normal to\n// clip properly\nif (flip) refNorm.negate();</pre>\n<p>I tried to implement it like that but it wasn&#8217;t working right. Then i tried it with that peace of code (without the flip and a positive cross product):</p>\n<pre>Vector2d refNorm = ref.edge.cross(1.0);</pre>\n<p>and everything worked fine. Is that peace of code from you wrong or am i confused?</p>\n",
    "author": "Haubna",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0be50c12a6e81314bb9d895239381d1e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9246,
    "post": 394,
    "parent": 0,
    "date": "2012-03-16T19:46:37",
    "content": "<p>Thank you so much Konrad!!</p>\n",
    "author": "Albert",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9245,
    "post": 394,
    "parent": 0,
    "date": "2012-03-16T18:44:56",
    "content": "<p>Cross product for 2D vector with scalar looks like this:</p>\n<p>Vec = (Vec.Y * Scalar, Vec.X * &#8211; Scalar)</p>\n<p>So this code:<br />\n20 Vector2 refNorm = ref.cross(-1.0);<br />\nis:<br />\nVector2 refNorm = Vector2 (ref.Y * -1.0, ref.X * -(-1.0));</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9244,
    "post": 394,
    "parent": 0,
    "date": "2012-03-16T18:36:02",
    "content": "<p>Hi William, I have a doubt</p>\n<p>How I calculate: </p>\n<p>19 // get the reference edge normal<br />\n20 Vector2 refNorm = ref.cross(-1.0);</p>\n<p>.cross is cross product?<br />\ncross product is defined for two vectors in R3, so..<br />\n How do I calculate  ref.cross(-1.0) ?</p>\n<p>Sorry my bad english..</p>\n",
    "author": "Albert",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/c027c85bd07353cfb7f9fa65076e5734?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9243,
    "post": 394,
    "parent": 0,
    "date": "2012-03-15T15:19:12",
    "content": "<p>Thanx for help via email ;)</p>\n<p>Keep up the good work!</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9242,
    "post": 394,
    "parent": 0,
    "date": "2012-03-14T16:48:59",
    "content": "<p>Hi!</p>\n<p>When I started writing code, there were problems.</p>\n<p>I have working SAT algorithm and there is collision information:<br />\n&#8211; MTD<br />\n&#8211; Depth</p>\n<p>It&#8217;s working very well, but I have problems with finding features.<br />\nPost to me on my e-mail and I show you my code.</p>\n<p>I haven&#8217;t any idea what I&#8217;m doing wrong&#8230;</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9021,
    "post": 368,
    "parent": 9020,
    "date": "2012-03-06T13:44:56",
    "content": "<p>I&#8217;m both glad that the post helped and sorry that it cause you some debugging grief.  I added a note early in the post clearly stating the definition of AB.  This is actually the accepted notation for a vector that goes from point A to point B.  Mathematically however, the evaluation of that vector is done is opposite order using the difference operator.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9020,
    "post": 368,
    "parent": 0,
    "date": "2012-03-05T20:38:15",
    "content": "<p>One more issue:</p>\n<p>&#8220;last = support(A, B, d) = (4, 5) &#8211; (12, 7) = (-8, -2)<br />\nproj = (-8, -2).dot(-336, -480) = 2688 + 960 = 3648<br />\n// we past the origin so check if we contain the origin<br />\n// we dont (see Figure 6a)<br />\n// the new direction will be the perp of (4, 2) and (-8, -2)<br />\n// and the point (-6, 9) can be removed<br />\nAB = (-8, -2) &#8211; (4, 2)  = (-12, -4);<br />\nAO = (0, 0) &#8211; (-8, -2) = (8, 2);<br />\nABxAOxAB = AO(160) &#8211; AB(-104)<br />\n              = (1280, 320) &#8211; (1248, 416)<br />\n              = (32, -96)<br />\n              = (0.316, -0.948)&#8221;</p>\n<p>Look very carefully at your calculation for AB and AO. Since A is (-8,-2), and AB is defined to be B-A, then AB cannot be (-8,-2) &#8211; (4,2). That would be the definition of BA.</p>\n<p>Personally when I was coding this, this hung me up for a while, until I realized that if you literally do AB = B-A, then in the case of the line simplex, you are actually finding out the vector in the opposite direction of the origin, so this got me an infinite loop since I was always looking the wrong direction. (I spent some time using the right hand rule until I realized what was going on)</p>\n<p>In other words, you did the calculation correctly (A-B) in order to get the perpendicular pointing in the direction of the origin, but the label is wrong, should be BA, and therefore BA X AO X BA.</p>\n<p>(the other triple products are done correctly in the triangle simplex, just this line simplex caused my direction to be looking in the opposite direction of the origin).</p>\n<p>Still, cheers, you saved my butt overall. I had no idea what was going on, even after watching mollyrocket&#8217;s video twice.</p>\n",
    "author": "Wes",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9019,
    "post": 368,
    "parent": 9018,
    "date": "2012-03-05T13:34:27",
    "content": "<p>Thanks!  I actually had to change center points of the shapes because they were wrong.  Then I updated the calculation, but must have missed that.  I fixed it within the post.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9018,
    "post": 368,
    "parent": 0,
    "date": "2012-03-05T08:47:23",
    "content": "<p>d = c2 &#8211; c1 = (9, 5) &#8211; (5.5, 8.5) = (3.5, -3.5) = (1, -1);<br />\np1 = support(A, B, d) = (9, 9) &#8211; (5, 7) = (4, 2);<br />\nSimplex.add(p1);<br />\nd.negate() = (-1.5, 1);</p>\n<p>When I&#8217;m looking at this code, why is d.negate() = -1.5, 1? Intuitively I would expect negate to simply flip the signs of the direction, not change the direct itself. Since d started as 1,-1, how does negate change it to -1.5, 1?</p>\n<p>By the way, super useful explanation otherwise. Just some minor confusion here.</p>\n",
    "author": "Wes",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2d757e63582b9c304c856f377591fbba?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9016,
    "post": 368,
    "parent": 9015,
    "date": "2012-02-27T16:06:36",
    "content": "<p>Actually, I&#8217;m really glad you asked this because the center for shape1 was wrong.  I fixed it and thankfully the flow of the post remains unchanged.</p>\n<p>Finding the center of a 2D polygon can be done a number of ways.  In this post I just picked a point that looked like the center to make the math easier.  Typically you would do this using some algorithm.  In <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a> there are two algorithms used to calculate the center:</p>\n<p>1. Average Method &#8211; Add all the x values of the vertices and divide by the number of them; likewise with the y values.  See <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Centroid#Of_a_finite_set_of_points');\"  href=\"http://en.wikipedia.org/wiki/Centroid#Of_a_finite_set_of_points\" rel=\"nofollow\">here</a></p>\n<p>2. Area Weighted Method &#8211; See <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Centroid#Centroid_of_polygon');\"  href=\"http://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon\" rel=\"nofollow\">here</a></p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9015,
    "post": 368,
    "parent": 0,
    "date": "2012-02-25T16:15:42",
    "content": "<p>Could you kindly tell me how the center of shape1 and shape2 calculated?</p>\n",
    "author": "cgnerds",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/97c2ea3c7705c20c131b047a63c2c74d?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/97c2ea3c7705c20c131b047a63c2c74d?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/97c2ea3c7705c20c131b047a63c2c74d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9241,
    "post": 394,
    "parent": 0,
    "date": "2012-02-22T15:24:08",
    "content": "<p>Once again thanks a lot : ] I was looking for article like this for few days ; )</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9240,
    "post": 394,
    "parent": 9239,
    "date": "2012-02-21T13:38:36",
    "content": "<p>Typically I&#8217;m referring to the vector of minimum penetration of the two bodies as the normal (called the separation or collision normal).  Later I use the term in the Clipping section to identify a vector perpendicular to an edge.</p>\n<p>I qualified each time I used the word &#8220;normal&#8221; with either &#8220;separation&#8221; or &#8220;edge&#8221; to help clarify what I talking about.  I hope that takes care of the confusion (thanks for the comment).</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9239,
    "post": 394,
    "parent": 0,
    "date": "2012-02-20T23:54:41",
    "content": "<p>Got one question. By &#8220;normal&#8221; you mean collision normal or what?</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 9238,
    "post": 394,
    "parent": 0,
    "date": "2012-02-20T23:47:24",
    "content": "<p>So f*****g(!!!) great tutorial! Thans a lot!</p>\n",
    "author": "Konrad",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/90774ce3f8a4d8c10ec578f76a4224ef?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=394"
}, {
    "id": 8899,
    "post": 366,
    "parent": 8898,
    "date": "2012-01-30T13:38:27",
    "content": "<p>Ok, I see where the confusion is now.  Actually that code there purposefully excludes normalizing the vector.  This is because I save talking about the MTV until later in the post.  (The SAT algorithm can determine if two shapes are intersecting without normalized vectors if you don&#8217;t need the MTV later.  I think this is probably what&#8217;s not clear.)  The axes array actually contains a list of normal vectors <strong>not</strong> normalized normal vectors.  Later I add a note in the &#8220;Projecting A Shape Onto An Axis&#8221; section about how the axis needs to be normalized if you want accurate MTVs.</p>\n<p>I have added some additional comments to the post in that section elaborating a little.  Does that address the confusion?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8898,
    "post": 366,
    "parent": 0,
    "date": "2012-01-29T13:20:01",
    "content": "<pre>\nVector[] axes = new Vector[shape.vertices.length];\n// loop over the vertices\nfor (int i = 0; i  (-y, x) or (y, -x)\n  axes[i] = normal;\n}\n</pre>\n<p>what i meant is that for this part, Vector normal is actually a &#8220;normalized normal vector&#8221;(which is equivalent to saying&#8221;unit normal vector&#8221;. thus the perp method should actually return a unit vector of (-y,x) or (y,-x), there is a little bit of confusion here.</p>\n",
    "author": "haoyuan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8897,
    "post": 366,
    "parent": 8896,
    "date": "2012-01-25T13:28:48",
    "content": "<p>Thanks for the comment.  However I think that my usage is correct since the axes that we are testing against are normal vectors; they are normal to their respective edge of the polygon shape (they just happen to be normalized later to obtain an accurate penetration depth).  Can you be more specific on where in the post I misuse the term?</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8896,
    "post": 366,
    "parent": 0,
    "date": "2012-01-25T10:57:56",
    "content": "<p>HI will<br />\nim a student :D and i do not mean to pick or sth.<br />\nreally appreciate your work, helped me a lot.<br />\nbut by definition, a normal vector is one that is perpendicular to another while a unit vector is the one with length of 1.<br />\njust saying finding the normal is not really accurate&#8230; would you mind just editing a little bit to make ppl aware of that? even though it will only take them like 1 second to find it on wiki, still its one of the things that make your 99/100 blog post 100/100 :D<br />\nthank you so much</p>\n",
    "author": "haoyuan",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f90de2327289718f6a1462b89fa8798a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9171,
    "post": 371,
    "parent": 9170,
    "date": "2012-01-14T17:36:24",
    "content": "<p>Yeah, I should do this.  Unfortunately, I don&#8217;t have all my links and pdfs that had originally used as references&#8230;  I went back through some of my references and here is what I could find.  It&#8217;s not much but it can get you started.  The 3rd link has over 150 references at the end that cover a number of topics.  (Thats how I typically go about finding information, endless references lookup using google)</p>\n<p>\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.cs.cmu.edu/~baraff/papers/sig96.pdf');\"  href=\"http://www.cs.cmu.edu/~baraff/papers/sig96.pdf\" rel=\"nofollow\">http://www.cs.cmu.edu/~baraff/papers/sig96.pdf</a> &#8211; David Baraff<br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/code.google.com/p/box2d/downloads/list');\"  href=\"http://code.google.com/p/box2d/downloads/list\" rel=\"nofollow\">http://code.google.com/p/box2d/downloads/list</a> &#8211; Erin Catto GDC Slides<br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/ftp.diku.dk/diku/image/publications/erleben.050401.pdf');\"  href=\"ftp://ftp.diku.dk/diku/image/publications/erleben.050401.pdf\" rel=\"nofollow\">ftp://ftp.diku.dk/diku/image/publications/erleben.050401.pdf</a> &#8211; Large reference for a number of topics<br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&amp;f=6&amp;t=63');\"  href=\"http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&amp;f=6&amp;t=63\" rel=\"nofollow\">http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&#038;f=6&#038;t=63</a> &#8211; A small list of references<br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/blog.generalrelativity.org/actionscript-30/constrained-dynamics-2-joints-and-global-constraints/');\"  href=\"http://blog.generalrelativity.org/actionscript-30/constrained-dynamics-2-joints-and-global-constraints/\" rel=\"nofollow ugc\">http://blog.generalrelativity.org/actionscript-30/constrained-dynamics-2-joints-and-global-constraints/</a></p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9170,
    "post": 371,
    "parent": 0,
    "date": "2012-01-14T04:23:55",
    "content": "<p>Hello,</p>\n<p>This is a very good description of constraint forces at play in physical systems. If you can, can you let us know what books/papers you have referenced in this theoretical development? I would like to learn more.</p>\n",
    "author": "marco",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/334e61a94bb38f5c6e8604660f7a5eb7?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/334e61a94bb38f5c6e8604660f7a5eb7?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/334e61a94bb38f5c6e8604660f7a5eb7?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9284,
    "post": 416,
    "parent": 0,
    "date": "2012-01-09T15:01:47",
    "content": "<p>Thanks! Very useful indeed!</p>\n",
    "author": "Vidmar",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1183fa4539bf1947e0a26d12c76bfbe6?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1183fa4539bf1947e0a26d12c76bfbe6?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1183fa4539bf1947e0a26d12c76bfbe6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=416"
}, {
    "id": 8894,
    "post": 366,
    "parent": 8893,
    "date": "2011-12-15T13:40:28",
    "content": "<p>Awesome man!  Finding the collision point and resolving the collision are difficult problems.  I have a <a href=\"http://www.dyn4j.org/2011/11/contact-points-using-clipping/\" rel=\"nofollow\">tutorial on a clipping algorithm</a> that both <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a> and <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box2d.org');\"  href=\"http://www.box2d.org\" rel=\"nofollow\">box2d</a> use to find collision points (there could be one or two depending on the configuration of the collision) that will work for any convex polygon.</p>\n<p>Unfortunately, I don&#8217;t have a tutorial (yet&#8230;) for collision resolution.  The link you have is a great reference.  The problem is inherently mathematical and complex.  Today, most collision resolution software uses an impulse based solution (that&#8217;s what&#8217;s in the link you have).  In that reference, equation 11 is the key, solving for <em>j</em> (the impulse), which will then be applied to both bodies to resolve the collision.  You can apply the impulse to the bodies using equation 7, 8, 9 &amp; 10.</p>\n<p>This is probably one of the more simple tutorials as most attempt to deal with other issues like stacking.  If you have any questions about the article there don&#8217;t hesitate to ask here.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8893,
    "post": 366,
    "parent": 0,
    "date": "2011-12-15T08:18:00",
    "content": "<p>Very cool, I got it figured out.  Thanks for your help!  However, while I&#8217;m at it, do you know how to find the point where the rectangles collide and therefore the rotation necessary to further resolve the collision.  For instance, say one rectangle is headed at another stationary rectangle at an angle.  When they collide, the first rectangle will rotate flat against the second rectangle and slide off.  Do you know or have any tutorials that explain how to carry out this calculation?  I found this:<br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.myphysicslab.com/collision.html');\"  href=\"http://www.myphysicslab.com/collision.html\" rel=\"nofollow ugc\">http://www.myphysicslab.com/collision.html</a><br />\nwhich is really cool but I find it difficult to follow and even more difficult to put to code.  I&#8217;ve tried a bunch of different stuff on my own but can&#8217;t seem to get anything that works under any circumstance.  Sorry if I&#8217;m asking too much, but you&#8217;re a really good resource and I&#8217;m eager to learn.  Thanks again!</p>\n",
    "author": "Jeff",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8892,
    "post": 366,
    "parent": 8891,
    "date": "2011-12-13T14:00:13",
    "content": "<p>A rectangle is a special kind of polygon.  It has 4 sides and by extension 4 normals to test.  But, since the pairs of sides are parallel we can reduce the number of normals to test for a rectangle to just 2 (the link you sent tests all 4, but this isn&#8217;t really a problem just a small performance enhancement).</p>\n<p>If we allow rotation of the rectangle then we must test all the vertices.  You can see this in the code in RotatedRectangle.cs lines 91-94.</p>\n<p>As far as the code, if I translate into a more mathematical format:</p>\n<pre>\nprivate int GenerateScalar(Vector2 theRectangleCorner,\nVector2 theAxis)\n{\n  // this is the same as theRectangleCorner.dot(theAxis)\n  // in essence this is finding the projection of the vector \n  // from the Origin to theRectangleCorner onto theAxis\n  float aNumerator = (theRectangleCorner.X * theAxis.X) +\n                     (theRectangleCorner.Y * theAxis.Y);\n                     \n  // this is the same as theAxis.dot(theAxis)\n  // in essence this is finding the squared magnitude of the \n  // axis vector.  You don't need to do this unless theAxis\n  // is not normalized\n  float aDenominator = (theAxis.X * theAxis.X) +\n                       (theAxis.Y * theAxis.Y);\n                       \n  // this is accounting for theAxis not being normalized\n  // so doesnt need to be done if the axis is already \n  // normalized\n  float aDivisionResult = aNumerator / aDenominator;\n  \n  // this is storing the projected point (not necessarily\n  // the min/max).  My tutorial does not compute this as its\n  // not necessary for SAT\n  Vector2 aCornerProjected = new Vector2(\n                       aDivisionResult * theAxis.X,\n                       aDivisionResult * theAxis.Y);\n\n  // this is performing theAxis.dot(aCornerProjected)\n  // in essence this is finding the projection of the \n  // corner on the axis.  Later in the code, \n  // RotatedRectangle.cs lines 105-108, will set the \n  // min and max.  Its possible that this projection \n  // could be the min or the max\n  // this line is equivalent to line 5 in my code in the\n  // Projecting A Shape Onto An Axis section\n  float aScalar = (theAxis.X * aCornerProjected.X) +\n                  (theAxis.Y * aCornerProjected.Y);\n  return (int)aScalar;\n}\n</pre>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8891,
    "post": 366,
    "parent": 0,
    "date": "2011-12-12T16:48:47",
    "content": "<p>Ahhhh, I see.  One more question though.  In some source code I found, the overlap of two rectangles is found by projecting each corner onto each axis.  This is done with the following code:</p>\n<pre>\nprivate int GenerateScalar(Vector2 theRectangleCorner,\nVector2 theAxis)\n{\n  //Using the formula for Vector projection. \n  //Take the corner being passed in\n  //and project it onto the given Axis\n  float aNumerator = (theRectangleCorner.X * theAxis.X) + \n                     (theRectangleCorner.Y * theAxis.Y);\n  float aDenominator = (theAxis.X * theAxis.X) + \n                       (theAxis.Y * theAxis.Y);\n  float aDivisionResult = aNumerator / aDenominator;\n  Vector2 aCornerProjected = new Vector2(\n                       aDivisionResult * theAxis.X,\n                       aDivisionResult * theAxis.Y);\n            \n  //Now that we have our projected Vector, \n  //calculate a scalar of that projection\n  //that can be used to more easily do comparisons\n  float aScalar = (theAxis.X * aCornerProjected.X) + \n                  (theAxis.Y * aCornerProjected.Y);\n  return (int)aScalar;\n}\n</pre>\n<p>Its in C#.</p>\n<p>The values are then stored into a list and the minimums and maximums are found and checked for overlap.  Is this the equivalent of doing the dot product of a corner and a normal?<br />\nI found this example here:<br />\n<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.xnadevelopment.com/tutorials/rotatedrectanglecollisions/rotatedrectanglecollisions.shtml');\"  href=\"http://www.xnadevelopment.com/tutorials/rotatedrectanglecollisions/rotatedrectanglecollisions.shtml\" rel=\"nofollow ugc\">http://www.xnadevelopment.com/tutorials/rotatedrectanglecollisions/rotatedrectanglecollisions.shtml</a><br />\nif you are interested.</p>\n<p>Thanks again for your help and the great comments.  People like you are the reason I&#8217;m able to even sort of get a grasp of programming.  I would not be able to do this on my own.</p>\n",
    "author": "Jeff",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8890,
    "post": 366,
    "parent": 8889,
    "date": "2011-12-12T13:37:11",
    "content": "<p>Great to hear its helped!  The Projection structure/class in this case is simply a storage structure, so something like this:</p>\n<pre>\npublic class Projection {\n  public double min;\n  public double max;\n  public Projection(double min, double max) {\n    this.min = min;\n    this.max = max;\n  }\n  public boolean isOverlapping(Projection p) {\n    // test the overlap between this and \n    // p using their min and max properties\n  }\n}\n</pre>\n<p>Once we have the projection for shape A and shape B, say p1 and p2, we compare the two to see if they are overlapping.</p>\n<pre>\np1.isOverlapping(p2);\n</pre>\n<p>See the comments above for more detail on how to know if two projections are overlapping.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8889,
    "post": 366,
    "parent": 0,
    "date": "2011-12-12T09:07:16",
    "content": "<p>Hello,<br />\nGreat tutorial, I&#8217;ve been studying it and some others for a few days now.  I&#8217;ve got almost everything figured out except when it comes to projecting a shape onto an axis.<br />\nIn the section &#8220;Projecting A Shape Onto An Axis&#8221;, on line 12 your wrote</p>\n<p>Projection proj = new Projection(min, max);</p>\n<p>What would that code entail?  Do you now project the minimum onto the maximum value?  But I suppose that wouldn&#8217;t work since min and max are both doubles.  I think this is the part thats getting me.<br />\nThanks a lot!</p>\n",
    "author": "Jeff",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f593a7401ef82a2f84ec0ce6681d41e2?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8888,
    "post": 366,
    "parent": 0,
    "date": "2011-12-02T19:41:37",
    "content": "<p>Hi William<br />\nWhen the particles collide with something, I first allow it to overlap, and then I use the mtv for each particle and I let it move to zero overlap&#8230;. Similar to what you have explained here.</p>\n",
    "author": "Sunada",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8887,
    "post": 366,
    "parent": 0,
    "date": "2011-12-02T19:34:14",
    "content": "<p>Hi William</p>\n<p>No I am not assuming circle shape for each particle. Initially I just inscribe the polygon within circles to give me some the centers of the polygons( All polygons are regular polygons). Yes I do have the collision detection and everything working. And you are right to some extend that I may not be applying the gravity enough. But even if I do that, I am implementing rigid boundary conditions at the corners of the box to push any particle that tries to leave the box. This might also be affecting the solution. But overall what I have observed is most of the particles touch each other, but there are say around 4-5 % of hexagonal particles in the system that do not contact anything&#8230;.. If you have a mail ID or something I can send you the picture of my ensemble for you to have a look at ?<br />\nTHanks for the reply</p>\n",
    "author": "Sunada",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8886,
    "post": 366,
    "parent": 8885,
    "date": "2011-11-29T13:26:49",
    "content": "<p>I may not be able to fix the floating particle problem without some source code.  I&#8217;m assuming you are using a Circle shape for each particle?  It sounds like you have the collision detection working, but the gravity isn&#8217;t being applied to some of the particles?  What are you doing when the particles collide with something?</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8885,
    "post": 366,
    "parent": 0,
    "date": "2011-11-28T19:14:32",
    "content": "<p>Hi Williams<br />\nFirst of all thank you so much. This article was really helpful in implementing SAT.<br />\nHowever, I have a few questions for you.<br />\n1. I am trying to implement polygon-polygon, and polygon-circle contact detection for simulation gravity settling of these particles in a box. I have around 4000 particles, and initially i avoid containment. Also initially all the particles are pretty much overlapping with atleast one more particle. However, when i look at my final ensemble of these particles, I get a couple of particles that are floating. I mean they are not in contact with any other particle, and they just float in air. This is however not physical, since in reality you can&#8217;t have floating particles in space. Do you have any suggestions ?</p>\n",
    "author": "Sunada",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/d19f92117740e2e3f02fbb71cb1c9c29?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9013,
    "post": 368,
    "parent": 9012,
    "date": "2011-11-21T13:48:59",
    "content": "<p>Good question.  In words this is the exit condition because:</p>\n<p>The last point in the simplex is the last point that was added to the simplex.  This point is the <strong>farthest</strong> point in the Minkowski Sum in the given direction.  If the point is not past the origin along <em>d</em> then we know that we can never enclose the origin.  We know that the point is past the origin along <em>d</em> by performing the dot product of the new point with the direction vector.</p>\n<p>Visually, here is a failure case:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk_29_1.png\" /></p>\n<p>The direction was (-1, 0).  All the points projected onto <em>d</em> gave point <em>p = (1, -4)</em> to be the farthest.  Then we come to the exit criteria where the projection of the point is compared against the projection of the origin.  As we can see the <em>p</em> projected onto <em>d</em>, <em>(-1, 0) &middot; (1, -4) = -1</em>, is less than the origin (the origin projected onto anything is zero).  This makes sense since we have found the point farthest in a direction and the origin is still past that point, and since the Minkowski Sum is convex we know we can never find another point past the origin in this direction.  Therefore we can never enclose the origin and we can immediately exit because no collision was found.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9012,
    "post": 368,
    "parent": 0,
    "date": "2011-11-19T15:49:39",
    "content": "<p>hi william:</p>\n<p>  for this section of code, i&#8217;m not quite understand</p>\n<pre>\nif (Simplex.getLast().dot(d) <= 0) {\n  // if the point added last was not past the origin\n  // in the direction of d\n  // then the Minkowski Sum cannot possibly \n  // contain the origin since the last point \n  // added is on the edge of the Minkowski Difference\n  return false;\n}\n</pre>\n<p>why this is the exit criteria?</p>\n",
    "author": "steven",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/be6e15b5f93e0bea753898b96ca2a3e4?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/be6e15b5f93e0bea753898b96ca2a3e4?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/be6e15b5f93e0bea753898b96ca2a3e4?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9169,
    "post": 371,
    "parent": 0,
    "date": "2011-11-07T19:37:00",
    "content": "<p>Thanks a lot !<br />\nWhat a silly question. haha.<br />\nMaybe I was confused with many block matrix.</p>\n",
    "author": "juhl",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9168,
    "post": 371,
    "parent": 9167,
    "date": "2011-11-07T14:50:27",
    "content": "<p>Thanks!</p>\n<p>Great question!  You are right if we left multiply of J^{-1} on both sides we could eliminate J.  It&#8217;s funny too because, at first I was like, &#8220;wow why did I not see this earlier&#8221;, but alas, there is a problem with this:</p>\n<p>The Matrix inverse is only defined for square matrices.  The Jacobian is not always square and therefore doesn&#8217;t always have an inverse.  This is why we cannot reduce the equation further until we actually know the dimensions of J.  In the later posts about specific equality constraints we see that many, if not all (I didn&#8217;t go back and look at all of them), are 1x4s or 2x4s.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9167,
    "post": 371,
    "parent": 0,
    "date": "2011-11-05T05:30:56",
    "content": "<p>Thanks for great posting</p>\n<p>Btw I got a question about Ax=b form.<br />\nCould it be cancel J matrix out on the left on both side ?<br />\nWhat I mean is M^{-1} J^T = -v_i instead of J M^{-1} J^T = -J v_i.</p>\n",
    "author": "juhl",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/605b671c864723bc829520d9ebe18bee?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9141,
    "post": 370,
    "parent": 9140,
    "date": "2011-10-19T16:55:45",
    "content": "<p>No problem.  If you use core shapes, ie the shapes used to detect collision are smaller than the real shapes, then you can use the closest points from the GJK distance method.  I haven&#8217;t researched the method enough to know for sure how to obtain the collision points from the closest points, but check out <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.google.com/url?sa=t&amp;source=web&amp;cd=20&amp;ved=0CGAQFjAJOAo&amp;url=http%3A%2F%2Fbullet.googlecode.com%2Ffiles%2FGDC10_Coumans_Erwin_Contact.pdf&amp;rct=j&amp;q=gjk%20distance%2C%20depth&amp;ei=-NWeTpyCKeHa0QHQ_6GYCQ&amp;usg=AFQjCNHIBZSsheNUn88HQtK76H4DRZ1y_Q&amp;sig2=Xty28qzfgPrcPQzXHc8xIQ&amp;cad=rja');\"  href=\"http://www.google.com/url?sa=t&amp;source=web&amp;cd=20&amp;ved=0CGAQFjAJOAo&amp;url=http%3A%2F%2Fbullet.googlecode.com%2Ffiles%2FGDC10_Coumans_Erwin_Contact.pdf&amp;rct=j&amp;q=gjk%20distance%2C%20depth&amp;ei=-NWeTpyCKeHa0QHQ_6GYCQ&amp;usg=AFQjCNHIBZSsheNUn88HQtK76H4DRZ1y_Q&amp;sig2=Xty28qzfgPrcPQzXHc8xIQ&amp;cad=rja\" rel=\"nofollow\">this PDF</a> pages 40-44 it talks about using a collision margin and the GJK distance method to find the penetration depth and contacts.</p>\n<p>In addition, <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.bulletphysics.org');\"  href=\"http://www.bulletphysics.org\" rel=\"nofollow\">Bullet</a> uses something called contact caching to get enough points for stable stacking as well.  As you can see in the PDF the distance method will typically give you just one contact point.  So Bullet stores the contact point, waits until the next iteration of the engine to get another point, and so on until it has enough points to solve the collision.  As new points are added, a reduction algorithm is used to only keep the points that are &#8220;best,&#8221; which is usually the deepest penetration points, or the points whose area is the largest, etc.</p>\n<p>In <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box2d.org/');\"  href=\"http://www.box2d.org/\" rel=\"nofollow\">Box2d</a> and <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a>, the contacts for each collision are found in one step instead of caching until enough points are available.  This is done by a feature clipping method that really requires its own post to explain well.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9140,
    "post": 370,
    "parent": 0,
    "date": "2011-10-18T15:14:14",
    "content": "<p>Hello,<br />\nFirst of all I want to say your guides are really good!</p>\n<p>I know that they asked this already, but I can found the contact points of the collision if I project the vertex which I got from the distance algorithem onto the edge of the second shanpe?</p>\n<p>If i have spelling mistakes, it&#8217;s because English isn&#8217;t my regular language :P<br />\nthank you!</p>\n",
    "author": "Hello",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5bd52f66c9f8450a5e5f3be6b01c537d?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5bd52f66c9f8450a5e5f3be6b01c537d?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5bd52f66c9f8450a5e5f3be6b01c537d?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8883,
    "post": 366,
    "parent": 8882,
    "date": "2011-10-05T12:40:25",
    "content": "<p>Thanks for your comments, you are exactly right about the perproduct.  I fixed the post to reflect the correct operation that is performed.  I also added the other snippet of code to the post to make things clearer.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8882,
    "post": 366,
    "parent": 0,
    "date": "2011-10-05T05:07:12",
    "content": "<p>One of your comments under Obtaining The Separating Axes seems to be incorrect<br />\n// perform the perproduct to obtain the normal<br />\nYou are not actually doing the perproduct here, you are just getting the normal/perpendicular. According to the tutorial you linked at the top the perproduct is a combination of getting the normal and doing the dot product but instead you are doing the dot product later on with your projections. </p>\n<p>Additionally I think it would also help if you added the following afterwords as it would clarify what you are trying to do.</p>\n<pre>axes[i] = normal;</pre>\n",
    "author": "Mogra",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/cc58970870994c2c60e2eb94c5488bba?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8881,
    "post": 366,
    "parent": 8880,
    "date": "2011-09-06T12:32:35",
    "content": "<p>The reason we care is only when we want to do something with the collision information.  For instance, if you wanted to push the shapes apart after detecting a collision you need the normal and depth.  You could do something like move the first shape half of the depth along the normal and move the second shape half of the depth in the opposite direction.  The problem is, you need to know which direction to move the first one.  If you have the opposite direction normal (i.e. pointing inward instead of outward) then you will move the shapes closer together instead of apart.</p>\n<p>In general, however, it doesn&#8217;t really matter which ones you use because at the end you will probably check the direction of the normal anyway by doing something like this:</p>\n<pre>\nVector n = // the normal from SAT;\nVector c1 = // the center point of the first shape;\nVector c2 = // the center point of the second shape;\nVector c1c2 = c2 - c1;\n// check if the normal is in the direction of the center to center vector\nif (c1c2.dot(n) < 0) {\n  // if its in the opposite direction then flip it\n  n.negate();\n}\n</pre>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8880,
    "post": 366,
    "parent": 0,
    "date": "2011-09-03T17:39:03",
    "content": "<p>Why do you care if you use the normal that points in or the normal that points out? They are the same axis.</p>\n",
    "author": "mtheall",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/b84c9215275a517ef9e0ea35245a7b59?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/b84c9215275a517ef9e0ea35245a7b59?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/b84c9215275a517ef9e0ea35245a7b59?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8879,
    "post": 366,
    "parent": 8878,
    "date": "2011-08-13T13:07:10",
    "content": "<p>The Projection class stores the minimum and maximum projections of the shape along d as it was explained <a href=\"http://www.dyn4j.org/2010/01/sat/#sat-projshape\" rel=\"nofollow\">here</a>.  So the overlap method of the Projection class tests whether the two projections overlap.  For example, if the direction you were projecting on was (1, 0), you could get projections like this:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat-proj-diff.png\" /><br />\nThe overlap is the gray area where the two projections overlap or the difference between max1 and min2.  So testing whether they overlap could be done by:</p>\n<pre>\nbool Projection::overlap(Projection* other) {\n  return this->max > other->min\n}\n</pre>\n<p>Unfortunately this condition is not sufficient.  You can see that this fails in this case: p1 = (3, 6) and p2 = (0, 2) .  The projections do not overlap (If you imagine these projections along the x-axis) but our overlap method will return true anyway.  You can look at my implementation of the Projection class <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java\" rel=\"nofollow\">here</a>.  I call it Interval instead of Projection since I use it for other things.</p>\n<p>From the source you can see that the overlap condition that I use is:</p>\n<pre>\nreturn !(this->min > other->max || other->min > this->max);\n</pre>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8878,
    "post": 366,
    "parent": 0,
    "date": "2011-08-13T07:34:25",
    "content": "<p>Thanks for your prompt answer on my earlier comment.<br />\nI am not sure what the statement<br />\nif (!p1.overlap(p2))<br />\nwould mean in context to my version of the problem. I am coding in C as I said in my last post.</p>\n<p>When I obtain the dot product to get the min and max values for the projection, does it mean that projection p1 overlaps p2 if p1 &lt; p2 or vice versa.</p>\n<p>It would be great if you could let me know what exactly do we check in the method overlap() ?</p>\n<p>Thanks!</p>\n",
    "author": "Shaw",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8877,
    "post": 366,
    "parent": 8876,
    "date": "2011-08-08T12:37:30",
    "content": "<p>You&#8217;ll have to forgive me, my C/C++ is really REALLY rusty so ill try my best.</p>\n<p>You can define the Axis struct/class exactly like the vertex one you have already.  In most projects I&#8217;ve seen points, vertices and vectors use the same class since they all need to store x and y components.  For instance:</p>\n<pre>\nstruct Vector {\n  double x, y;\n}\n\nstruct Triangle {\n  Vector v1, v2, v3;\n  Vector* axes = new Vector[3];\n}\n</pre>\n<p>Remember that an axis in the context of SAT is just a normalized vector.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8876,
    "post": 366,
    "parent": 0,
    "date": "2011-08-06T04:56:48",
    "content": "<p>I am trying to implement a SAT for triangles only and in 2D only, and this as a part of another assignment. I am a complete newbie in this area and I have been told to code in C.</p>\n<p>This examples given here are pretty clear, although I am not sure what structures I would need in C.</p>\n<p>For starters I thought,</p>\n<pre>\ntypedef struct vertex {\nint x, y;\n}Vertex;\n\nstruct triangle {\nVertex v1, v2, v3;\n};\n</pre>\n<p>would suffice. Is that correct? How can I define the axes structure?</p>\n<p>Thanks&#8230;</p>\n",
    "author": "Shaw",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9455f32614e734fea3f4528c67020557?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9011,
    "post": 368,
    "parent": 0,
    "date": "2011-07-27T08:38:02",
    "content": "<p>Oh wow! If I had taken the time to really think about it, I would have gotten that. I was thinking at the time that the cross product was commutative in the sense that 2 vectors would produce the same cross product no matter what. That&#8217;s neat that it works out like that.</p>\n",
    "author": "Brandon P.",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9010,
    "post": 368,
    "parent": 9008,
    "date": "2011-07-26T12:37:50",
    "content": "<p>Great questions!</p>\n<p>An easier way to calculate the triple product is using the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Triple_product#Vector_triple_product');\"  href=\"http://en.wikipedia.org/wiki/Triple_product#Vector_triple_product\" rel=\"nofollow\">triple product expansion</a>.</p>\n<p>The triple product obtains the vector perpendicular to the vector AB in the direction of the origin by the <strong>handedness of the coordinate system</strong>.  Most coordinate systems use the right hand rule, which means to (literally) line your index finger up with the first vector, in this case AB, then line up your middle finger with AO, then whatever direction your thumb is pointing, that will be the direction of the result.  Then you line up your index finger with the last result and line your middle finger up with AB, then the result is in the direction of your thumb.  This is how the triple product obtains the correct direction.  Take a look at the image <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.physics.udel.edu/~watson/phys345/Fall1998/class/1-right-hand-rule.html');\"  href=\"http://www.physics.udel.edu/~watson/phys345/Fall1998/class/1-right-hand-rule.html\" rel=\"nofollow\">here</a> for an example of what I mean.  In our case we have to use the right hand rule twice because there are two cross products.</p>\n<p>The result of <em>vector x AB</em> can return two different vectors depending on the direction of <em>vector</em>, in our 2D case, <em>vector</em> can be pointing out of the plane or into the plane.</p>\n<p>As you point out, in 2D you could simply get either the left or right normal easily by switching the x and y values and negating one, then check if you have the right direction by projecting it onto AO and negating if necessary.  This is because there are only two perpendicular vectors to choose from.  However, for 3D you must use the triple product because there are an infinite number of vectors perpendicular to AB.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9009,
    "post": 368,
    "parent": 0,
    "date": "2011-07-26T00:32:43",
    "content": "<p>Well, I just implemented it using my way, and it works fantastically. So unless there is any reason (speed?) that your way is better, I&#8217;m going to stick with the way I understand more. Awesome tutorial again!</p>\n",
    "author": "Brandon P.",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9008,
    "post": 368,
    "parent": 0,
    "date": "2011-07-25T21:46:03",
    "content": "<p>Awesome tutorial! I have a question about the AB x AO x AB.</p>\n<p>First of all, I&#8217;m not a huge mathematician, so I&#8217;m wondering how to find the cross product of two unit vectors.</p>\n<p>But more importantly, I don&#8217;t understand how this helps. I understand that it will give us a vector on the xy plane that is perpendicular to AB, and I get that. But how does it get which direction it should point? I mean, won&#8217;t a vertical vector x AB always result in the same vector, no matter which way AO was pointing to create the vertical vector?</p>\n<p>And even if it does do that somehow, would it not just be easier to get a perpendicular vector to AB, and then negate it if necessary? (AKA, if the projection of A (or B) on to the vector is greater than or less than the origin projected onto it.)</p>\n",
    "author": "Brandon P.",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1778342b10f9f254f5e71c4b2449b504?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8875,
    "post": 366,
    "parent": 0,
    "date": "2011-07-19T16:31:25",
    "content": "<p>Sorry, I didn&#8217;t see that, I only read the comment of C :P</p>\n<p>Thank you very much, that&#8217;s exactly what I was searching for! I think, I&#8217;ll try it first with the Ear Clipping-method.</p>\n",
    "author": "Severin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8874,
    "post": 366,
    "parent": 8871,
    "date": "2011-07-18T12:58:04",
    "content": "<p>Convex decomposition is a difficult subject to find readable papers on and simple examples for.  I have implemented 3 different convex decomposition algorithms in the <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a> project.  Here are the names of the algorithms:</p>\n<p>\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf');\"  href=\"http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\" rel=\"nofollow\">Ear Clipping</a><br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/mnbayazit.com/406/bayazit');\"  href=\"http://mnbayazit.com/406/bayazit\" rel=\"nofollow\">Bayazit</a><br />\n\t<a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.cs.ucsb.edu/~suri/cs235/Triangulation.pdf');\"  href=\"http://www.cs.ucsb.edu/~suri/cs235/Triangulation.pdf\" rel=\"nofollow\">Sweep Line</a></p>\n<p>The Ear Clipping and Sweep Line algorithms triangulate the polygon.  To reduce the number of triangles there is another algorithm that can be used called Hertel-Mehlhorn that combines triangles into convex polygons.</p>\n<p>The links here are just to give you a start.  I had the least trouble in implementing the Ear Clipping and Bayazit algorithms.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8873,
    "post": 366,
    "parent": 8872,
    "date": "2011-07-18T12:48:08",
    "content": "<p>That&#8217;s right, i changed my code to set the min and max to the value of the first dot product on line 1 and 2.  This allows the if/else to work as is.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8872,
    "post": 366,
    "parent": 0,
    "date": "2011-07-17T01:47:56",
    "content": "<blockquote><p>\n08\t } else if (p &gt; max) { else is not needed<br />\n‚Ä¶\n</p></blockquote>\n<p>That&#8217;s right, it should be:</p>\n<p>if (p  max) {<br />\n    max = p;<br />\n}</p>\n<p>Therefore an &#8220;if&#8221; but without an else. If the first value is the biggest value, he will be stored in min and would not be stored in max (because of the &#8220;else if&#8221;).</p>\n",
    "author": "Severin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8871,
    "post": 366,
    "parent": 0,
    "date": "2011-07-17T01:40:30",
    "content": "<p>Very good article, thanks a lot! I&#8217;m implementing SAT in Java &#8211; very comfortable according to this pseudo-code example :)<br />\nBut now, I&#8217;d like to handle SAT with non-convex polygons. According to the article, SAT can be applied to non-convex polygons, when we partition the polygon in convex parts (e.g. triangles) &#8211; quite obivous. Could anybody tell me, how to do this? I&#8217;ve been thinking about it for hours now, and haven&#8217;t found a &#8220;satisfying&#8221; solution :P<br />\nThere are also many suggestions (algorithms), but maybe someone could give me a concrete code example?<br />\nI&#8217;d be very glad about some useful inputs :)</p>\n",
    "author": "Severin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/8c096ff25742662ba9917821ebe3315a?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9007,
    "post": 368,
    "parent": 9006,
    "date": "2011-07-13T12:47:09",
    "content": "<p>Thanks, it&#8217;s always good to hear that it was of some use.</p>\n<p>I haven&#8217;t implemented an integer version of the algorithm before, so I&#8217;ll try my best.  Getting the zero vector as the new direction is a problem because the support method could return a point that&#8217;s <strong>not</strong> on the edge of the Minkowski Difference.  This is because the getFarthestPointInDirection will always return the last vertex in the polygon for both polygons (because of the dot product).  Getting a point that is not on the edge of the Minkowski Difference causes the if on line 11 to be invalid.</p>\n<p>However, this is a case that is inherent in the algorithm, so its not necessarily a bug, we just need to handle the case by doing something else like using the normal.  For the line segment case you can use the right hand perpendicular vector.  Thankfully, the normals in the triangle case don&#8217;t suffer from the this problem unless the triangle is very small because they use the other edges in the cross products instead of AO.</p>\n<p>I would suggest to always use the normal (or maybe even another arbitrary direction) instead of the zero vector.  This will ensure that the support method always returns a valid point for the if on line 11.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9006,
    "post": 368,
    "parent": 0,
    "date": "2011-07-12T14:14:40",
    "content": "<p>Hi William.</p>\n<p>First of all, thanks! Your tutorial is so far the best I&#8217;ve found on the Internet. I&#8217;ve  just implemented a simple INTEGER version of the algorithm, according to your explanation. Some math aspects are still not so clear but I&#8217;m going to work on it. Thus, sorry in advance if I&#8217;m wrong with what I&#8217;m going to tell you. :)</p>\n<p>I have to check my code carefully to find any bug. Anyhow, I have a question. I&#8217;ve tested different spatial configuration of two shapes and I&#8217;ve seen that the code has a strange behaviour.<br />\nIn your tutorial you talk about cases in which the perpendicular line of a two vertexes simplex (AB) is 0 because of the origin laying on the AB line. I&#8217;ve noticed that, when one of the shape is simply translated w.r.t. the other, or else when the two shapes align on an axis, I have the same behaviour. </p>\n<p>Is that a wrong behaviour or simply the effect of using integers? Using floating point that would really be a rare case. Indeed, two floating points are hardly the same. So it&#8217;s for floating coordinates.<br />\nChanging the check that relies on the direction (the one at your 11th line) from &#8220;&lt;=&quot; to &quot;&lt;&quot;, everything seems to work. Obviously contact cases are seen as collisions, but that&#039;s a behaviour I would have.</p>\n<p>If the behaviour is ok, the second question is: should I use the normal of AB as new direction (as you suggest) or just use the (0,0) direction? Does this affect only velocity or also correctness of the algorithm?</p>\n<p>Again, thanks for your answer and sorry if I misinterpreted something.<br />\nCheers,<br />\nF.</p>\n",
    "author": "Federico",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/f379190b3252d650d7394b620d208c10?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/f379190b3252d650d7394b620d208c10?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/f379190b3252d650d7394b620d208c10?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8870,
    "post": 366,
    "parent": 8869,
    "date": "2011-07-11T12:23:06",
    "content": "<p>Thanks, you are exactly right.  I actually changed the code to initialize the min/max with the projection of the first vertex since that will be more robust anyway.  Can&#8217;t believe I missed that&#8230;</p>\n<p>The else if on line 8 is actually required, otherwise the max would not be the max, it would be the last value that was not less than the min.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8869,
    "post": 366,
    "parent": 0,
    "date": "2011-07-11T07:16:21",
    "content": "<p>William,</p>\n<p>Your pseudo-code &#8220;Projecting a Shape Onto an Axis&#8221; have three mistakes:</p>\n<p>01\tdouble min = // really small number;   Should be really large number instead<br />\n02\tdouble max = // really large number;   Should be really small number instead<br />\n&#8230;<br />\n08\t  } else if (p &gt; max) {                         else is not needed<br />\n&#8230;</p>\n<p>Other than that, great tutorial and working code!</p>\n",
    "author": "C",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/a4a3bbedfff637b64df924466753efaf?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/a4a3bbedfff637b64df924466753efaf?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/a4a3bbedfff637b64df924466753efaf?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9237,
    "post": 440,
    "parent": 9236,
    "date": "2011-07-05T12:42:54",
    "content": "<p>No problem man.  I was just worried I had an error (considering I use what I have here in my <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box2d.org');\"  href=\"http://www.box2d.org\" rel=\"nofollow\">Box2d</a> like library for Java, <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a>).  I&#8217;d like these derivations to help others and be correct.</p>\n<p>Thanks for your comments and for looking over the details!<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9236,
    "post": 440,
    "parent": 0,
    "date": "2011-07-02T18:33:37",
    "content": "<p>The line constraint looks correct. I make everything relative to body A so I might have overlooked a term. Sorry if my comments caused any confusion.</p>\n<p>Cheers,<br />\n-Dirk</p>\n",
    "author": "Dirk Gregorius",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9235,
    "post": 440,
    "parent": 9234,
    "date": "2011-06-30T15:56:38",
    "content": "<p>Dirk,</p>\n<p>I think I have made the changes correctly to the equations above in your comment and thanks for the feedback.</p>\n<p>As you describe here:</p>\n<blockquote><p>\nWhen you derive constraints do not start with the velocity constraint. Solving on the velocity level is a linearization oo the original problem since you now are solving in the tangent space of the original constraint. You also need the position constraint for stabilization (e.g Baumgarte or Post-Projection). The best advice I can give for constraints is the following recipe (which I know from the Shabana book, but which is very likely in the engineering community much longer) is.</p>\n<p>1) Write down the position constraint<br />\n2) Build time derivative<br />\n3) Identify Jacobian by inspection using dC/dt = J * v\n</p></blockquote>\n<p>This is exactly what I do in the <a href=\"http://www.dyn4j.org/2010/12/line-constraint/\" rel=\"nofollow\">Line Constraint</a> post (the full derivation is there).  You can also see that the derivation does include the RHS.  In my derivation I chose to fix n (I call it u) in body b&#8217;s space (now that you point it out dt/dt might be confusing for people&#8230;).</p>\n<p>I&#8217;m still failing to see where my derivation went wrong.  Please check out the <a href=\"http://www.dyn4j.org/2010/12/line-constraint/\" rel=\"nofollow\">Line Constraint</a> post and let me know if I have missed something there.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9234,
    "post": 440,
    "parent": 0,
    "date": "2011-06-30T15:27:25",
    "content": "<p>There is a typo in the equations where I use t instead of n. Maybe someone can fix this.</p>\n",
    "author": "Dirk Gregorius",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9233,
    "post": 440,
    "parent": 0,
    "date": "2011-06-30T15:25:24",
    "content": "<p>Hi William,</p>\n<p>I haven&#8217;t checked your line constraint. In your derivation for the prismatic constraint you are not accounting for the change n over time. I use n instead of t, because dt/dt might look confusing. </p>\n<p>C = (x2 + r2 ‚Äì x1 ‚Äì r1) * n = 0</p>\n<p>dC/dt = (v2 + cross( omega2, r2 ) &#8211; v1 &#8211; cross( omega1, r1 ) ) * n <strong>+  (x2 + r2 ‚Äì x1 ‚Äì r1) * dn/dt</strong></p>\n<p>You are missing the RHS of the equation. So what is dn/dt? It is the change of a local axis. E.g. if you would store n in body1 dn1/dt = cross( omega1, r1 ). Lets define dp = (x2 + r2 ‚Äì x1 ‚Äì r1) you get</p>\n<p>dC/dt = (v2 + cross( omega2, r2 ) &#8211; v1 &#8211; cross( omega1, r1 ) ) * n +  dp * cross( omega1, r1 )</p>\n<p>When you derive constraints do not start with the velocity constraint. Solving on the velocity level is a linearization oo the original problem since you now are solving in the tangent space of the original constraint. You also need the position constraint for stabilization (e.g Baumgarte or Post-Projection). The best advice I can give for constraints is the following recipe (which I know from the Shabana book, but which is very likely in the engineering community much longer) is.</p>\n<p>1) Write down the position constraint<br />\n2) Build time derivative<br />\n3) Identify Jacobian by inspection using dC/dt = J * v</p>\n<p>As a side exercise if you are interested you can think about this. The derivation I showed is also true for non-penetration constraints. But here the RHS is always zero. </p>\n<p>This is a great site William. Keep up the fantastic work.</p>\n<p>Cheers,<br />\n-Dirk</p>\n",
    "author": "Dirk Gregorius",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9232,
    "post": 440,
    "parent": 9231,
    "date": "2011-06-30T12:34:49",
    "content": "<p>I&#8217;m not sure I understand the difference you are pointing out.  Are you saying that the derivation on the <a href=\"http://www.dyn4j.org/2010/12/line-constraint/\" rel=\"nofollow\">Line Constraint</a> Post is incorrect (since that is where I get the velocity constraint for the Prismatic Joint)?  Thanks for checking my work!</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 9231,
    "post": 440,
    "parent": 0,
    "date": "2011-06-29T16:07:14",
    "content": "<p>The Jacobian is not correct. You have to start from position constraint and then find the Jacobian by inspection.</p>\n<p>C = (x2 + r2 &#8211; x1 &#8211; r1) * t = 0</p>\n<p>This is a function of the C = f(t) * g(t) with f(t) = (x2 + r2 &#8211; x1 &#8211; r1) and g(t) = t. The derivative is dC/dt = df*dt * g + f * dg/dt.</p>\n<p>This is a common mistake people make for prismatic joints. You can look into Box2D for a correct Jacobian.</p>\n<p>For a general framework on how to indentify constraints and Jacobians I recommend looking at Shabana &#8220;Multibody Dynamics&#8221;</p>\n<p>Cheers,<br />\n-Dirk</p>\n",
    "author": "Dirk Gregorius",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=375"
}, {
    "id": 8868,
    "post": 366,
    "parent": 8867,
    "date": "2011-05-09T12:32:01",
    "content": "<p>Sorry I couldn&#8217;t get back to you sooner, but I&#8217;m glad that you found your problem.  Don&#8217;t be ashamed it&#8217;s always the small mistakes in places that you never would look that cause problems (at least that&#8217;s my experience).</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8867,
    "post": 366,
    "parent": 0,
    "date": "2011-05-07T23:45:33",
    "content": "<p>Actually, nevermind at all! I&#8217;ve found the mistake, and it&#8217;s so small and insignificant that I&#8217;m actually ashamed enough to not post it!</p>\n<p>Thanks anyways :)</p>\n",
    "author": "heishe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8866,
    "post": 366,
    "parent": 0,
    "date": "2011-05-07T14:00:54",
    "content": "<p>Oh damnit, another comment (sorry for that, but I can&#8217;t edit).</p>\n<p>I actually didn&#8217;t delete anything, but the XHTML tags have problems with the smaller than and bigger than sign :) I&#8217;m going to post all the relevant code again, since the other code pieces also contain these signs:</p>\n<pre>\n\tpublic static Vector2f doCollideEx(Box a, Box b)\n\t{\t\t\n\t\tProjection2D p1,p2;\n\t\tfloat overlap = Float.MAX_VALUE;\n\t\tVector2f axis = new Vector2f(0.0f,0.0f);\n\t\t\n\t\tVector2f[] edge_normals = a.getEdgeNormals();\n\t\tfor(int i=0;i&lt;2;i++)\n\t\t{\n\t\t\tp1 = a.projectOnto(edge_normals[i]);\n\t\t\tp2 = b.projectOnto(edge_normals[i]);\n\t\t\tif(!p1.overlaps(p2))\n\t\t\t\treturn new Vector2f(0.0f,0.0f);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p1.getOverlap(p2)&lt;overlap)\n\t\t\t\t{\n\t\t\t\t\toverlap = p1.getOverlap(p2);\n\t\t\t\t\taxis = edge_normals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge_normals = b.getEdgeNormals();\n\t\tfor(int i=0;i&lt;2;i++)\n\t\t{\n\t\t\tp1 = a.projectOnto(edge_normals[i]);\n\t\t\tp2 = b.projectOnto(edge_normals[i]);\n\t\t\n\t\t\tif(!p1.overlaps(p2))\n\t\t\t\treturn new Vector2f(0.0f,0.0f);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p1.getOverlap(p2)&lt;overlap)\n\t\t\t\t{\n\t\t\t\t\toverlap = p1.getOverlap(p2);\n\t\t\t\t\taxis = edge_normals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//test if translation vector is pointing away from box b\n\t\t//and if so,  point the vector in its opposite direction\n\t\tVector2f ba = Vector2f.subtract(a.getCenter(), b.getCenter());\n\t\tif(axis.dotProduct(ba) &lt; 0.0f)\n\t\t\taxis.negate();\n\t\t\n\t\treturn Vector2f.multiply(axis,overlap);\n\t}\n\n\n\tpublic Projection2D projectOnto(Vector2f axis)\n\t{\n\t\tfloat min = Float.MAX_VALUE;\n\t\tfloat max = Float.MIN_VALUE;\n\t\t\n\t\tfor(int i=0;i max)\n\t\t\t\tmax = dot;\n\t\t\tif(dot &lt; min)\n\t\t\t\tmin = dot;\n\t\t}\n\t\treturn new Projection2D(min,max);\n\t}\n\n\tpublic boolean overlaps(Projection2D b)\n\t{\n\t\treturn (!(b.max &lt; this.min || this.max &lt; b.min));\n\t}\n\t\n\tpublic float getOverlap(Projection2D b)\n\t{\n\t\treturn (this.max &lt; b.max) ? this.max - b.min : b.max - this.min;\n\t}\n</pre>\n",
    "author": "heishe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8865,
    "post": 366,
    "parent": 0,
    "date": "2011-05-07T13:56:08",
    "content": "<p>Oops, I just noticed, when I posted the comment I accidentally deleted out part of the projectionOnto code. This if the full one:</p>\n<pre>\n\tpublic Projection2D projectOnto(Vector2f axis)\n\t{\n\t\tfloat min = Float.MAX_VALUE;\n\t\tfloat max = Float.MIN_VALUE;\n\t\t\n\t\tfor(int i=0;i max)\n\t\t\t\tmax = dot;\n\t\t\tif(dot &lt; min)\n\t\t\t\tmin = dot;\n\t\t}\n\t\treturn new Projection2D(min,max);\n\t}\n</pre>\n",
    "author": "heishe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8864,
    "post": 366,
    "parent": 0,
    "date": "2011-05-07T12:10:51",
    "content": "<p>Hi.</p>\n<p>First of all, thanks for the quick answer! That was very helpful and did exactly what I wanted. </p>\n<p>Still, one bug/problem seems to be left for me: The algorithm seems to have problems with edges which are not axis-aligned. It both doesn&#8217;t detect correct collision occurrence and as a result of that it also produces wrong minimal translation vectors. </p>\n<p>I&#8217;ve searched for a long time now where the error in my code might be, but I just can&#8217;t find it, so I guess I won&#8217;t get around just posting my implementation here (it&#8217;s in Java):</p>\n<p>The main algorithm is this:</p>\n<pre>public static Vector2f doCollideEx(Box a, Box b)\n\t{\t\t\n\t\tProjection2D p1,p2;\n\t\tfloat overlap = Float.MAX_VALUE;\n\t\tVector2f axis = new Vector2f(0.0f,0.0f);\n\t\t\n\t\tVector2f[] edge_normals = a.getEdgeNormals();\n\t\tfor(int i=0;i&lt;2;i++)\n\t\t{\n\t\t\tp1 = a.projectOnto(edge_normals[i]);\n\t\t\tp2 = b.projectOnto(edge_normals[i]);\n\t\t\tif(!p1.overlaps(p2))\n\t\t\t\treturn new Vector2f(0.0f,0.0f);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p1.getOverlap(p2)&lt;overlap)\n\t\t\t\t{\n\t\t\t\t\toverlap = p1.getOverlap(p2);\n\t\t\t\t\taxis = edge_normals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge_normals = b.getEdgeNormals();\n\t\tfor(int i=0;i&lt;2;i++)\n\t\t{\n\t\t\tp1 = a.projectOnto(edge_normals[i]);\n\t\t\tp2 = b.projectOnto(edge_normals[i]);\n\t\t\n\t\t\tif(!p1.overlaps(p2))\n\t\t\t\treturn new Vector2f(0.0f,0.0f);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(p1.getOverlap(p2)&lt;overlap)\n\t\t\t\t{\n\t\t\t\t\toverlap = p1.getOverlap(p2);\n\t\t\t\t\taxis = edge_normals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//test if translation vector is pointing away from box b\n\t\t//and if so,  point the vector in its opposite direction\n\t\tVector2f ba = Vector2f.subtract(a.getCenter(), b.getCenter());\n\t\tif(axis.dotProduct(ba) &lt; 0.0f)\n\t\t\taxis.negate();\n\t\t\n\t\treturn Vector2f.multiply(axis,overlap);\n\t}\n}</pre>\n<p>Just as a little sidenote: The reason I&#8217;m running &#8220;i&#8221; only through 0 and 1 is of course that I only need to check the first two axis.</p>\n<p>There are multiple custom classes used in that method, but I can assure you that all of them function correctly and produce correct values (I&#8217;ve tested them rigorously using various visualizations etc.). I also manually have to rotate the boxes when the user rotates them by a certain degree, but that code also works perfectly and produces correct values. </p>\n<p>I&#8217;m pretty sure that the error is somewhere in my code where I project a box onto an axis (as in a.projectOnto(axis)), although I have no idea what might be wrong about it. It&#8217;s part of the &#8220;Box&#8221; class, which is basically your shape class, just simplified to be a box:</p>\n<pre>\n\tpublic Projection2D projectOnto(Vector2f axis)\n\t{\n\t\tfloat min = Float.MAX_VALUE;\n\t\tfloat max = Float.MIN_VALUE;\n\t\t\n\t\tfor(int i=0;i max)\n\t\t\t\tmax = dot;\n\t\t\tif(dot &lt; min)\n\t\t\t\tmin = dot;\n\t\t}\n\t\treturn new Projection2D(min,max);\n\t}\n</pre>\n<p>Theoretically, my overlap code might also be producing values, but I have no idea how that could be:</p>\n<pre>\n\tpublic boolean overlaps(Projection2D b)\n\t{\n\t\treturn (!(b.right  this.right));\n\t}\n\t\n\tpublic float getOverlap(Projection2D b)\n\t{\n\t\treturn (this.right &lt; b.right) ? this.right - b.left : b.right - this.left;\n\t}\n</pre>\n<p>Sorry to bother you with lots of code, but I&#8217;m clueless right now and  don&#8217;t know how to fix it.</p>\n",
    "author": "heishe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8863,
    "post": 366,
    "parent": 8862,
    "date": "2011-05-06T12:53:47",
    "content": "<p>If I understand you correctly, you are asking what to do when rectangles are aligned and they produce the same penetration but opposing directions.  Like this:</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat-problem1.png\" /></p>\n<p>Where</p>\n<p>a = (1, 0) with a depth of 1 unit</p>\n<p>And as you point out the blue rectangle will have nearly the same</p>\n<p>b = (-1, 0) with a depth of 1 unit</p>\n<p>What I would suggest is that you always return a vector that is pointing from shape A to shape B from SAT.  This way you don&#8217;t have to worry about which way the vector is pointing.</p>\n<pre>\nv = // the separation vector\nca = // shape a's center\ncb = // shape b's center\ncacb = cb - ca // the vector from ca to cb\nif (v.dot(cacb) < 0) {\n  // if the separation vector is in the opposite direction\n  // of the center to center vector then flip it around\n  // by negating it\n  v.negate();\n}\n</pre>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8862,
    "post": 366,
    "parent": 0,
    "date": "2011-05-05T14:57:19",
    "content": "<p>I hope the author still somehow receives this comment:</p>\n<p>Naturally, when I have two rectangles, this algorithm spits out the same overlaps+axis of the smallest displacement vector (since the two opposing edges of a rectangle are of course mathematically identical). </p>\n<p>This creates a problem where the algorithm detects the optimal distance that one rectangle needs to be pushed in order to move it out of the rectangle that it&#8217;s colliding with, but in one of two cases it finds the wrong direction in which it needs to be pushed ( namely the exact opposite from the direction in which it needs to be pushed).</p>\n<p>Is there a way to fix that &#8220;bug&#8221; or is that a mathematical limitation that I need to accept in order to use this algorithm on rectangles?</p>\n",
    "author": "heishe",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/15ca0d8471100d12247a315d66f91206?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9005,
    "post": 368,
    "parent": 9004,
    "date": "2011-04-21T12:24:49",
    "content": "<p>Maybe these images will help.</p>\n<p>Imagine the vectors a and b in the xy-plane.  The cross product of those vectors, in a right handed coordinate system, yields the vector a x b along the positive z-axis.</p>\n<table width=\"90%\">\n<tr>\n<td style=\"text-align: center;\" width=\"50%\">\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/cross-product2.png\" alt=\"a x b\" />\n</td>\n<td style=\"text-align: center;\" width=\"50%\">\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/cross-product3.png\" alt=\"(a x b) x b\" />\n</td>\n</tr>\n</table>\n<p>For the next image we imagine that the a x b vector is the new a vector.  So we line up our right hand index finger along a x b and our middle finger along b and we get the final vector (a x b) x b which lies in the xy-plane.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9004,
    "post": 368,
    "parent": 0,
    "date": "2011-04-20T03:35:36",
    "content": "<p>Yeah, I suppose the trickiest thing for me is to figure out which direction the vector is heading on the third cross.</p>\n",
    "author": "Joe",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9003,
    "post": 368,
    "parent": 9002,
    "date": "2011-04-19T12:33:26",
    "content": "<p>That&#8217;s funny because I&#8217;m the exact same way.  If I don&#8217;t understand it, I wont use it either.  Using the cross product requires you to define the &#8220;handedness&#8221; of your coordinate system.  A right handed system is typically chosen.</p>\n<p>If we look at the image below the cross product of the two vectors a and b yield another vector that is perpendicular to both of these vectors.  We have to define the handedness because there are actually two vectors that meet that criteria.  One points out from the plane and the other points into the plane.</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/cross-product1.png\" alt=\"Cross Product Handedness\" /></p>\n<p>If we choose a right handed system, we literally line up our <strong>right hand</strong> index finger with the first vector, a, and then line up our middle finger with the second vector, b.  Your thumb points in the direction of the result, in this case out from the plane.</p>\n<p>So if we wanted to get the normal of an edge, we can take the cross product to get a vector perp to both vectors, then cross product one more time to get a vector perp to the result and the original edge.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9002,
    "post": 368,
    "parent": 0,
    "date": "2011-04-19T05:15:24",
    "content": "<p>I was wondering about the triple cross products, ex: (AB x AO) x AB . I&#8217;m having to review my vector algebra, and trying to figure out how to point the perpendicular vector in the right direction. How did you come to select that particular order?</p>\n<p>I&#8217;m one of those that has to understand how something works before I can use it.</p>\n",
    "author": "Joe",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/52c67254c0c3e008c2fb28b3ad58bdfd?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9139,
    "post": 370,
    "parent": 9138,
    "date": "2011-04-04T13:03:30",
    "content": "<p>Good question, and the distinction is good to note here.  The post only covered how to obtain the contact normal and depth, not the contact points.  In fact, finding the contact points from the contact normal and depth is a entirely different subject in itself.  I do not have a post on this yet.</p>\n<p>The <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a> project uses a modified clipping method (handling circle shapes is the only difference really) that is used in <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box2d.org');\"  href=\"http://www.box2d.org\" rel=\"nofollow\">box2d</a> to obtain the contact points from the contact normal and depth.</p>\n<p>If you choose to go the &#8220;Core Shapes&#8221; route then you may be able to get this information by using the GJK distance algorithm.  The GJK distance algorithm can be used on the &#8220;Core Shapes&#8221; to obtain the closest points and separation vector (see the <a href=\"http://www.dyn4j.org/2010/04/gjk-distance-closest-points/\" rel=\"nofollow\">GJK &#8211; Distance &amp; Closest Points</a> post).  Then you can translate these points along the separation vector depth distance to obtain a collision point on each shape (you probably should only use one of them).  I haven&#8217;t thought it through completely, but this may or may not be accurate.  I want to say that <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.bulletphysics.org');\"  href=\"http://www.bulletphysics.org\" rel=\"nofollow\">bullet</a> is doing this for shallow penetration, but I don&#8217;t remember.  There are more details here, but this is probably enough to get you going for now.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9138,
    "post": 370,
    "parent": 0,
    "date": "2011-04-03T17:49:21",
    "content": "<p>I don&#8217;t understand how to get contact point from GJK and EPA.<br />\nCould you please give me some instructions</p>\n<p>Thanks</p>\n",
    "author": "weijin",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2f64ee1b61bb4263866fdda82e13c630?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2f64ee1b61bb4263866fdda82e13c630?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2f64ee1b61bb4263866fdda82e13c630?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9001,
    "post": 368,
    "parent": 0,
    "date": "2011-03-25T04:45:55",
    "content": "<p>William,</p>\n<p>We feel you are contributing very well here. Would you be interested in authoring a book chapter, possibly a tutorial on GJK, for our upcoming book on Video Game Design? If interested, send me an email.</p>\n<p>KEB</p>\n",
    "author": "KEB",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/51c744ecbcfc89a07bb3d9b0a43c437f?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/51c744ecbcfc89a07bb3d9b0a43c437f?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/51c744ecbcfc89a07bb3d9b0a43c437f?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8861,
    "post": 366,
    "parent": 8860,
    "date": "2011-03-08T03:12:11",
    "content": "<p>Glad to hear that this helped you!</p>\n<p>The reason p2 would change is because (assuming you used the window coordinate system, where (0, 0) is in the top left corner) is because y decreases instead of increases when you go &#8220;up.&#8221;</p>\n<p>p2 was (2, 1.5) in a normal coordinate system, but in this other one it would have been (2, 0.5) since we went up by 1 and up is in the negative direction.</p>\n<p>But like I said, this isn&#8217;t really important if you use a coordinate system you are comfortable with and then transform when drawing.  The comment was only to show that the math still works, its just not as intuitive.</p>\n<p>I also found some mistakes in my images for the winding, I fixed them.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8860,
    "post": 366,
    "parent": 0,
    "date": "2011-03-07T18:06:44",
    "content": "<p>Thanks alot for the fast reply! I had alot of strugglings with understanding when the coordinate system where the top left corner is (0,0), but when you say that it only matters when drawing things really gets clearer.</p>\n<p>I create my polygons in a counter clockwise order and after some figuring that left me with this</p>\n<pre>\n// side is the current side handled\n// for a square side 1 = the left etc\naxis.x = -(polygonA-&gt;pointList[side-1].y - polygonA-&gt;pointList[side].y);\naxis.y = polygonA-&gt;pointList[side-1].x - polygonA-&gt;pointList[side].x;\n</pre>\n<p>What I don&#8217;t understand from your example is this:</p>\n<pre>\n// for p2 will be 0.5 instead of 1.5\nVector p2 = new Vector(2, 0.5);\n</pre>\n<p>Why?</p>\n<p>Thanks for a great guide and great replies btw!:)</p>\n",
    "author": "simpler",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8859,
    "post": 366,
    "parent": 8858,
    "date": "2011-03-07T13:53:36",
    "content": "<p>The normal that you want is the one that points <em>outward</em> from the polygon.  So if we look at the example above, we want the right hand normal if the winding is anti-clockwise, and the left hand normal if the winding is clockwise.</p>\n<p>We want the normal below (which is determined by the winding):<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2015/08/polygon-winding2.png\" /></p>\n<p>Yes, in Java2D (and I&#8217;m sure other language&#8217;s 2D APIs) use a coordinate system that has (0, 0) at the top left corner of the window.  You  can use the same math:</p>\n<p>If we place the above shape on that kind of coordinate system the two points would be:</p>\n<pre>\nVector p1 = new Vector(1, 1);\n// since the positive y-axis is pointing \"down\" the y coordinate\n// for p2 will be 0.5 instead of 1.5\nVector p2 = new Vector(2, 0.5);\n\nVector edge = p2 - p1;\n// edge is now (1, -0.5)\n\n// => (-y, x) = (0.5, 1)\nVector leftHandNormal = edge.left();\n\n// => (y, -x) = (-0.5, -1)\nVector RightHandNormal = edge.right();\n</pre>\n<p>Here we see that the edge that points outward from the shape is the left-hand normal.</p>\n<p>Now if we think about this, we realy only need to use this coordinate system when <em>drawing</em> the shapes.  You can store your coordinate data in any coordinate system you want.  So, instead, I would suggest storing your shape/vector data in whatever coordinate system you are comfortable with, then we you go to draw everything transform the coordinate system so that it matches yours.</p>\n<p>You can do this in Java2D like:</p>\n<pre>\nGraphics2D g = // get from the Canvas or whatever\n// save the current transformation\nAffineTransform old = g.getTransform();\n// apply a translation transform to place (0, 0) in the center of the window\ng.translate(width / 2, height / 2);\n// apply a flip transformation to flip the y-axis\ng.scale(1, -1);\n\n// draw your stuff\n// everything you draw here will be transformed from your\n// coordinate system (typically called \"world coordinates\") to\n// the window's coordinate system\n\n// restore the old transformation\ng.setTransform(old);\n</pre>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8858,
    "post": 366,
    "parent": 0,
    "date": "2011-03-07T10:43:58",
    "content": "<p>Refering to your last post William, how should I find out which normal I want?<br />\nAlso:<br />\nThe Y value gets bigger when it&#8217;s going down in a coordinate system, how should I take that into account?</p>\n",
    "author": "simpler",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/0aaa2d5cd71028bf7b5d65594e9d1a64?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 9000,
    "post": 368,
    "parent": 8999,
    "date": "2011-03-03T14:49:24",
    "content": "<p>Thanks for pointing that out, I fixed it within the post.  Oddly enough, I had it correct in the Checking The Simplex section&#8230;</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8999,
    "post": 368,
    "parent": 0,
    "date": "2011-03-02T16:41:53",
    "content": "<p>AB = a &#8211; b<br />\nAO = a &#8211; ORIGIN</p>\n<p>Should that be AB = b &#8211; a<br />\nAO = ORIGIN &#8211; a</p>\n",
    "author": "Kumar",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/4b670a893a82badce493f94d2393a5be?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/4b670a893a82badce493f94d2393a5be?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/4b670a893a82badce493f94d2393a5be?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9107,
    "post": 369,
    "parent": 9106,
    "date": "2011-02-08T14:25:56",
    "content": "<p>Yes, you are correct.</p>\n<p>For the 3D case you can build a triangle (after building the line segment) by obtaining a normal of the line segment in the direction of the origin:</p>\n<pre>\nd = // choose some direction\n// get the first point\nSimplex.add(support(A, B, d);\n// get the second point\nSimplex.add(support(A, B -d);\n// now we have a line segment\n// perform the triple product to obtain a new search direction\na = Simplex[0];\nb = Simplex[1];\nab = b - a;\nao = -a; // same thing as ORIGIN - a\nd = tripleProduct(ab, ao, ab); // be careful here because if the origin lies on the line ab then this will yield the zero vector\n// now get the last point to make the triangle\nSimplex.add(support(A, B, d);\n// now you can start the loop\n</pre>\n<p>Now that you have a triangle your next search direction would be the surface normal of the triangle in the direction of the origin.  Then obtain a support point, then reduce the 4 points to 3.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9106,
    "post": 369,
    "parent": 0,
    "date": "2011-02-07T14:56:24",
    "content": "<p>So right now my understanding is:<br />\nIf we have two objects in interaction, then we&#8217;ll always be able to locate at least one point giving a positive dot product in the direction we&#8217;re searching for. And for each point added in, we can generate a simplex to determine if it contains the origin. And eventually we&#8217;ll find such origin.<br />\nIf the two objects are not in contact, we&#8217;ll soon jump out of the loop when we can not find any points giving positive &#8220;dot product&#8221;.<br />\nIs it correct? </p>\n<p>One more question, I&#8217;m trying to do a 3D case. So I need to build a triangle first then add a point in the search direction to get a tetrahedron. How to get the first triangle? With the same method in 2D, I can easily find a line segment, then doing a triple cross product will give a third point and thus generating a triangle. Do you think this can be the triangle to start with? thanks.</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9105,
    "post": 369,
    "parent": 9103,
    "date": "2011-02-07T13:50:47",
    "content": "<p>No problem, these questions will help everyone who reads them.</p>\n<p>As for question 1:  You do not have to check if the simplex contains the origin.  The simplex in the distance check is a line segment anyway and can only &#8220;contain&#8221; the origin if the origin lies on the line segment, in which case you must determine if this is considered a collision or not.  You may have noticed that in my code I do check if the origin lies within the triangle (before throwing away one of the points).  I do this because my distance method can be called by anyone, and they may not know that the distance method assumes that the shapes are separated.  Otherwise I would remove that check.</p>\n<p>As for question 2:  Right, the termination case is a bit tricky.  The termination condition in this algorithm is when the projection of the simplex points are equal (a better one, which is what I use in the post, is to test if the difference in the projection of the simplex points is below some tolerance).</p>\n<p>So in iteration 1, you find c, the new point, to be (-11, -1).  If we project this onto the search direction along with either of the current simplex points and subtract these we get 7.64, which is not small enough to end.</p>\n<p>So in iteration 2, you find c to be (-4, -1).  If we do the same thing here we get 2.2, which again is not small enough to end.</p>\n<p>Now in iteration 3, you find c to be (1, 3).  If we do the same thing again we get 0, which is less than our tolerance, so we end the loop.</p>\n<p>What this means is that the simplex (the red line segment) cannot get any closer to the origin.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9104,
    "post": 369,
    "parent": 9102,
    "date": "2011-02-07T13:32:32",
    "content": "<p>That&#8217;s a good observation.  The reason they are done differently is because of the assumptions.  In the first post we are making the assumption that the origin lies within the Minkowski sum, terminating when we verify this (or cannot verify).  Because we need to know where the origin lies (by voronoi regions) and find a new search direction, we just put the two together.</p>\n<p>Finding the distance is similar but slightly different.  No longer are we checking if the simplex contains the origin since the assumption is that the Minkowski sum does not contain the origin.  In addition, the simplex is a line segment, instead of a triangle, and therefore cannot contain the origin (if we ignore cases where the origin is on the line segment).  Because of this we don&#8217;t need to worry about voronoi regions or where the origin lies.  The search direction is always the normal of the line segment in the direction of the origin.</p>\n<p>Given that, I chose to use P = AB.mult(t).add(A) which obtains the point on the line segment that is closest to the origin so that when the loop terminates I&#8217;ll be able to get the separation distance by simply getting the magnitude of P.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9103,
    "post": 369,
    "parent": 0,
    "date": "2011-02-07T02:10:11",
    "content": "<p>I&#8217;m trying to use this case to see how to jump out of the loop. Starting with A(1,3) and B(-9,10), then doing triple cross product ABxAOxAB give the direction (-0.573,-0.819). Then I use all the vertices on the edge to dot product with the direction vector. For 3 vertices give positive values and vertex (-11,-1) gives the largest one (Question 1: Here, should I check if the simplex contains the origin?).  </p>\n<p>So (-11,-1) is added on as the new point A, same as in your post. Then I do the triple cross product to find the direction (0.316, -0.949) to search. doing dot product of all vertices with the new searching direction gives all negative values. So, question 2, does it mean the loop should be terminated here? or should I keep on searching in another direction until it leads back to the vertex that has already been checked before? Cuz when I keep on doing triple cross product to find the new point, it leads me to (-4,-1), and then back to (1,3) where I started. </p>\n<p>Thanks a lot for answering all my questions.</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9102,
    "post": 369,
    "parent": 0,
    "date": "2011-02-07T01:13:33",
    "content": "<p>I notice that in this post, you first find the new point P = AB.mult(t).add(A), then the search in the direction of -P. While in the previous post, the direction is found by doing the triple cross product. What&#8217;s the reason for this? Thanks.</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9101,
    "post": 369,
    "parent": 9100,
    "date": "2011-02-06T19:41:32",
    "content": "<p>The other point could have been chosen as well.  If we use better precision than in the examples above the choice to use the point (9, 9) or (4, 5) becomes apparent:</p>\n<p>d.dot(4, 5) = -1.405563856997454589716925831015<br />\nd.dot(9, 9) = -1.405563856997454589716925831017</p>\n<p>You&#8217;ll notice that (9, 9) is insignificantly smaller than (4, 5) and if in your code you use floating point variables, they will be identical.  This is the case because the direction vector is the normal of the edge (9, 9) to (4, 5) and therefore the projection of both points should be the same.</p>\n<p>In these cases, you can use either one, it doesn&#8217;t matter, you&#8217;ll get the same result!</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 8998,
    "post": 368,
    "parent": 8997,
    "date": "2011-02-06T18:54:06",
    "content": "<p>Good question.  Yes you can start anywhere, although I would start with a point that was found the way all the others will be.  This way you ensure that the point is on the edge of the Minkowski sum.  You can find the point farthest in any direction by projecting all the points of the polygon onto the direction vector:</p>\n<p>For instance if d was (1, 0):<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk-figure13.png\" /></p>\n<p>We can see that the point (13, 6) is the farthest point in that direction.  We can mathematically obtain this result if we perform the dot product of the points with the direction:</p>\n<pre>\nd.dot(13, 6) = 1 * 13 + 0 * 6 = 13\nd.dot(6, 6)  = 1 * 6 + 0 * 6 = 6\nd.dot(8, 2)  = 1 * 8 + 0 * 2 = 8\nd.dot(11, 1) = 1 * 11 + 0 * 1 = 11\n</pre>\n<p>Yes, if you need to show the Minkowski sum, then you must subtract all possible combinations of the points from both objects and take the convex hull of the resulting point set (notice in the picture above that some points are inside the Minkowski sum and are therefore ignored).</p>\n<p>To determine whether there is collision between the two shapes you don&#8217;t have to subdivide the Minkowski sum.  That&#8217;s what make this algorithm fast, in that you only have to iteratively build one tetrahedron inside the Minkowski sum that contains the origin.  If you cannot, then the shapes are not colliding.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9100,
    "post": 369,
    "parent": 0,
    "date": "2011-02-06T18:43:08",
    "content": "<p>In iteration 3, after finding the new direction d(0.62, -0.78), then the point in that direction should be (-4,-1). It is the same with the point added in the iteration 2. My reason is (-4,-1) dot (0.62,-0.78)=-1.7. It is larger than the dot product of (1,3) and (0.62,-0.78)=-1.72. Would you please tell me why you choose (1,3) here? Thanks very much.</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 8997,
    "post": 368,
    "parent": 0,
    "date": "2011-02-06T02:07:21",
    "content": "<p>We can start from any point in the Minkowski difference, but how do you choose the point added on later in the direction we&#8217;re searching? I mean how to numerically determine one point on the edge is the farthest in the direction we&#8217;re looking for? Should I just use all the vertices on the boundary?</p>\n<p>I&#8217;m trying to do a 3D collision model. So if contact happens, doing the Minkowski difference of all the vertices on object A and object B will generate a polyhedron. So, can I divide this polyhedron into several tetrahedrons and check if the origin lies in one of them? This sounds like involving some more unnecessary calculation.</p>\n<p>Thanks,</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8996,
    "post": 368,
    "parent": 8995,
    "date": "2011-02-05T19:13:29",
    "content": "<p>Yes, that&#8217;s exactly right.  If you are only looking for a boolean true/false then you only need to create a simplex within the Minkowski sum (difference in our case) as outlined in this post.  If you can create a simplex that contains the origin, then the shapes are colliding, otherwise they are not.</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk-figure11.png\" alt=\"Figure 11\" /></p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk-figure12.png\" alt=\"Figure 12\" /></p>\n<p>Here is the same example just the blue shape has been translated (1, -1).  <em>Notice how the Minkowski sum shape doesnt change, it only moves (-1, 1).</em>  If you run through the code above using this example you will notice that the condition:</p>\n<pre>\n// make sure that the last point we added actually passed the origin\nif (Simplex.getLast().dot(d) <= 0) {\n</pre>\n<p>Will fail during the \"create simplex\" iteration.  If at any point this condition fails then we know that they shapes are not overlapping.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8995,
    "post": 368,
    "parent": 0,
    "date": "2011-02-05T16:46:04",
    "content": "<p>I&#8217;m a bit confused. If all I need is to detect if the collision is happening and NOT care about the distance between the two objects A and B, does it mean, with the Minkowski difference giving the boundary of the set(A-B), I only need to determine is the origin is located in side that boundary by doing some dot and cross product of vectors?</p>\n<p>Thanks a lot.</p>\n",
    "author": "Ray Zong",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5f0e12478dba74d5cf03385efa0a6d85?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9099,
    "post": 369,
    "parent": 9098,
    "date": "2010-12-24T19:56:15",
    "content": "<p>Rodrigo,</p>\n<p>Sorry for the late response.  Now I just to remember how this works&#8230;.</p>\n<p>To answer the first question:  You are right that (1.7, 2.51) is the closest point <strong>if the simplex was a line</strong>, since it isn&#8217;t, the closest point is the end point of the line segment.  Now I haven&#8217;t fully thought it through yet, but it may not matter because you still obtain a vector in that points to the same Voronoi region of the simplex.  Ideally, I think you would want d to always be the simplex normal in the direction of the origin.</p>\n<p>The second question is bit tricky:  What you have found here is a degenerate case!  If you look closely, the origin actually lies on the line created by the simplex points, thereby causing the result to be zero.  Even if you do something like what I suggested in the first questions answer, this can still happen depending on the method you arrive at the closest point.  So in this case, you do have to do something different, which is <strong>keep the points who are closest to the origin</strong> (so you must pick 2 of the 3).  What you have suggested is similar to what I do as well.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 9098,
    "post": 369,
    "parent": 0,
    "date": "2010-12-23T18:33:50",
    "content": "<p>Although your tuturial was very helpful and easy to follow, I found some issues:</p>\n<p>&#8211; On the first iteration, you picked ‚Äòp‚Äô as (1, 3), when the<br />\ncalculation yelds (1.7, 2.51).</p>\n<p>&#8211; In the situation shown on fig1.jpg the minkowski difference (blue dots)<br />\ndoesn‚Äôt contain the origin(white dot), but still, the closestPointToOrigin()<br />\nroutine returns (0,0);</p>\n<p>To fix that, before the return i put the following statements:</p>\n<p>if the found point is between a and b<br />\nreturn it<br />\nelse if a.magnitude() &lt; b.magnitude()<br />\nreturn a<br />\nelse<br />\nreturn b</p>\n<p>And the result is fig2.jpg, note that p is the same as a.</p>\n<p>F.Y.I: the squares are 20√ó20 pixels.</p>\n<p>Could you give me a opinion about that?</p>\n<p>Thank you!<br />\n‚Äì<br />\nfig1.jpg : <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/img210.imageshack.us/i/fig1k.jpg/');\"  href=\"http://img210.imageshack.us/i/fig1k.jpg/\" rel=\"nofollow ugc\">http://img210.imageshack.us/i/fig1k.jpg/</a><br />\nfig2.jpg : <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/img195.imageshack.us/i/fig2ih.jpg/');\"  href=\"http://img195.imageshack.us/i/fig2ih.jpg/\" rel=\"nofollow ugc\">http://img195.imageshack.us/i/fig2ih.jpg/</a></p>\n",
    "author": "Rodrigo Chamun",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2f78bff37587b0ed06829bf1594861e0?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2f78bff37587b0ed06829bf1594861e0?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2f78bff37587b0ed06829bf1594861e0?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=153"
}, {
    "id": 8994,
    "post": 368,
    "parent": 8993,
    "date": "2010-12-03T13:45:25",
    "content": "<p>Yes, you can do the check that is performed within the while loop for the first point as a performance/robustness improvement.  In my implementation I have this, however, for the purpose of this post I wanted to focus more on understanding the algorithm.  That initial check can also be added to the 2D version as well.</p>\n<p>The algorithm will still terminate, but maybe after a few more iterations (performance).  In addition to this, it may also cause some zero vectors when using the vector triple product (robustness).</p>\n<p>You can reference my <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java\" rel=\"nofollow\">implementation</a> in the project <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a>.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8993,
    "post": 368,
    "parent": 0,
    "date": "2010-12-02T14:24:24",
    "content": "<p>hi, william</p>\n<p>Vector d = // choose a search direction  </p>\n<p>02 // get the first Minkowski Difference point  </p>\n<p>03 Simplex.add(support(A, B, d));  </p>\n<p>04 // negate d for the next point  </p>\n<p>05 d.negate();  </p>\n<p>for the first point in simplex, we should add </p>\n<p> if (Simplex.getLast().dot(d) &lt;= 0)</p>\n<p>determination. I think</p>\n<p>such as : two tetrahedron</p>\n<p>\ttetra.AppendVertex(VECTOR3D(0, 10, 0));<br />\n\ttetra.AppendVertex(VECTOR3D(-10, 0, 10));<br />\n\ttetra.AppendVertex(VECTOR3D(10, 0, 10));<br />\n\ttetra.AppendVertex(VECTOR3D(0, 0, -10));</p>\n<p>\ttetra1.AppendVertex(VECTOR3D(20, 5, 0));<br />\n\ttetra1.AppendVertex(VECTOR3D(12, 0, 5));<br />\n\ttetra1.AppendVertex(VECTOR3D(15, 0, 0));<br />\n\ttetra1.AppendVertex(VECTOR3D(13, 0, -5));<br />\ninitial direction is mass center vector.</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9137,
    "post": 370,
    "parent": 9136,
    "date": "2010-12-01T02:16:20",
    "content": "<p>Very good question.  It&#8217;s possible that you may obtain the zero vector in 3D also.  I have not implemented the algorithm in 3D.  However, EPA should be basically the same, instead of using edge normals, you use face normals.  A face (which can be thought of as a plane) has two possible normals, one pointing outside of the shape, and one pointing inside.  Getting one or the other depends on the winding of the face vertices.</p>\n<p>You can attempt to solve the problem by forcing all faces to have the same winding (counter-clockwise to obtain the face normal pointing outside the shape) or you can save the normals with the shape itself with some reference to what face it is for.</p>\n<p>If I were you, I would implement EPA <strong>without</strong> worrying about the zero vector problem.  This only crops up when shapes are touching.  Once you get it working for the majority of the cases then you can try to fix the outliers.</p>\n<p>Another way to solve the problem is avoid using EPA for the &#8220;small penetration&#8221; cases.  This is briefly explained in the Augmenting section of the post (see figure 6).  This approach is probably much faster and more stable for 3D.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9136,
    "post": 370,
    "parent": 0,
    "date": "2010-11-30T19:04:35",
    "content": "<p>Hi!</p>\n<p>I really like your walkthrough of the EPA algorithm! But I have a question.<br />\nYou talk a lot about the winding of the simplex, and I do understand how that would work in 2D, How would you do in 3d, as I am about to implement this in to my 3d game engine that already got GJK working nicely, it would be very practical if I knew this.</p>\n<p>Greetings from Sweden!<br />\nMr.Ful</p>\n",
    "author": "mrful",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1c0703937a715cbfa380ae525abf23b2?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1c0703937a715cbfa380ae525abf23b2?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1c0703937a715cbfa380ae525abf23b2?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8992,
    "post": 368,
    "parent": 8991,
    "date": "2010-11-24T13:13:32",
    "content": "<p>Thanks!  It&#8217;s good to hear that someone is getting some use out of it.</p>\n<p>I would suggest you try to implement it yourself first (like you are trying to do), but if you get stuck you can continue to ask me questions and/or reference my 2D implementation <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/collision/narrowphase/Gjk.java\" rel=\"nofollow\">here</a>.  It&#8217;s part of a larger project called <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a>, so if you see me use some other classes, just browse up to find their implementation within that same project.</p>\n<p>You will be most interested in the detect method that returns a boolean, since its the simplest.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8991,
    "post": 368,
    "parent": 0,
    "date": "2010-11-24T09:06:31",
    "content": "<p>thanks for your reply, william</p>\n<p>I am reading bullet code, but its code is unreadable, so I decide to implement it by your turtorial.</p>\n<p>your tutorial is so wonderful, it&#8217;s the best GJK tutorial on the web.</p>\n<p>thanks again</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8990,
    "post": 368,
    "parent": 8989,
    "date": "2010-11-23T13:21:54",
    "content": "<p>Yes, that right.  3D should keep a tetrahedron.  The process is the same just a little more complex since you have another dimension to worry about.  Once you have a triangle, you will want to take the direction of the face of the triangle towards the origin to obtain the 4th point.  Then, like you said, find the Voronoi region the origin is in.  If it&#8217;s inside the tetrahedron then we can return true to indicate a collision.  If it&#8217;s outside the tetrahedron, then we need to obtain a new search direction.  The new search direction will be the normal of the face in the direction of the origin.  The termination condition can remain the same &#8220;If the new point we found using the support function is not past the origin, projected onto the search direction, then we know that the origin is not in the Minkowski Sum and therefore the shapes are not colliding.&#8221;</p>\n<p>I have not implemented the 3D version of GJK.  If you watched video I linked to at the beginning of the post, it should be pretty easy to formulate the tetrahedron case.   Initially I wouldn&#8217;t worry about reducing the &#8220;if&#8221; statements down to the minimum until you have something working.</p>\n<p>I know that the opensource project <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.bulletphysics.org/');\"  href=\"http://www.bulletphysics.org/\" rel=\"nofollow\">Bullet</a> has a 3D implementation of GJK (I have a very hard time reading that source code however, probably because my C++ is so rusty, but might have better luck)</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8989,
    "post": 368,
    "parent": 0,
    "date": "2010-11-23T05:31:24",
    "content": "<p>2. jude orgin if in the 4 face voronoi area, if in a face voronoi area, we will choose direction of voronoi and remove vertex opposite this face, insert new vertex to simplex by new direction.</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8988,
    "post": 368,
    "parent": 0,
    "date": "2010-11-23T05:17:41",
    "content": "<p>hi, william</p>\n<p>In 2D, we keep simplex a triangle, if we only keep simplex a tetrahedrold in 3D?<br />\nso I think how to remove a vertex from tetrahedrold,&#8230;<br />\n1.first judge orign if in the voronoi area of 4 vetices. if it is in these area, it&#8217;ll no collision, for simplex vertices are vertices of minkowski difference shape.<br />\n2. jude orgin if in the 4 face voronoi area, if in a face voronoi area,  we will choose direction of voronoi and remove vertex opposite this face.<br />\n3. otherwise, orgin in internia of tetrahedrod, it&#8217;s collison state.</p>\n<p>is my idea right? if you supplement a 3D simplex checking, it will be perfect.</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 9165,
    "post": 371,
    "parent": 9164,
    "date": "2010-11-16T13:15:49",
    "content": "<p>We remove the external forces from the equation because they can be integrated (in other words, applied to the bodies) before we even attempt to solve any constraints.  Take gravity as an example.  Gravity will try to accelerate an object in a direction.  We can go ahead and apply that force to the bodies to get new velocities.  Afterwards, we can solve the constraints as normal using a much simpler equation.</p>\n<p>In short we remove those from the equation because we can apply them early (since any illegal movement will be removed by the constraints) and because it makes the solution for the constraints much simpler.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9135,
    "post": 370,
    "parent": 9134,
    "date": "2010-11-16T13:08:02",
    "content": "<p>Thanks again for finding that mistake.  I fixed it within the post.</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 9164,
    "post": 371,
    "parent": 0,
    "date": "2010-11-16T10:25:08",
    "content": "<p>hi, william</p>\n<p>how to understand &#8220;we can perform the integration using the external forces separately therefore removing the external forces from the equation&#8221;?</p>\n<p>why remove the external force from equation</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=191"
}, {
    "id": 9134,
    "post": 370,
    "parent": 0,
    "date": "2010-11-16T05:11:40",
    "content": "<p>normal = edge.normal;<br />\nor normal = e.normal?</p>\n",
    "author": "mikwolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=180"
}, {
    "id": 8987,
    "post": 368,
    "parent": 8986,
    "date": "2010-11-11T13:08:14",
    "content": "<p>Good catch, I fixed it within the post.</p>\n<p>Thanks,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8986,
    "post": 368,
    "parent": 0,
    "date": "2010-11-11T12:51:19",
    "content": "<p>a little error:</p>\n<p> = (32, -96)<br />\n = (0.316, -0.948)</p>\n",
    "author": "mikewolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8985,
    "post": 368,
    "parent": 8984,
    "date": "2010-11-10T13:51:36",
    "content": "<p>Yeah, I can see how that&#8217;s a little confusing.  You are correct that there are only shape1.vertices.size * shape2.vertices.size number of <strong>vector</strong> subtractions.  Since I&#8217;m working in 2D here its 2 subtractions per vector subtraction:</p>\n<p>[code=&#8221;java&#8221;]<br />\n(3, 2) &#8211; (2, 0) is really<br />\nv.x = 3 &#8211; 2;<br />\nv.y = 2 &#8211; 0;<br />\n[/code]</p>\n<p>William</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8984,
    "post": 368,
    "parent": 0,
    "date": "2010-11-10T08:51:53",
    "content": "<p>Why is shape1.vertices.size * shape2.vertices.size * 2 subtractions?<br />\nI feel shape1.vertices.size * shape2.vertices.size  is enough.</p>\n",
    "author": "mikwolf",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d9f8f136432fee0a9e1dac59999ccd6?s=96&d=mm&r=g"
    },
    "post_guid": "http://www.codezealot.org/?p=88"
}, {
    "id": 8857,
    "post": 366,
    "parent": 8856,
    "date": "2010-10-10T01:49:27",
    "content": "<p>I looked at your question you posted there and the answer given is pretty much correct.</p>\n<p>However, to be safe its good to make sure you use the correct one, which depends on the winding of the polygon.  If the winding of the polygon is Counter-Clockwise then you should use the normal that points right of the edge.  If the polygon winding is clockwise, you should use the normal that points left of the edge.  (This is why many engines require a winding direction of CCW or CW)</p>\n<p><img src=\"http://www.dyn4j.org/wp-content/uploads/2015/08/polygon-winding.png\"/></p>\n<p>Referring to the really bad image above, and just using the edge (1, 1) to (2, 1.5) we get:</p>\n<pre>\nVector p1 = new Vector(1, 1);\nVector p2 = new Vector(2, 1.5);\n\nVector edge = p2 - p1;\n// edge is now (1, 0.5)\n\n// => (-y, x) = (-0.5, 1)\nVector leftHandNormal = edge.left();\n\n// => (y, -x) = (0.5, -1)\nVector RightHandNormal = edge.right();\n</pre>\n<p>If we used used the left hand normal for this edge we would get a normal that points in instead of out of the polygon.  If we reverse the winding:</p>\n<pre>\nVector p1 = new Vector(2, 1.5);\nVector p2 = new Vector(1, 1);\n\nVector edge = p2 - p1;\n// edge is now (-1, -0.5)\n\n// => (-y, x) = (0.5, -1)\nVector leftHandNormal = edge.left();\n\n// => (y, -x) = (-0.5, 1)\nVector RightHandNormal = edge.right();\n</pre>\n<p>As we can see we would want to use the left normal in this case.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8855,
    "post": 366,
    "parent": 0,
    "date": "2010-08-25T09:31:45",
    "content": "<p>Thanks &#8212; nice, informative post.</p>\n",
    "author": "Nick Wiggill",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/e7a72f7d8c02aaabc041f1d48bed428f?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/e7a72f7d8c02aaabc041f1d48bed428f?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/e7a72f7d8c02aaabc041f1d48bed428f?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8854,
    "post": 366,
    "parent": 8853,
    "date": "2010-08-21T20:18:36",
    "content": "<p>Sorry I was away for a while and just now catching up.  You can look at the implementation of the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java\" rel=\"nofollow\">Interval</a> class as an example.</p>\n<p>But if you are anything like me you like to figure things out on your own.  Here is what I would suggest, write down some examples for the different cases:<br />\n(0, 4) and (2, 6) normal case<br />\n(0, 3) and (4, 7) no overlap<br />\n(3, 6) and (0, 2) no overlap, reversed<br />\n(0, 3) and (3, 6) no overlap, &#8220;touching&#8221;<br />\n(0, 7) and (1, 4) overlap, containment<br />\n(0, 2) and (0, 2) same projection<br />\netc.<br />\nand try out your methods.</p>\n<p>For example, the method doesOverlap has some problems with example #3 that I have given since the first condition is true, yet the projections do not overlap.</p>\n<p>As for the getOverlap method I can&#8217;t really say since I&#8217;m not sure what Collider.getDistance is doing, but I&#8217;ll try to answer.  After the check to make sure the two projections overlap you only need to subtract two of the values:</p>\n<p>For example if the projections are:<br />\n(0, 3) and (2, 30) then we only need to perform 3 &#8211; 2<br />\nLets look at another case:<br />\n(4, 20) and (-1, 7) then we only need to perform 7 &#8211; 4<br />\nLets look at another case:<br />\n(1, 10) and (2, 4) then we only need to perform 4 &#8211; 2<br />\nAnd another case:<br />\n(0, 3) and (3, 5) then we only need to perform 3 &#8211; 3<br />\nLets look at one more case and you may see a pattern:<br />\n(-2, 6) and (-1, 10) then we only need to perform 6 &#8211; -1</p>\n<p>I&#8217;ll drop in a hint, it involves using max and min.</p>\n<p>Thanks for the compliment btw,<br />\nWilliam</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8853,
    "post": 366,
    "parent": 0,
    "date": "2010-08-14T21:01:04",
    "content": "<p>First of all I would like to thank you for this tutorial. It is far clearer than many others that I have encountered online. </p>\n<p>I was implementing separating axis, using this guide, and was curious about the implementation of Projection. Is the following how you would implement it? I am particularly concerned about getOverlap.</p>\n<pre>\npublic class Projection {\n  \n  private final float m_min;\n  private final float m_max;\n\n  public Projection(float min, float max) {\n    m_min = min;\n    m_max = max;\n  }\n\n  public boolean doesOverlap(final Projection other) {\n    if(m_max > other.m_min) {\n      return true;\n    }\n\n    if(m_min > other.m_max) {\n      return true;\n    }\n\n    return false;\n  }\n\n  public double getOverlap(final Projection other) {\n    if(!doesOverlap(other)) {\n      return 0;\n    }\n\n    if(m_max > other.m_min) {\n      return Collider.getDistance(m_max, other.m_min);\n    }\n    else if(m_min > other.m_max) {\n      return Collider.getDistance(m_min, other.m_max);\n    }\n    else {\n      Log.warning(\"Bad case in getOverlap!\");\n      return 0;\n    }\n  }\n}\n</pre>\n",
    "author": "Mukkarum",
    "avatars": {
        "24": "http://1.gravatar.com/avatar/1db7b3d250f506d7a530a2e2f9fd7379?s=24&d=mm&r=g",
        "48": "http://1.gravatar.com/avatar/1db7b3d250f506d7a530a2e2f9fd7379?s=48&d=mm&r=g",
        "96": "http://1.gravatar.com/avatar/1db7b3d250f506d7a530a2e2f9fd7379?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8852,
    "post": 366,
    "parent": 8851,
    "date": "2010-07-29T22:48:15",
    "content": "<p>Checking what voronoi region a point lies in can be performed by a number of side of line tests.  For instance the GJK algorithm uses this to determine where the origin is relative to the simplex.  See my GJK post to get an idea.</p>\n<p>It may not even be worth it if your polygons have a small number of vertices, especially in 2D.  In fact, in my dyn4j project I use the brute force method and it never shows up on the profiler (mostly because you don&#8217;t compare the distance, but instead the squared distance).  This is only 5 operations per vertex (2 subtraction, 2 multiplication, and one addition).  It would be difficult to beat this in the general case.</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8851,
    "post": 366,
    "parent": 0,
    "date": "2010-07-28T14:30:09",
    "content": "<p>&#8220;The closest vertex on the polygon can be found in a number of ways, the accepted solution using Voronoi regions which I will not discuss in this post.&#8221;</p>\n<p>doh!!!<br />\nwho can help me about using voronoi to find the closest vertex? :(</p>\n",
    "author": "ForrestUV",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/5d3ec7f30e8ba758e3155375eaff1186?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/5d3ec7f30e8ba758e3155375eaff1186?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/5d3ec7f30e8ba758e3155375eaff1186?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8850,
    "post": 366,
    "parent": 8849,
    "date": "2010-05-22T07:15:55",
    "content": "<p>No, you are on the right track.  Normalization is the same thing as making it a unit vector:</p>\n<p>Say your axis is the vector (3, 4) to normalize (i.e. make it a unit vector) just find the length:</p>\n<p>l = sqrt(x2 + y2)<br />\nl = sqrt( 3 * 3 + 4 * 4 ) = 5</p>\n<p>Then divide by the length</p>\n<p>= (3/5, 4/5) = (0.6, 0.8)</p>\n",
    "author": "William",
    "avatars": {
        "24": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=24&d=mm&r=g",
        "48": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=48&d=mm&r=g",
        "96": "http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}, {
    "id": 8849,
    "post": 366,
    "parent": 0,
    "date": "2010-05-20T13:47:29",
    "content": "<p>Hi I am very interested in your post on SAT. I found the post to be very clear and informing as I am currently trying to implement a SAT based collision test between a rectangle and a circle. My question has to do with projecting a shape on an axis, you  made a note in your pseudo code that the axis should be normalized. How would you achive this? </p>\n<p>In my case I am finding the axis that I want to project onto by taking the vector between the rectangles closest corner and the circles center (I only do this if the circles center is not directly over or next to the rectangle). This vector should define the axis that I want to project onto but how do I Normalize this? Am I just over complicating the issue, and should I normalize the vector by making it a unit vector?</p>\n<p>Cheers Greg</p>\n",
    "author": "Greg Atkinson",
    "avatars": {
        "24": "http://2.gravatar.com/avatar/2099a957d39fc5838ea5e149921dcf9e?s=24&d=mm&r=g",
        "48": "http://2.gravatar.com/avatar/2099a957d39fc5838ea5e149921dcf9e?s=48&d=mm&r=g",
        "96": "http://2.gravatar.com/avatar/2099a957d39fc5838ea5e149921dcf9e?s=96&d=mm&r=g"
    },
    "post_guid": "http://codezealot.org/?p=55"
}]