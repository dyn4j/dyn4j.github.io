id: 9233
date: 2011-06-30 15:25:24 -0400
author: Dirk Gregorius
parent: prismatic-constraint
avatar: http://0.gravatar.com/avatar/fae854963a661a0fb368359effc41a59?s=96&d=mm&r=g
message: "<p>Hi William,</p>\n<p>I haven't checked your line constraint. In your derivation for the prismatic constraint you are not accounting for the change n over time. I use n instead of t, because dt/dt might look confusing. </p>\n<p>C = (x2 + r2 – x1 – r1) * n = 0</p>\n<p>dC/dt = (v2 + cross( omega2, r2 ) &#8211; v1 &#8211; cross( omega1, r1 ) ) * n <strong>+  (x2 + r2 – x1 – r1) * dn/dt</strong></p>\n<p>You are missing the RHS of the equation. So what is dn/dt? It is the change of a local axis. E.g. if you would store n in body1 dn1/dt = cross( omega1, r1 ). Lets define dp = (x2 + r2 – x1 – r1) you get</p>\n<p>dC/dt = (v2 + cross( omega2, r2 ) &#8211; v1 &#8211; cross( omega1, r1 ) ) * n +  dp * cross( omega1, r1 )</p>\n<p>When you derive constraints do not start with the velocity constraint. Solving on the velocity level is a linearization oo the original problem since you now are solving in the tangent space of the original constraint. You also need the position constraint for stabilization (e.g Baumgarte or Post-Projection). The best advice I can give for constraints is the following recipe (which I know from the Shabana book, but which is very likely in the engineering community much longer) is.</p>\n<p>1) Write down the position constraint<br />\n2) Build time derivative<br />\n3) Identify Jacobian by inspection using dC/dt = J * v</p>\n<p>As a side exercise if you are interested you can think about this. The derivation I showed is also true for non-penetration constraints. But here the RHS is always zero. </p>\n<p>This is a great site William. Keep up the fantastic work.</p>\n<p>Cheers,<br />\n-Dirk</p>"