id: 9149
date: 2012-06-07 18:17:53 -0400
author: William
parent: epa-expanding-polytope-algorithm
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>Yeah these are some of the cases where GJK and EPA can get tricky.  First let me say that the EPA guide here requires that the final simplex from GJK is a triangle (for 2D) to work correctly.</p>\n<p>There are two sub cases for the case in which the origin is on an edge of the simplex:<br />\n  1. The edge of the simplex (which the origin lies on) is an edge of the Minkowski Sum<br />\n  2. The edge of the simplex (which the origin lies on) lies inside of the Minkowski Sum</p>\n<p>In the first case, this indicates touching contact between the two shapes.<br />\nThe second case is a bit of a problem in 3D for the line segment case.</p>\n<p>Thankfully in 2D we have an easy way out for both of these cases.  If the origin lies on an edge of the simplex we can just use either perpendicular vector of that edge as the next search direction (the modified line segment case of GJK.containsOrigin):</p>\n<pre>\n// then its the line segment case\nb = Simplex.getB();\n// compute AB\nab = b - a;\n// get the perp to AB in the direction of the origin\nabPerp = tripleProduct(ab, ao, ab);\n// is the new direction vector close to the zero vector?\nif (abPerp.getSquaredMagnitude() <= EPSILON) {\n  d.set(ab.left());\n  // you can use either v.left() = (v.y, -v.x)\n  // or v.right() = (-v.y, v.x)\n} else {\n  // set the direction to abPerp\n  d.set(abPerp);\n}\n</pre>\n<p>William</p>"