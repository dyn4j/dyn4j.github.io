id: 9139
date: 2011-04-04 13:03:30 -0400
author: William
parent: epa-expanding-polytope-algorithm
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>Good question, and the distinction is good to note here.  The post only covered how to obtain the contact normal and depth, not the contact points.  In fact, finding the contact points from the contact normal and depth is a entirely different subject in itself.  I do not have a post on this yet.</p>\n<p>The <a href=\"http://www.dyn4j.org\" rel=\"nofollow\">dyn4j</a> project uses a modified clipping method (handling circle shapes is the only difference really) that is used in <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.box2d.org');\"  href=\"http://www.box2d.org\" rel=\"nofollow\">box2d</a> to obtain the contact points from the contact normal and depth.</p>\n<p>If you choose to go the \"Core Shapes\" route then you may be able to get this information by using the GJK distance algorithm.  The GJK distance algorithm can be used on the \"Core Shapes\" to obtain the closest points and separation vector (see the <a href=\"http://www.dyn4j.org/2010/04/gjk-distance-closest-points/\" rel=\"nofollow\">GJK &#8211; Distance &amp; Closest Points</a> post).  Then you can translate these points along the separation vector depth distance to obtain a collision point on each shape (you probably should only use one of them).  I haven't thought it through completely, but this may or may not be accurate.  I want to say that <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/www.bulletphysics.org');\"  href=\"http://www.bulletphysics.org\" rel=\"nofollow\">bullet</a> is doing this for shallow penetration, but I don't remember.  There are more details here, but this is probably enough to get you going for now.</p>"