id: 8892
date: 2011-12-13 14:00:13 -0500
author: William
parent: sat
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>A rectangle is a special kind of polygon.  It has 4 sides and by extension 4 normals to test.  But, since the pairs of sides are parallel we can reduce the number of normals to test for a rectangle to just 2 (the link you sent tests all 4, but this isn't really a problem just a small performance enhancement).</p>\n<p>If we allow rotation of the rectangle then we must test all the vertices.  You can see this in the code in RotatedRectangle.cs lines 91-94.</p>\n<p>As far as the code, if I translate into a more mathematical format:</p>\n<pre>\nprivate int GenerateScalar(Vector2 theRectangleCorner,\nVector2 theAxis)\n{\n  // this is the same as theRectangleCorner.dot(theAxis)\n  // in essence this is finding the projection of the vector \n  // from the Origin to theRectangleCorner onto theAxis\n  float aNumerator = (theRectangleCorner.X * theAxis.X) +\n                     (theRectangleCorner.Y * theAxis.Y);\n                     \n  // this is the same as theAxis.dot(theAxis)\n  // in essence this is finding the squared magnitude of the \n  // axis vector.  You don't need to do this unless theAxis\n  // is not normalized\n  float aDenominator = (theAxis.X * theAxis.X) +\n                       (theAxis.Y * theAxis.Y);\n                       \n  // this is accounting for theAxis not being normalized\n  // so doesnt need to be done if the axis is already \n  // normalized\n  float aDivisionResult = aNumerator / aDenominator;\n  \n  // this is storing the projected point (not necessarily\n  // the min/max).  My tutorial does not compute this as its\n  // not necessary for SAT\n  Vector2 aCornerProjected = new Vector2(\n                       aDivisionResult * theAxis.X,\n                       aDivisionResult * theAxis.Y);\n\n  // this is performing theAxis.dot(aCornerProjected)\n  // in essence this is finding the projection of the \n  // corner on the axis.  Later in the code, \n  // RotatedRectangle.cs lines 105-108, will set the \n  // min and max.  Its possible that this projection \n  // could be the min or the max\n  // this line is equivalent to line 5 in my code in the\n  // Projecting A Shape Onto An Axis section\n  float aScalar = (theAxis.X * aCornerProjected.X) +\n                  (theAxis.Y * aCornerProjected.Y);\n  return (int)aScalar;\n}\n</pre>"