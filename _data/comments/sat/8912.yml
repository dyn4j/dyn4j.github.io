id: 8912
date: 2012-05-12 03:29:42 -0400
author: William
parent: sat
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>To be clear you have three questions (right?):<br />\n1. What happens when there are multiple MTVs in which they are the same depth but different normals<br />\n2. What do you do to resolve the collision of multiple shapes vs. pairwise<br />\n3. What happens when we choose the wrong MTV causing a shape to stop abruptly (internal edge collisions).</p>\n<p>These are good questions and, as it turns out, all difficult problems to solve.  I will briefly talk about each one and give my recommendation.</p>\n<p>1.  Most code just chooses either the first or last minimum MTV.  Algorithms like SAT require that the shapes be intersecting.  Once the shapes are overlapping we have left \"the real world\" and must rely on approximations and best judgement.  The idea in these cases is that we don't know which way the shapes intersected to determine which MTV to use.  You could use the relative velocity of the bodies to help decide (where you prefer the minimum MTV that is least perp. to the relative velocity).  If the relative velocity is a) zero or, b) equally perp. to both minimum MTVs, then you are back to choosing an arbitrary one.  I always choose the first minimum MTV IIRC.</p>\n<p>2. SAT handles Collision Detection.  Collision resolution is an entirely different subject and much more complex.  Collisions <em>could</em> be resolved by using the MTV directly and translating the shapes out of the collision.  But as you said, if you have more than just a pairwise interaction, the translating method won't solve the global solution (it's a local solution).  Enter physics engines.  This is the main reason why physics middleware exists.  They solve the multi-body problem and a whole host of others.  Most physics engines these days use impulse based solutions.  dyn4j uses the Sequential Impulses method that the creator of Box2d came up with.</p>\n<p>3. It is certainly possible that the wrong MTV will be chosen and a shape will abruptly stop.  In fact this is a big problem for platformer type games (where the character is controlled by the user).  I have not researched solutions to this problem in depth but I know that Box2d has a solution.  The Box2d solution is to use a chain of vertices representing linked line segments and detect internal collisions using this special structure.  However, if you have a 4 x 4 stack of blocks, this method will not solve the problem for the collisions on the top of said blocks.  I think most attempt to get around this problem by optimizing the collision body representation.  In dyn4j I chose to ignore this problem and let the game designers decide how best to solve this issue.</p>\n<p>William</p>"