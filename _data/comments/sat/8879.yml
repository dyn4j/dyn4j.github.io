id: 8879
date: 2011-08-13 13:07:10 -0400
author: William
parent: sat
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>The Projection class stores the minimum and maximum projections of the shape along d as it was explained <a href=\"http://www.dyn4j.org/2010/01/sat/#sat-projshape\" rel=\"nofollow\">here</a>.  So the overlap method of the Projection class tests whether the two projections overlap.  For example, if the direction you were projecting on was (1, 0), you could get projections like this:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat-proj-diff.png\" /><br />\nThe overlap is the gray area where the two projections overlap or the difference between max1 and min2.  So testing whether they overlap could be done by:</p>\n<pre>\nbool Projection::overlap(Projection* other) {\n  return this->max > other->min\n}\n</pre>\n<p>Unfortunately this condition is not sufficient.  You can see that this fails in this case: p1 = (3, 6) and p2 = (0, 2) .  The projections do not overlap (If you imagine these projections along the x-axis) but our overlap method will return true anyway.  You can look at my implementation of the Projection class <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java');\"  href=\"https://github.com/dyn4j/dyn4j/blob/master/src/main/java/org/dyn4j/geometry/Interval.java\" rel=\"nofollow\">here</a>.  I call it Interval instead of Projection since I use it for other things.</p>\n<p>From the source you can see that the overlap condition that I use is:</p>\n<pre>\nreturn !(this->min > other->max || other->min > this->max);\n</pre>"