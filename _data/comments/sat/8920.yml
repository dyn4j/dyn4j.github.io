id: 8920
date: 2012-09-11 13:01:27 -0400
author: William
parent: sat
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>Yeah it can be a bit confusing going from 2D to 3D.  If we take a step back for a moment we can see where the difference lies.  When we project a 3D shape onto an axis what do we actually get and what are we actually doing?</p>\n<p>For instance, in 2D when we project a shape onto an axis (line) to get a 1D interval; [min, max].  But in 3D, its not quite the same.  In 3D we have to project the shape onto a plane (we use the axes of the 3D shape as the plane normals).  This will produce a 2D shape for each axis (see the following illustrations).</p>\n<p>Example Scene:<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_1.png\" alt=\"3D scene\" /></p>\n<p>View from above (this would be the y axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_2.png\" alt=\"Top Projection\" /></p>\n<p>View from the front (this would be the z axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_3.png\" alt=\"Front Projection\" /></p>\n<p>View from the side (this would be the x axis projection for example)<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/01/sat_72_4.png\" alt=\"Side Projection\" /></p>\n<p>The projection code in the 3D to 2D case will need to return the actual projected points rather than an interval.  Then we would perform the standard 2D SAT algorithm as described in my post on the 2D shapes generated.</p>\n<p>The tricky parts will be with any planar shapes in 3D (like your triangle case).  Their projections onto the planes of their edges will create line segments.  When the 2D line segment is projected onto a perpendicular axis (line), it will create a degenerate 1D interval like [3, 3] (in this case you will need to really examine your overlaps method to handle this case).</p>\n<p>My recommendation is to start simple.  Start with two 3D AABBs so that you only have to test 3 axes (x, y, z).  Then project each shape onto those 3 axes (to produce 3 2D AABB tests).  Then perform the 2D SAT algo. on those pairs.  Then move to the general case (OBB, arbitrary convex).  Then move to incorporating planar shapes (triangles, planar AABBs, etc.) (btw your projection/axes code looks good for 2D).</p>\n<p>William</p>"