id: 8859
date: 2011-03-07 13:53:36 -0500
author: William
parent: sat
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>The normal that you want is the one that points <em>outward</em> from the polygon.  So if we look at the example above, we want the right hand normal if the winding is anti-clockwise, and the left hand normal if the winding is clockwise.</p>\n<p>We want the normal below (which is determined by the winding):<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2015/08/polygon-winding2.png\" /></p>\n<p>Yes, in Java2D (and I'm sure other language's 2D APIs) use a coordinate system that has (0, 0) at the top left corner of the window.  You  can use the same math:</p>\n<p>If we place the above shape on that kind of coordinate system the two points would be:</p>\n<pre>\nVector p1 = new Vector(1, 1);\n// since the positive y-axis is pointing \"down\" the y coordinate\n// for p2 will be 0.5 instead of 1.5\nVector p2 = new Vector(2, 0.5);\n\nVector edge = p2 - p1;\n// edge is now (1, -0.5)\n\n// => (-y, x) = (0.5, 1)\nVector leftHandNormal = edge.left();\n\n// => (y, -x) = (-0.5, -1)\nVector RightHandNormal = edge.right();\n</pre>\n<p>Here we see that the edge that points outward from the shape is the left-hand normal.</p>\n<p>Now if we think about this, we realy only need to use this coordinate system when <em>drawing</em> the shapes.  You can store your coordinate data in any coordinate system you want.  So, instead, I would suggest storing your shape/vector data in whatever coordinate system you are comfortable with, then we you go to draw everything transform the coordinate system so that it matches yours.</p>\n<p>You can do this in Java2D like:</p>\n<pre>\nGraphics2D g = // get from the Canvas or whatever\n// save the current transformation\nAffineTransform old = g.getTransform();\n// apply a translation transform to place (0, 0) in the center of the window\ng.translate(width / 2, height / 2);\n// apply a flip transformation to flip the y-axis\ng.scale(1, -1);\n\n// draw your stuff\n// everything you draw here will be transformed from your\n// coordinate system (typically called \"world coordinates\") to\n// the window's coordinate system\n\n// restore the old transformation\ng.setTransform(old);\n</pre>"