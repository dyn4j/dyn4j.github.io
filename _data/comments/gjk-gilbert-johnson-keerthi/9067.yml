id: 9067
date: 2013-11-06 14:34:31 -0500
author: William
parent: gjk-gilbert-johnson-keerthi
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>@Saad</p>\n<p>Thank you, that is much clearer.  I'm assuming CO is the vector from C to the Origin.  Given that is the case, the problem I see with the pseudo code is what if the origin is inside the simplex already?  At first glance it's not a problem because it would be to the right, but what if the winding of the simplex is clockwise (look at Figure 9 for an illustration and replace B and C)?  The first if will be true, the next if will be true, and you will remove B and continue the algorithm, when you should have exited, reporting a collision.</p>\n<p>The winding of the simplex is not constant either, it can change each iteration (since we always just append a new simplex point and we could have removed B earlier).  That said, you could always compute the winding each iteration, then include that in the logic.</p>\n<p>Have you developed the Vector.isLeftOf(Vector) function?  Without thinking it through, I have another function that finds which side a point is relative to a line which has 7 operations.  To find the winding you will need to do one cross product which will be 3 operations.  So you may come out on top.  I'd be interested to know, how many operations you have once it's all working.</p>\n<p>William</p>"