id: 70760
date: 2015-12-28 14:43:02 -0500
author: Igor Kroitor
parent: gjk-gilbert-johnson-keerthi
avatar: http://0.gravatar.com/avatar/f75a542a8ee479c7f5080eb5235bfbf0?s=96&d=mm&r=g
message: "<p>Thanks for the post, I've just implemented GJK for 2.5D in C / Objective C. For deeper understanding I had to combine the explanation given in the post with the video from mollyrocket site, plus dyn4j source code on GitHub. Thanks again for keeping it readable (I don't know much Java, but the code and architecture is very clean and understandable indeed).<br />\nAs for my contribution I would recommend to avoid adding (and removing) vertices to the simplex array dynamically while iterating. In C/C++/Java/JavaScript/ObjectiveC and many other languages manipulating the size of a dynamic array causes multiple small allocations and deallocations of heap memory which can accumulate and become a bottleneck under heavy usage of the algorithm for many colliding polygons in a big scene, even with broadphase filtering. So for adding points to the simplex and especially for removing points from the simplex, I decided to create a vector3 array[3] and an &#8216;index' variable before the iteration process starts (on stack). The first support point (vector3) is always inserted at array[index=0]. During the 2nd and 3rd iteration I add points to array[++index]. In some cases of the third iteration, I have to remove either B or C to continue. Whenever I have to remove point B (which is in the middle of the simplex array), I swap it with point A (the last one added) and decrement the index. When I have to remove point C (which is in the beginning of the simplex array), I swap array[0] = array[1]; array[1] = array[2] with a plain assignment and decrement the index. This way a lot of time-consuming memory operations can be optimized.<br />\nMoving on to full GJK in 3D now ) Thanks a lot for your work – it is very useful.</p>"