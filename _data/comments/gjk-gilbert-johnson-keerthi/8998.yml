id: 8998
date: 2011-02-06 18:54:06 -0500
author: William
parent: gjk-gilbert-johnson-keerthi
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>Good question.  Yes you can start anywhere, although I would start with a point that was found the way all the others will be.  This way you ensure that the point is on the edge of the Minkowski sum.  You can find the point farthest in any direction by projecting all the points of the polygon onto the direction vector:</p>\n<p>For instance if d was (1, 0):<br />\n<img src=\"http://www.dyn4j.org/wp-content/uploads/2010/04/gjk-figure13.png\" /></p>\n<p>We can see that the point (13, 6) is the farthest point in that direction.  We can mathematically obtain this result if we perform the dot product of the points with the direction:</p>\n<pre>\nd.dot(13, 6) = 1 * 13 + 0 * 6 = 13\nd.dot(6, 6)  = 1 * 6 + 0 * 6 = 6\nd.dot(8, 2)  = 1 * 8 + 0 * 2 = 8\nd.dot(11, 1) = 1 * 11 + 0 * 1 = 11\n</pre>\n<p>Yes, if you need to show the Minkowski sum, then you must subtract all possible combinations of the points from both objects and take the convex hull of the resulting point set (notice in the picture above that some points are inside the Minkowski sum and are therefore ignored).</p>\n<p>To determine whether there is collision between the two shapes you don't have to subdivide the Minkowski sum.  That's what make this algorithm fast, in that you only have to iteratively build one tetrahedron inside the Minkowski sum that contains the origin.  If you cannot, then the shapes are not colliding.</p>"