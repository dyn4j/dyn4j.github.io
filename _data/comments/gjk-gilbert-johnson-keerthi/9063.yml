id: 9063
date: 2013-11-05 17:32:52 -0500
author: Saad Taame
parent: gjk-gilbert-johnson-keerthi
avatar: http://1.gravatar.com/avatar/70e51748cddcc7a80615b2b910393e7e?s=96&d=mm&r=g
message: "<p>I'll do the 2-simplex case with pseudo-code. Assume there is a macro or function that tells you whether a vector is to the left with respect to another (vector A is to the left of B if you have to rotate left starting at B to get to A). We can use determinant to answer this quickly (det(A B) > 0 means A is to the left of B assuming y-axis points downwards). Assume that direction vector is called D.</p>\n<p>2-simplex case: simplex = [A, B, C] so C is the latest point</p>\n<p>if CA is to the left of CO (det(CA CO) > 0):<br />\n  if CA and CO point to the same direction (dot > 0):<br />\n    D = rotateRight(CA) // D.x = -CA.y; D.y = CA.x (depends on coords-system)<br />\n    simplex = [A, C]<br />\n  else<br />\n    D = CO<br />\n    simplex = [C]<br />\nelse if CB is to the right of CO (= CO is to the left of CB):<br />\n  if CB and CO point to the same direction:<br />\n    D = rotateLeft(CB) // D.x = CA.y; D.y = -CA.x<br />\n    simplex = [B, C]<br />\n  else<br />\n    D = CO<br />\n    simplex = [C]<br />\nelse<br />\n  return true // Simplex contains origin</p>\n<p>&#8212;&#8212;&#8212;&#8212;-</p>\n<p>There are no triple products involved here, coord and sign flips do the job and there is no need for a function to test if a point is inside a 2-simplex so it's faster (maybe). I hope this is clearer.</p>"