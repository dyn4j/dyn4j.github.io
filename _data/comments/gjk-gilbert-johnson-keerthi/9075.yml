id: 9075
date: 2013-12-23 13:28:52 -0500
author: William
parent: gjk-gilbert-johnson-keerthi
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>@Saad</p>\n<p>Are you asking if there are any fast methods of computing the support mapping for high vertex count polygons?  If so, there are a few ways I can think of:</p>\n<p>One option is to implement a cache for the direction and its resulting farthest point (for each shape, or for the support map as a whole).  I believe the <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/bulletphysics.org/');\"  href=\"http://bulletphysics.org/\" title=\"Bullet\" target=\"_blank\" rel=\"nofollow\">Bullet</a> (CPU) library does this.</p>\n<p>Another option would be to use the convexity of the shapes to our advantage again.  We know, because the shape is convex, that if we test the first vertex (what determines the first vertex is arbitrary) in the shape and then test its neighbors, we can find the right direction to iterate to find the farthest vertex.  This can eliminate half of the vertices from being tested.  Another thing we can do is, once we are looping in the correct direction, i.e. the projections are increasing, we can stop and return on the next vertex whose projection is less than our current max.  For example, take the blue shape in figure 1.  If my direction is (0,-1) and I choose (7,3) as the first vertex I test, the (5,7) vertex will have a smaller projection than the (10,2) vertex (and (10,2) being bigger than the first).  So, I would iterate over the vertices in the direction of (10,2).  I then test (10,2) and find that it is now the farthest point and move to the next vertex.  I then test (12,7) and find that its projection is less than my current farthest point's projection, so I can stop and return (10,2).  Obviously, this isn't really helpful for low vertex count shapes, but you could always have an \"if\" that switches to this logic when the shape has more than X number of vertices.</p>\n<p>William</p>"