id: 9069
date: 2013-11-07 13:40:23 -0500
author: William
parent: gjk-gilbert-johnson-keerthi
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>@Saad</p>\n<p>My implementation of GJK is in Java and I use JUnit tests to do automated/regression testing.  You can find the GJK test cases in the ShapeXShapeYTest files <a onclick=\"javascript:pageTracker._trackPageview('/outgoing/github.com/dyn4j/dyn4j/tree/master/src/test/java/org/dyn4j/collision');\"  href=\"https://github.com/dyn4j/dyn4j/tree/master/src/test/java/org/dyn4j/collision\" title=\"GJK Collision Test Cases\" target=\"_blank\" rel=\"nofollow\">here</a>, although I'm not sure how useful they'll be to you.</p>\n<p>I found the best way to test was to setup a program in which, using the mouse, you can move around and/or rotate (at least) one of the shapes, while you continuously check for collision using your GJK implementation.  You can also draw the collision normal when a collision is found to verify it's pointing in the correct direction.  Then just play with one shape putting in all sorts of configurations until you are confident it works (try all the pathological cases).  From there you can just add test cases as you find bugs.</p>\n<p>I think you will still need to know the winding of the simplex as well.  For a simplex that has clockwise winding you need the verify if the vector is to the left, whereas for a simplex that has counter-clockwise winding you need to verify if the vector is to the right.  You should be able to use one cross product to determine the winding.  Remember that the winding may change each iteration of the algorithm.</p>\n<p>William</p>"