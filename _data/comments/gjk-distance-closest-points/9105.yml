id: 9105
date: 2011-02-07 13:50:47 -0500
author: William
parent: gjk-distance-closest-points
avatar: http://0.gravatar.com/avatar/9abfec71f4798ded76d242c8df48067e?s=96&d=mm&r=g
message: "<p>No problem, these questions will help everyone who reads them.</p>\n<p>As for question 1:  You do not have to check if the simplex contains the origin.  The simplex in the distance check is a line segment anyway and can only \"contain\" the origin if the origin lies on the line segment, in which case you must determine if this is considered a collision or not.  You may have noticed that in my code I do check if the origin lies within the triangle (before throwing away one of the points).  I do this because my distance method can be called by anyone, and they may not know that the distance method assumes that the shapes are separated.  Otherwise I would remove that check.</p>\n<p>As for question 2:  Right, the termination case is a bit tricky.  The termination condition in this algorithm is when the projection of the simplex points are equal (a better one, which is what I use in the post, is to test if the difference in the projection of the simplex points is below some tolerance).</p>\n<p>So in iteration 1, you find c, the new point, to be (-11, -1).  If we project this onto the search direction along with either of the current simplex points and subtract these we get 7.64, which is not small enough to end.</p>\n<p>So in iteration 2, you find c to be (-4, -1).  If we do the same thing here we get 2.2, which again is not small enough to end.</p>\n<p>Now in iteration 3, you find c to be (1, 3).  If we do the same thing again we get 0, which is less than our tolerance, so we end the loop.</p>\n<p>What this means is that the simplex (the red line segment) cannot get any closer to the origin.</p>"